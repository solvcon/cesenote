%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: yuhowNote.dvi
%%CreationDate: Thu Jan 28 16:30:08 2016
%%Pages: 17
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR17 CMR12 CMBX12 CMMI12 CMSY8 CMSY10 CMR8 CMMI8
%%+ CMTI12 CMR6 CMR10 CMEX10 CMSY6 CMMI6 t1xtt t1xbtt
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips yuhowNote.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.01.28:1630
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: t1xbtt
%!PS-AdobeFont-1.0: t1xbtt 3.0
%%CreationDate: 12/14/2000 at 12:00 PM
%%VMusage: 1024 27998
20 dict begin
/FontInfo 16 dict dup begin
/version (3.0) readonly def
/FullName (t1xbtt) readonly def
/FamilyName (t1xbtt) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Notice (Version 3.0, GPL) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /t1xbtt def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 120 /x put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{-28 -213 1516 882}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
02843723FD4914EA94CF5C86363ACA5D85BC6F2DC07E1913DE009E806C3EE8F3
FEC9E1C1A320C2124B06F5E41354C077F75C6EB18C1C637209CD429CF0A07147
4C4B3FB0D260C42F8BB83C7DB6A92ABCBC206C45E91E10AF52EEAB7427C2EEAF
00FE4361755860C83861E922F3F9B396CDDD72DCE20CAFF85B4DFC108C6E8C25
982D9DC24E0F00B2D9BF6BE30CF2CD3892B25A4449FE2E0A7E033EE6142D8652
C1E7A5D3B68F9ECB208F609A8B7C86E8AF1B60AB9C346C38846FFBDC552E7341
291E70E890C82591691295993A650184E182741E01DA169E64B4EBB55702E06F
089049ADFD0C4F35A59C3CB2AD1DD25291A3B2B8BD16BFDB519091D2CAD96662
E2DDD3332CFAA7FEFF2FC0C8E26DF69D38ABA34B49948B32FCC1005488C1662B
1A98BCF63020A275CFCA8611C69B85AFBF6167D6A3BE36D568914C6B2ED8E6DF
63A016E4B176ED42146154259263EE0F606C3ADDEA43343301E12304CDD678E4
F19D9BAD10E071D9F7F959365EE625AC55453D22D02BB2A5A27271C054422504
5A6DCBDC95B52E577A2C78FCA613979E564E716CFB2AFE24EB580E55BD31B793
E40676D096325222891C44E70040CE6085ED76FDD2ECFC22F3D5905F72427621
75715D57F356BC392ECAE0E28957FBB7D4C1F9C65F94E887C1E85775115A28CC
78A3FAED7C10FCD958A53B39FF47F3335D05DE7D739801546E15218920F3BC7E
036921697C151D69F9613E2612C1E47C2AC0E12E04299BC9B0C87F56A1805EFA
AA73145EF228D472BC40D91B1CE0A27190FCC803161441E93C9A4563D3CC9210
A811CA8EB357CD665203DDF390954C1E2CC19C4B84F68662A6AE4CB5B4FBAA20
8CB43E4FFAFEBEEB4C5E6634031AF41206BE29DC4740BD31A9BDA29B8D8236EB
31DCFB594A566DBB367A0DCE930A3292B1EC1D37D72EFE1E22C08457458AFE38
EE50B6B99A7C1BBD24528BC23FCB63A31A95F01C7737E4A8E129536522D2D71F
FA8EC7EC9295B897B23AB4FCB4C1285C2B13BF2117E2EE6B32360B8814FCAAD2
3C75F882EC4F0CE9244835A61C847D11742EABB8FC456986F268ADBEE6FDB34C
9EB9B9E1BA1A4BCDF47B3975587AF0CCF780FD26A4A0FA3B39327CA51B51A081
A14C31B84029A9A42A5770B72B426429F13EAE192C968150F8E489FB3A47B9DD
B3FE94E6B8B4E6D108BC2861574B57D2C07689F4779D9D0C0E72459F8F9C540C
6D77CA39CAD5B2E83C049D6A7A3A03ACCE553A4BC8480681FB6F4C265FC32619
E9963EF0CEB867645E71A30121BFEDA30C6F2E7180ECDD418478AAB20D731614
062573670F9D8CEEE802DFAF9CA24521DCD3EAFD59A94249A64FAFDD8CA75522
019E1062FF31EDB3EB8415DAEAA6D86E6B9613D6E3FB13343F286E50EB1FFD51
6E6CD23AA027AB15C29C4E257D0E8840A226F8FFA3BA61061DDD667F28AD617E
2CD29D58469AC5ED0A84630BAD24BDBF58F797267468673C1F827A13B731F514
48B2129A15FA8FCD20B7AB8A2238696BE2A331E1288E828316CDC970F65C776F
A0D40EB1EDE059A1B3BC72CEC65FBF01ABC9DC1DD8B0FD374BCBD51C39B53C47
E7D12E01DF1DCFE183FF35256D93962CEBB54A54DAE08CCBDAE66ED676A43215
4755D3917BF36F81346A5E36D828376C34BCEC4D7343379E77D1C92B5DCA883E
F315DE7787F9A746EBE4C6EAFD1E90E381862E5CEE6A79646CEF9B1155867037
8C087FAE5248C4EB0FBC03B01AFEFD9706F0B29DFA9C343FB34E9FD305C76D93
76031F1FEE19D3FB01B4C52E8EE99797CE7CBCDABD9300545EC99449AAA02D2B
39D2D9034103165393669C18CAD59DF00DA25E6189C3FD0790CC5E1BB731FCC8
6B9929CE8967F961A168AC97FD1DC7C96AA00AF31358F0985F8C69F381065ED0
4046BA8A9864E29BA1918CD9C0744CBDB02165BA7834B499776354C8AC19E106
AE87B6A9B272B80829824E6FC1AE5C21BE24E54497CDA3A67025BCDC9547307E
1E8D2FE2F0148E4AB55450168DC7662E3EC0039B03014982724D0D8F7348414C
37601979F66D18CF51B3A8BC2C5B0B3CE263D0626463DB3E4DD8D22277A07516
BB9939D6C730F69D5BA50F21057FB7BDFC3BBB28F85090AF870287FCFF137594
D8715322B0BCD133BF5F8E3819F2AABF22DF5D4B5E508BA65A489BCB8166AE53
07CD851FBA24876CC3A41AE618C133F953B65178BCCCB1410C5DF152BA7641E8
FF6DA956A7ED1BBDCF55FD691C5812BC3D9388A0AE615A0C4FB681D7950B3163
633AB791B3450FCD2FA53F5C479178C6F866CAC010EC95B649DD482B26C72BCF
A7700F29E15712D592AF460C425A076CCDB7F8549944CBD832BA9ECD705285A9
AFF8C72141A820B33681AFC8459475F9BB0D197EAD0A8398E90C063B615C80E1
BA6AA847FB989A0B9198C377B434575DDF879F0F9213541CF6C79FA2D0BE5D03
B1289E8466BB8DA63FAA64CE70C098474D3891FA2F4BCFFB7A7E34EC36B8628D
AA7AB223DF5A08B486C7A21B6401FB0F0C83BABEA9219B8C6BE2A28D36D34222
946B7A1C66480D9222C19C919FD15DCE9691B8836E0A31A63A9E3A38D1E8B95F
65024D31C0B053F9BA3DBD8F6146E0A467F4241D921254369957EA31B0B17D0E
ABB2DC644CFA296E28DD1FACDDFAD852DED13BB4673EA3125EE5A6389B0A458A
CADCE2A26F3ED6221DFA0C472FEB632EA516B82B20BBF93E8C75D34955EE7787
13F8CCD254C285801112D5FC8DB5FFAB676061D6BA0511EA244F57B9860B3B98
0FB9F64C634425C67FD89E6AC75D29DF85A3284B141B6B901E5B9FA11A21B7B7
0395EDB8FFD90C6E1EA0C7B22EB68029A44A939519BADD8A6761EB9A1A98BC89
2B81D8C0B71960D4B10AB2AD1A2D654292A018284EF3BEFBBFBDFAC7A5EC026A
5A05A3D125EA1B30E7A64B11DB6560801DBEB07B82C6740ADE5C04B41DC3DC82
33CEE4CF9FA7B756AFD1925036A59093F83A499A3812486A32FB29D6A24B2FD4
B993025A609F0BEF999BC996D54E49352540669991C1F1EB7FD33CDA680F3E5D
8772876117786F4694C2E491C46DA4F76EFD029DBCBD5F1B8C1FFCC1B5C2375E
5152E9ECB46FA198A2F2D7A4D72781355775BDCEE33F5FF4B43F556A6CC35760
F7912FF9982C520DDD3507BB14C3F6A1D4CA22B9ABA2EB91E2F8703ED271D2F5
11524FDCF565D524582D617D3092410E5E76DB402E5FDBCF7639ED7465BF8EEB
997A5C27C52222700E7BD31283A9BDD1DAF522F3AECDBD25FE5D706AC0888856
BEC0C3915C3FA2E1C3E8DD3D5186F63646480F98D345F54D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: t1xtt
%!PS-AdobeFont-1.0: t1xtt 3.0
%%CreationDate: 12/14/2000 at 12:00 PM
%%VMusage: 1024 27744
20 dict begin
/FontInfo 16 dict dup begin
/version (3.0) readonly def
/FullName (t1xtt) readonly def
/FamilyName (t1xtt) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Notice (Version 3.0, GPL) readonly def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/FontName /t1xtt def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /exclam put
dup 34 /quotedbl put
dup 37 /percent put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 75 /K put
dup 83 /S put
dup 84 /T put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
/FontBBox{-5 -183 1501 822}readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
02843723FD4914EA94CF5C86363ACA5D85BC6F2DC07E1913DE009E806C3EE8F3
FEC9E1C1A320C2124B06F5E41354C077F75C6EB18C1C637209CD429CF0A07147
4C4B3FB0D260C42F8BB83C7DB6A92ABCBC206C45E91E10AF52EEAB7427C2EEAF
00FE4361755860C83861E922F3F9B396CDDD72DCE20CAFF85B4DFC108C6E8C25
982D9DC5DADF2B65D69BF0242BB9BE5E60206AD5F1466CB7990AEE61A2829BB8
8269FB4E5C73FB4E44CF013ED9F77ED98BA480DB5507A1BB81FB3B3B293628DE
7441FE05F902179189BEE8A90BA0516247FCB843258A158C4821E9FBCE09B7FB
37CA20FD7F475E12625018A82434705D1796792572E1F0B5CB4C66A527FD6B41
CBAEA5A82E3445A9A35BDB456231C4E7078BA3F159DA2443CA073CC5EBA67FFD
F55742155C1A2AADBDCCC2B3549F783AA70AC262AD10CFC3A4CCF4C2C8529211
330E467016637E406FC07C39CE6E1D4DE0FD38E49A0B5A82C38B64C9D149D5AB
137C173FD0D1515964B4D13ACD48409D0BE7FE0BEFFF89A5599AA792D28852D9
03268B55D57728CB0E21BBF1041466A7C86EB399094BAB7F914BD396A653F4E8
2869DB6E8CCF5EA77CE74506870BD806CF475401AC1CE39489D24CFD284CD820
C75C54D108B69BD390CF6A70514876F8885DE4A176F497810D1370567A79EA3A
7C241B87D6B002CD7E7CBA7EB9DD5979DB45374D7C3A783234781A6893D5B052
11ECCCB8F4C06C686CD7116C48C3FDF37DE46A788A7D7932ADAD5FC0B8DBB74E
0E1BC677F7E3B9E7314527A827D08C985C1962463BEBFCBBDD622A46848847B7
E4659EF909BE85374ABDCB2CC49CAD4D1C9CF72F51D25F44F2B50E7429D79EA7
BA740C5C1AF286C872F5B31D7619F6BF954D1E7C03308131E3076F88AB277545
E9C9A4CCDF9D39701538289DF627A9DC2D0989F30DDAD0898E926D493143458D
E0B801B6E860BD352268CC7C8EB15DC9CCE2D7C01A38437194A2A14921A8FDBC
0CCC9FEECE8E0CFCC9738291F4A37D43365C3401628F12AC2E3993DEC5CAAA50
DF20FBB628D36C514CEE9772F83179FCB2FBBF40CACD73F8EC12447499A0E265
924E81B4776B55386C130F43FF36E5EC3638B2EFF4FDE3A20B9489458E3F9810
0A686ADB74F0C289300235BE0246FDAB19F95BDBFF6DD17FA0F793FE023642E6
021D27D8C9578A348728CB8FAC3EAA6D8E2ED28F011ABA10ADCC230F8CE03CD6
974573E65DD86E0E4C62BFF0300875E718307B3E8D2135A21E824C3D79F15B3D
EDA6A02AE51D4D4BE11D1470BBE9D4152D11F21666F47E01C651A6AE4C45EC3B
C9CCBDABD21FABC346F1E1FF4CF3607343157B463E3BAA645657DD9B743FB540
766F93041FAA0DBBD8700C62F68712B1A31FC9B033149185D35472A0D99D2F46
839FB17AF45B23E25F4297F40B64B99261829F29C647F32AB540128BC32DC71B
57D8283A08C4F56FCC9D6BF481EC5666F1A34EFEC472F8F801A548A9301F201B
D91F4FC14DA414E9359389B958639033987760A5E225FEDCBB87F91615800F25
AF66FFF93FE86F8283C5DEB8FDEB54D1B9848C6598284A25CEC02E82E284CB20
1B36D42DCA52ED4812841D4438F860446514B4134F2A8ABDEBD74EBCB5178698
D4C7C670AE07AF09909AED2BB051A20259D2EDA2A3BDBB22ED90FE31CAF72611
24DC587C5DEF932BDAB082868B18C9E31A83241405E121BD4E49332DE86B895D
C46F9AE42893AF0D8DF81C0C818BB8BF729B4B746748CC35E5277F57916A821C
5838F12D38215A016BEFCE25C9FE4425FD8DB572774AA7FAAF1CCA950EC394D6
BE34C0AFBA6E8D267B2DCDE223648877EBF34995482F16944B5FF23EBD63FAEA
CDEF3F2EF69024054E9E2AF6A0001A41D37EADB80DD2FD862FCC5E15ECF08DB0
A162FAE65DBC050F132D9F8819B467BDBE28BF42B343D70D8EB8B34C46766869
5AF30758BCF96188F17E078CAF2CDA6D72DD5A3489ECE5FF0307F953A06001C7
DA9C846205E5DE24191CF0E9A0FEC31A5C7CACA9C96E11C5172F73DF8161C4CA
88D79A488FFF4659B237D2AE4A6731D15980C3CC59601717EB9D91DBCD1E6027
93B95025B6D1E6E4D24DBBF1F5C265A25C50D1A91B9679F66198D7967873D9BA
BDF8BCDD4882E275B2CDD6C18D9900C348525C356A8054A7C6651FC12F148334
4BFEE93C8EAAF091CFAC7D51456B711F085AD53509F26541FCB36CFC7D16E2FA
AE26AB7CEB591571B17265B8D4D0EA85354BC8111436058FC942C61E96969E0A
05212F59F2E50ADDB70016FE107327735E62224CC27561417B11E59570192334
87B611478C58840D823829AA636F629FB8C31C0EA080D070A047D109222E7A4F
87949B1E0437402825B20AFFBE2D33B9A8ED0C1D7F94F8B72E6C2CD576A2828A
3CF05EF20AC44EFA191B9CB134F44803D138396F36A8912726C14456E77D5021
4CC7B628FDD340F70013C600BE987BBD3A262F96BCDD800E4E8A9ECFACC4547D
4557B07B8CCCD05A455A1C2C1D4E102CB996292F3D79113C1E8BDB0070C54750
E35F56FD55FD9E1D5455234F369310EAD6F139ACD41F388C4F227306E03C3E8F
ADF9B114F2E68589699704573AB37165F8F7338F0691D54738F47AF74DB890FF
E37CD717D74322767B9499765B18F3F1440ED79A0EDF825FD4E50F0F70D7F4A3
85A4508FCC680D48D5649A0601AC240C096EA124FDA56322AFF95496F073FD5D
B86D66F299889BD2D1583A0E1E47EF5F64DBC5DD452FD1E398C7EA039AA1B3E4
06F754175684587C19CCC43EA221AE9E9434E92D2E070CA758ED53771B7DB784
0F1A5A33237CC6D8D3EA17F5FAF29024DD2E6F03403620A99CBF68597F5EF3A9
E47E472283D3E9BD820A69ED505DAB8D7A203FBF23B27B2DF046F3E8121D358F
98C77598E05B1C7A32C3950F87E8056AD0CF97ADE4F298DB77F55EE4324A953C
835015E337E0EEC69537D96B26F192EA52BEFB7581212D7A8BBC828F73F160B9
DB1B4A23010D0DC931FD13FD9FE44D594A1F459C6A14B63B33600E61E6515234
1168220BF76B98F05D64CC90FDBE2184CFF6856CD0D4050162B9ED4D1660D384
0A96957CE733FFB011CE5B71C5304779F19EF1778F9E01C29648D46F2741B3A9
A6071C7FFCA7E49F836327B63109F0EE5D419714CBA5113FA7B1D62CF27C6B99
34FC266221C75153C48469D274477B97D9220AE366C07D82D736F78CCBD5753F
B404B78E0D107A0D96417E52D8389225277D9E2805416ABD85995A66A2725171
1FE24B2069177CC3131DA21AF894303E85D47C073C6E26B078953200ED7730F4
2444C9B9E67EAE171F759C16DFD8E426AFAFFEFC6F13D9AC2B9330D318400135
2A3D65AEAEE8D15D795A48F8A7802578A22D20B9ABA70631B2315A56ADAB9CB1
5F939A0F1CC7D5B5EBEE065AB7D3AD04D12020CF0EA92139625EDCD77B7088D4
35679A2324758CFEAA4402E225CDB8F40B4B3FF1BECD135848AE316483964319
8CDF93F9895860E22485E78C747395BE885E484BBE347C5BB9EB0AE0EBDAD23C
BC4C6D8A721A0D8B959CF3DFA5B1827FB0A4158357AD75FE94572B8AA0DAF518
20731666BD3C5DAE03C439296DF704BA0970B30EC2E7609F880175E409AF1575
380207C45E48690571544C287B982F6C9775BBE90BA2DF0102F3CF2EDEF2D16C
B493D9ABBB0E86F3D9098A1D644FBF257E8C338976C7BD4225FDAAC27989B164
18C2BEC451084E69AE9E39C7FB647DB6036F82FBFDF282887130846176B3631A
E33DE88FA1AEEA958F92815C58ECAD21178E2EDDA1527A2F60813025430B4929
6681065A8D8BC96D8171A2820119CC67C77E437D2DA8BA149AAE88BB16D8ACE3
31FCD6A0974B78146D108F2184154A2EB79A7A8D85383E1AB61778DB3AA20557
6A5B775B1D7ED75F28EB62D5E7C0E60150E61B8B33CC4FCA6421975DF1B42C44
D1555391E6165DD88DDFD6975406E3B378AA3E0A6307281CB5B1767802CF0A5A
F856B0A472A9FC13BD37AAA9795360C83D53B2DA126A7D64736F311D98294F93
2AC9F309A6B2D2A60DEA5CF08B04DACA3572C7F8E64F4E9C16FF355E7C1D81A6
664899A55AA6F225046071DD5AA67C107531C3C3E547DBFA773E7A5A38D7B98C
897D681DB57C53009AED8184D75B37E93CFFA2FB8536637657229CC63384A9F1
DF884274345353E1847E41ABE6F063B505E92FA1E9CF2B854FE7229ECA812261
2A5FC017955C6FEDAE7B54D64384955C354FF0E742220CEC1EE70BFE3B7E207A
180D1A87A2E2E20867BC88DFFFC3023951CF929ED254F4C6EB31EC4C134685FF
3EEC42A6313808AC545D24E7761FCD432883BD6902C3E768FB23BBCAFB76780C
9DD47DDAC0CB9B7B777FEBC0C6D4CD5EEBB06C46AB069AFFEBD9019E870C0F6F
FD4C1BE830FB6349CF018ABFD5F12F7D30A7D22AF3DCFBBCD7D1E0D45DA1C08E
2218224539BEC6AE757B44F65302CC39424B88A3D51025AFD616127A5C785915
FF34488E0C7F6E38D8AE7F598C94F465F32A35DD0ED2A3DA0260E4FD1C14427D
684ACDE33C5FCC944809E77F7769C2278833F6D827773E3C98555923C9084E24
E91726C00E1B57738D773BCA38436A83FBAB05CA980FFF36C0515161C96261F5
B3E615598C9858BAB5F8ACE87AA3FC676CC17FF7F5FCAC6E44F75BF962F72928
B697E3203C7DF7A09C5B749C4AA265D8AFE1B9EDF01E904104C3CE39A1469793
E3394DB421D079F3741B29A67A35BFF6BD6200A22F0B2A2F2395459B4ADFA748
E9A5EF3328D9D1A3B3392F4B4FD3161DB5C7FD3A32F5CC6721C9B1E983DDE584
5388E3F7172C33789AB7CC2C91D9F539D8B85E07AF9DFC3EA25B4371B021DCAB
8F85CFEF7294B12A913B689E8FB8A49CFB1248FDE0B428EB0523C3FC57096130
E1682EF8811345E8763A4E6D325130EC17471EFBBCA7E280034898E9559C8BF9
A316109AEA8405D40711FC533C844B60858874D01AABC88A4EFAC83A074E5A6F
605C1466064FCEA565386218AE5ED30544BFF84C1737416630E8CFAD1BD8CBB5
3BA93A15B889E09746A2D07F585922258652DFFA77BE6869F9E8FFC08AF6AC2D
D07597ED7F1A3C85FF8CF7A69093CF0843027B88BF771202389583FB7198BFCE
F8D1871F564B57E851B9E9752CD357434CD8C6D801BACF8B538A668E4A73B131
4900F5C124F027628A6B6B2984B018EDDE356B072E6604B87BB22DF418D50B44
D2923AD52FCEB13F798313C279D59D5F15D96BEDA842C9B80710CC19648C1411
C8755925543F3950E8E85482C901AA7D87BAC245916111865675B5E352C999DD
9CED6DD0F234E98B7F9DCF53CA0129EDF3BD708C2561A3DE789F079B5A827496
B974C25778126EDC48392DF87B0508B7B7B0809F298203A5ABF98075DB24B151
E8D4F7D855C4356EBEDF6723FBB1F7F8A7F4CB8B9B708BCE082EABC421C19A24
80B8BEE78C8E1B874197DA0A4EE88675E8E60C372B02B09106C6B660A2404723
A4F899B92F41302E36E67187425B0B6D8EBFB873BA4B0D618D344D27FEA49ACF
E755912BD21A500A85B790B101FC61E63C74B6BF9FBDC0FCCCB770DF454E8479
B5F3C77BD16A43B90485743C964CEA5EDEC5E7D78BF087B19E3D3E29E2F5A803
0AB9B4F361C6A00A94CCAEBD143B5218791DA09A09C77462FC25C08CA40E7905
85F14D7B88BD9610384258E7F53C6070FE93757E77A13A8579556257057F81A5
4D098BA60FC849788D0BF0AB3ADF0223DA6C5472EEF94A4E954D15FBF6172F50
DBB0039C935B0E493B3D3D0157DD0FC54AF1966EC4F702FE8BB1278D2ED247DE
A0B1263625BD39BF446DA53E62124DE79F80D43B9E69C4101B6F984CC86F5F26
8371A58BAC772D5011418C20196F72E412F691A926FF0592CAD5830FABA5ED18
59156FADD1B1DB822644F10F109538B521B03E7FFBAD76CD1AA830CA273210B4
5BC180AF3CE9A090D2FF58BA17CE2DE44D1DF97EBF4856A9AD128458DA72D1C7
AFD707BB9E627932F0F2DCBF634DD5EF29D99F662329A87CC6E904F17E452449
44379FD9EDAC4477D5FED6D8909E2E71CD3E9A8C48D26F6755406FC735285928
58FF018B9790210993E831E30277DE214DD3453F92AD94D0284E6A26435384EA
16FC5E752DE598C51F604E60E17504C0BFE8F80010F11416E6BCF5271D79327C
578CBDF8A2DAA66CA3B83707DB9194607FEA66A05B849E586CED326466D0774D
8EB849189DD4D707DEB94B2C00697F29E003E0E127A322E2374302A2A0D9F8FC
DEDA5FED56E59480B95AE061A911BB685996CE220A8F100F55940893BE313522
78B57CF6E7BD2E89333A5720BDC2EA72495C92D567CD098628C4EB48D924CA26
5CDD0DECB8DD404FF6D27562CA6E67C26255D792C0874F7717C844D34561BCE2
67432DDD976902C2CD37D25492E2963E780E62A916DC42FE33E7D4FC4433D011
C3A0004F858F99A4D1EAFAA1B3DF2D91D519E601FAC42C8603A57131B8874AEA
5542C6602BBEB29384FF16B1B0B8C3A1D7BE0E558731FE0D991C8F2363BE44CC
05D67AEE41B5A1579DF93547C2140C055D044D11408365CBC05339AFE7D8E521
B2B33E12D4FDAEB0748EE252D824495D0F1823C8EF703994C441689133F7EDBA
AB212FD34E36AC18C7035EE6D6846735EDB5CCE54F167F89535072E1BA3B2337
983A354B6B81C3E7AE4BBE578666D436D0EE851E055D5F6F84563B0D31C3570D
595C3963F08BCAC97E11ED234B16916E28A58257E2ACA1589A2C23FC6F60423C
ECF2C69FCD3FDB6FCEC7AFAEB7CD8003A636735A339BC0C74F8DE83B41C47196
709DD166B595D6E8CAD4CB6512CDAC17A687C069CDC36462008D8015EB46C222
0C257E56E4A1FAFE63546B85A85E940AEB0BB2F32A71825A5C2BA2AF82827A38
452E1ACE01E509650E9CDFFD63D95FC2894F22FBC3FE40FB02DA8E248CCE1E3E
6B4D8C190917FB9F6702E0832E8F6796493A9DBBF4D30F8958D281727B3D9DD7
5B962BD1512B401271981C72484B7D8A6F8B08770198C9E870016AACB9E36A46
C7AC7F0057A6F992AB12E18F4E7970C3379F6B0ABE4F9D51F88C9264CEB9BD23
15624BCB6C42A65A54397FC34FFE74548602F16EB55E959F46196A9920E2B395
0FC2E643810E56D9B207879E0B86637F47D6B94DD7D678F29B3626CFC6F583DB
D24F5552EF705FDA3E1BF030E67C7B2306F129E7135B187D472B1EC1AC8C1488
1AA422DB1560EC762F97A20EEBD388237D227BAD28A0FD57F8476CF3103C4FF8
D1FE315297C643F7BF59267147243D714E2EAFB348EC7A986EE2558B4E33BFCA
4A81DE6E013123588BDE5D45A47C26864E68775E18259BB595A025A18425026D
68120B86EE06CE0394CFA5C17EFE9E2662B374E1DC345AAC983B6344BD6ACCC0
4FB0D95BE8B0EA1565E35E482A68C86441D7E149F70E2A2810E922DA21764155
AB4BEDA85E0321533CFD004B4F0685152D8D1492E286970E19705BA766A8A60F
AD376919009B5C4221DFFB908097D530EE7C8DC0EB9B8AF1C45FFD2C3B6FB6AB
63B42946E2DF90F2080B8092922FFFFDB0C876B12D0FB076505D76002D03C1AD
C719829D5DD61302C80DD013784A57F820C1105B36A84121D13082942B1302FD
3BAD763BED9262329774D3D7B44D974DB5ABE0C52CC2AC6E8EC1315C063E0E68
9D0F69C76E513B599AA51D06949CD95C6F2D0673D4444EF91AACC9216474490F
258D3740056852E96949044FAC69653F9B284D62E58C4C9511AA182500111304
776A715DE0C28FA261C172F5897CCEE8F4E54E93B4E94D679AAD503E7BA6F553
48B7A4F2283C4846DEE4E32B6250AA1A270F2570B9D8AF9C63A46AA36FBEB0BE
A99B9BB3ACB812A928484403AD0E2B35A6D5F49FF530E9B2BD075FDF1244B4C7
D069FE1186DFA543403F7D5E41B943B5D9B06360BA45CB5A5C938CF61A1FEC28
13591744B7ECB4E0CAC38415444D391AC53334A8A44F90BD73E742C673B4F422
24E257BA0403DCF7A3DE2FAAAF4F78C32F430AD5976978E32432F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 106 /j put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E1B8958E2220FA1C68EF82D
01A2B3516F320EE84950A6A54963ECD6F606EB5693F6A0BC74CE2B5AEF26AFE6
7BF5D5357C3D53CFF50F60599F2165B6E742A331B47F46D977FC721867EC9CE3
7E9BFA2149C9E3A47AF0D0EDBF29C1E6D92BFBBEB52F816EFDBA9CFF83AC072C
5FD264F8F24CD5A1C0F68399FF4B29FD77C4A54D829652341647535D2F802992
C923A55E824DD82F3B77F62269A7D1CDF0A23F22A727A6A32D5E347A3AB944E7
D1904E054C09026DD933D1EAF9B88AD6A9CC29051D81FECF9E671CF05F68AE02
AFC9DDC32524511A6FBCCC3C51619F8E444031755BCE323C69B69726F9EE9F40
392A7C30DE550D4378A9D119A721811C4BDFDD2D6C0D6F7017BC19232CE38531
016635051EFC357B981B164D6A8AA5F8553EC6B53E54083B2622CFE003FA1EB6
570CB35CCF1B368ABCE3FBBE1A324F2EED878EAE815912F5487909EFA1C3243A
3BF348DF4FDBAF169F2D0660FDD17EFFEC458FAE9278A238BFA890A12D333245
9435A1D116CEC665B4AE5E87629A915D960558EE43CB32B207F265B0BDC5EEF7
38A18E7B92FC0E43BD2C663904AE8ECA2CF63A635DEA4D63263ABEDEE3A0742C
622A816464D2A2536E88C940A17F9367C2CF536133D8B1D114BDBC421506FF2E
EE6D9732014BB9A880DD2CDBCEDC409C503EAB483BCC3C0D2B0228023D6C61B5
130DC8EE6C400E0079B4468EBAE33A3CFA46C605B27A09A8DCF4BAE541403408
D23ED4ADBC7E992F95AE424E1236E3DB1A73C3725C81B6F45176C3B0106FFCFA
3EAEC9335413580ABECA40B74A1CCE3624848DA9D6A3D03B3EB5D927B6CA4EB5
DC2297554D4D5B7D8574368000F1CC0C3F7C12590D6CFB523C7822D416D288E4
439BF942BC019FDEC87081C1442F90342BCB0672ED5AF1AF2459664ACE7FF5A3
4AE0BEB988B573187297EE4CC69941DFA74898762CCF66A1F4B85C04D8BBB173
30DEFD283FB27463A39A8B92F5986B6E257621AAED3582D35C4BDDA4843ABFD2
77E2B04C2B7C4E2FD77007EE0D5E7DBC658F61A56DF3DCA80652F6709A798A58
9C08C954E6DFC8A67EA5D00C2CD177DB61CF0D049628802296604CF596DDB4AC
8A071C6CABEB382A0D4FA074A64FF0AE1700A988A480E15F0152F3EB6C296A94
F40957F75D509AD7A699738CCA3BB0FAF87CD9A78CAC6C3665EEF4F41CC922D9
F27FC0995B1686C5DCB258951831CF6AFCB6EC7756E38820D03E85CE6AD6AAA3
544FCDA0FB313C1849A84A4F71BD8C6D1C094269B16464344BEC8951FEF7BA66
FF2DA0AA3FAAABB6C688F7147D2B45E253E989715ABD8F83CCFCE597BC143659
1941AC907DF4379BD0F09E42C5385892A037FC03659A41D698444AC63B9109A6
0CDE53D874B70065DB1344BB3F39E880F7F872B800A26C2BA93054D780B419D9
D75FD81063D4A0BF59EA1A1CAF1987EBAE6C652ABC481AC8EF1EC4DFC8C21DF3
D6501CF42B16AC288045017C73DA66542D1E341759386A5137B95D48360EB90C
74716B8A01DDBC584A0EA540919EA4690ECF1220CD92A963734149B6F44F286B
D53B8D38F2A554CC2B04BFECD4DCC358DBF10661BEF61A1FF43C428F77684623
15E2F3E9C6D7CB866F13943DA26C9EE4F7D9CE1B5BC113E405EF872551B627B9
3AC02929DB1C5AACD46CD3CBEC0C78628F4490EFCFF7C8C2D2702217C7A8DD9D
655DA6E03EB1D3932A38817B6114F0A0AF528BFB5780D2166FF1251AF60723F4
358E92BACE7D05BF3F5244C1F825AF95122C1EC7D5448AF33B13D0306B8A4183
101F73E80813FB13CD186F2041D22536B8D06379140242EB6546DFBB6DE8B6EF
522F71F288082319DA383D3258BADB84FAD3162DC825AF86565C7FD730FD30C6
C55C13E58383B6A269D928DD551EF895FAC7EA23E1F693010A6C48065C1FBEAE
905D0FD9EB6AFF3DB190C1D6F2FD385ADFD151844653AE20AF70194D0EADEBB7
2FE2BB566F065C76AB8276A839C2967A4B7692D36EF50D0B109DA91D77E813CA
6046AF45968F4316AB110957AF9005A7FE6891A977B9DE5BB24AECA977DB3ABA
1AA1D22F9905821C6DEA5C0A9DA1FAB68782ADD8C439D4D23A19C335E0A8426E
46344D8A95476C3B7BB5C77164C2FC683285F98CFD1C7181643112BEBBF41A1A
8A98852928F7CD0632CE627808F50824E8693BAD253D78864861F66FAF6E8DD3
3B0246F8A91F581F43D576692E93A2BDE841C1F62770EFD61A851DB9C9A56B3E
1149E4AA1EFA2A67029B1E3064C1827D925854CE0DDFFAB07AD429BC83B62B0F
53B70C13EA94601BB55E51154007E243F22D01C67553045811B367497A3891DA
CB038623083353568DF861
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.0: CMSY6 003.002
%%Title: CMSY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY6 known{/CMSY6 findfont dup/UniqueID known{dup
/UniqueID get 5096647 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY6 def
/FontBBox {-4 -948 1329 786 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY6.) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
dup 6 /plusminus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D6AE353EAB9DBA0D
4335868937E3A2D0F9C8A4FBEAE138AE56EF84665582DDEF7B546714518D224A
F91D19409EC600924626D79F58E272E3657E631C06412F9D42732B6AE0A93D81
E2B13A81C76CC37FCA6DB35A1C6A572EFFEC7E1581C57B1D22EAE9C407771F40
71D002A06A6AC249FCB7605C902A76EB298B05E39D543A63332A91B8A1ACE05B
F902540FEC1024680B8D5857E4931D00781747C87ADCC45430B5462EA480BE50
D07C5C9EA0D8D6447324434CF0D637BB13037B6E1C48F191C52CF2B9511690B5
405280D5C825BD376EF12429837CD44BEA223DC8E199D8F85856C0FD551471CA
B30481FAE99B71FAA56B639F549F449F2CA6F5450AADEAD4C09595A7A8530D12
B23E012978225E112D23BD1D48DB097994A9D5EC707216D2BF5DF8B69E66ADBF
DBDA4737737F51EB7A38A4207BB46456A8117067748659D654B1D14849F14920
E57462ECFF602A181700A346C1E95131C6F1C66132915FFD999FD4105AFFE7D6
7DA46DFCC4FE53265B14D7326F5A44A3E97902CCB106AE99ED6434AA9EEE7E6F
60B8034EF80DF885FC63DFACB0AD1C00BE56F79B1AD41B065C59A35073B450F3
7E6BC7B90C9D9337F9636943ED701398E6886947E126F1E12D74C5E4B5CF06EA
E60F9B121B9B15E6752B127CCB9C26017A84BE6DD918AFE46DBF27BC06E66AD9
830BF2D6CA9E24A0199DD3E732405F3210C97C9BD21545B5E4DC10E17C1A2C71
851ED2B272055831A6F95864137C218E555B054BE3616820FE671E5BC08E7A48
D683ACDB91E05F469C0C8919D71027E179F4911E878F8D13F999C63C4EC2C21D
ADE1A11979B539C4C5746AA157A4EB4A7A153BC5D966197A7FF6A2DA3FDB161A
EF43C2D906C617868617E72163D5B0BC29C36A60867C120A02E08264231FD46C
1D3B62622A05129188D818E2AE83FB2770DF1D466CA38A49D15F9056BB7AB8BF
D7DEB2E3B3A8157B59D138787B21CE3B3A456E230CFEC1374AC66B7DBBE788FD
5182DA23264093CEF60D5BB0073AEDB68A61ECF1C69669244A1FA0CBA44DB83F
352AEE6012082B8A3FD62F4497B1BE0E4FF77FF94BF221212D63BC1E35B9758F
2D7F8FA002751DC0380AB954331E9AABA6C122F8F3D7E69CE8A6B359184F0531
6B158ACF34C64C32F4671D430820B36C9A9397E9C877D734B17C3BBD8A88CE2B
9F96D7AC5B8D55415E942D6C05392D03DAE53449F8FBE2225C91F228704BE9A1
ECC568FB2E90C73F2F7AFA62859C35F0FB26756DE719BEA5A3EB81A6481507F1
813CD1680EBFCF612FD9D3AA4B90688521446FABD5C54CAFE7B879F24B54449D
2B30738B137B5E212B34BC5384BC2216A5D13F761D6E13A043DB2AABC0276705
5C80CA394A8179D60DCA4651CE8B0A477165FF48A31BEC6B7C0852C9D72E11BE
FEC5E4B984DFDE90218C105999E070FC83F1716D13389B5EEAE3F26C82FE9A7D
3C67A98027D15DAD791348A21DD922C71145D287C7EA83B225377744BBB0082C
22FD44E1B0DF60956DB9C4790F4E2F81C477DD4CA9F4BBB4287914EBBB4F6E36
976C9E573496A2311E5C7677FBC4BB755B8BF925F291DE0442FBB8921402A487
ECF23EC556C3FD66158727B10B74C778FA91EC16629F6E949624D265FA6FDF1F
772E965A2C30C80AEEDC4A1867AE3D6D116BCE0F96D1A0C5138F294CC7C2AD72
8BE152B314E26422FA2DDDFA89A054CEFC6607D932FACB035FC9FD9959C4A468
CAC0F4DD41DFB83297EFFE36C352CA0A6B1485BF8433522BBBCCF9C73FB7334D
1CFC92348F91C4D0EAD90B22BAC6B27D21CDF5AE65C056BDE3B30424F76C8EFE
D7CDBC854B13EAEE0485CC348AC52F5345B7545B4FFC60B6E7CEF8D32354B233
8DF503A03F5201EC012AA67157F4A47B902D269A060A5B8E10A37CA7CAAFD417
1A13EED9533BD4A6E8845D7D236CB254D40930C273EA4372E0B13912B2CE9261
275D51D202D461FD69AE352E95F72D61683267D4951BB602A0BACEAFF9516F3A
C30EFFF3ACC08AD374A730287B148FE8E168089D239E1084E0F7D83CB9815031
5428874FA4640E1C216514AA16C74BD2B9A95EFD7B6B0C575A5D5B3AD1086CE7
E8EEE33490CDCF2E3FBAEDC984FE53D033987580E75E74E455E44496E186349A
DE4B5125F69BF79936565986B3D91E6A25CE6E1C4527FE22580A39805A91BF6B
90EFC8AD31FBA71FCC90EA04875B5A7ED05BA2FFD1C04774E1ECE84B4105ABBA
798C339FB61ABF75C6FD3F24BC775A7FDBDD87BACCB9A86B4D928917CA62C0B8
56343CAE0051A1172E7F234001A5FAA947CAF382FBF23E57F1144425713423E4
4FC1AE1D096D10D6FECAA6A9186B0D519F51D06CC976A65A37E9219492E6218A
FE9F99700C0D0D18BC48632268DA0F0CC24BE660E30645E7F63B0AD49CCA26EA
CEDE4DED685DBD38F5C4BB6AD6CDFEBED1B14A456C27C448C91CBF6337FB3632
7B9A565874F9849FC5E22C5A0437AF29E2B7FA405CF6B7AFEF66AE7449E89746
66ED2D4C15A36C45C0F64E6F185B808FC788984C230B4BA63204B38C309F2DE2
2937A92C184077F5252C9D6171EC6378273C32B61CF65E4DC124B321A4049294
BB6CDD064D4E07605DA5FFB7B3B0A55A09D26C8624F03D8C197885BFF0A20B77
257637447F628A4A642F6F92019F9ECA5B2DBCEDA63C05E5258C9DF131EDD1B2
B4B04E7A5441035163BC2769B79C89ECFDF071E3517C59A45C9E97800724E1F5
FDF504E2798FA9074A37B210B1C24DCC0B78263E2297ECA31D5C258BDD92D2DD
8C53DD3B3BC3835E5AF52311EF0AACD6DCD159C45743B1AE7EE5A0111DCC9193
441FB81F945D219DFF26BF50D80606DD3392CE941242CBAEA45077FBE6AD78E3
0DF4FA54CC33CAC27A337FF307F14E60D1FA48FB8368E307441D6811676CFD38
094A558CBF0B92503014BB169E345C27C74543CDA9E8134F85AA0DCE45EAF612
1AB1D86FFB5E13CBDE8E0F68B19E30D0D9F5F0A3EF2A84AEE4D7F1F63A045297
3F5C3080F313B32066E0C209C2708636C33A6531F1A483F3AFDFEA62305EF41E
C55594660133146B24184070B87C22EE5B80D66C409076D733245FD100E936D4
E844D8A15CF45C0CD6AB04F3B5FCB0BC7B1517BAF21CED4D6CCC3F19D21BABC5
FFA9768D77A41BC3F5C4595D868F2FCA88D6E41558FA5A70FB562E4EB22651A3
886F0ED1B46BFFF297A28ED67BAA28A1302BC866AA7A73418BADE0870872CE0A
305A5E46BE0CF6B5794539B8509F1E2DB4E40124D72201589BC4B55ABA2F5C40
E167175C7F7378203C949B8967E8CCC40F44A2D1D555A4273733874265542C0A
3C47FF7144C4DB276320150FD5CF453A505BD3BC1E98738A1CBE175574037D47
8EF9F80622F57DF4DAB8FB13004ED1DBBFB4664F8D7ADCCBD529B22235740EB1
216799B2D8CEC7CC4D16D8273B6AEEA427D480AA6E3C463F46763864856713DB
05307CE674714CAC8351410627B8D1087155F3788E744158F3428A767CDC9769
CFBE28A30D635D7C4FC44E43E7F13128A867389FD66CFAE939AE2745055BE71A
AA7A7817E24D38773771C77328F4A755C872AA977C062A3BF7EBCD6DEBC7746E
70346293A661684D3988A5D0B29860E6789FA8911E0C0749ADCB9A6B053B0E31
3D490B9A2982CFC167001648FDF96D040BEFDB75A4EB90E2974927BF38F10E78
17FFB9DF2A65CF56C1F63544662CEA0E88A5141F990DF6B5DA79CEB5B4744083
C4697EB37422BF120332AB934D292CE8A3624E2C8FE6862C2211254558459BAB
D8F1D8C76C604098701163703FAED0BB298396C86A0427106C007A7CDBB0AC8E
35F39B240F8D9D43C1BCECAB622C02E721A323383973B61DB81115E3552E4260
9F252F18E01C1EA2B0A1DED4BA50A5822D10AC7ABD664C460A4022BA910804E2
2094A3AE0F2AE375FB22CBD35CE9C2542C240A79BC6A79F1135E58985837E1CC
1E5D6666BC5D61FE6EF590316F9D1E80C42B9A7B6106D8B7F575447AACBB2660
2C96D7F024FFE3292611E82CFE62D95646B92CEF6F03EEFCB3F6950A22B0997E
52C38B55B77C2EE7A4D047F27ADEC6BF0BC639589FD0D1E0A47C948AB5BADA43
9846CBB5B1CE53E96622B59133303AA0F559A481E50382A2A38C98C1A56D9AD1
1668FDDBB1FE8068DCE68E5DA13C2D9918D1FEC7F69A6DDD3A29E31A57B7BDDA
EAC616202162DCC7B9DC52AF821A9C1D2D7F860A2F294904A55499432C7098CA
BF79B1B0A1527B99A4C57673AF54297BA822AF200FFBDEC475158AD6ECB55F87
555012ACFBDD0EA527CB5793CA7CACE2FD956F30D7A8AC7F6A98979BE4BD744F
BB84A87668E3DE62A814B92D3139981200D5ADA86C5D733CF5107DF6CB5C999F
F6F63ABEBC9694F0F67EC632BA8C58E715D92FD6BDD056F29753BCC3E54B0A7E
63EC33F7A29740EF0D8351B5897B126FB6C33E9A33CC83DAB91691690B8B9598
FD3F397FAD45555CF5FB9CD80879A0CAC1CD8E8D536F05134B21FA4065452DE4
BC8F63C82A3C34A01D00F4BB254F2AD7F6171EFFF6D7BE1213C9456AB383C568
BEC17694C545B98E8AD734D0522FEC92EB3182DDDAC54740AD352E7645D08B4D
CB4DA9B381D36C920C77869619855B4CF730E590B0405CD25884D6DB4D49F1E3
D79EC4D0489514359CABED492BD751104091A661A510F268EC681F818780F304
D960A15E583F354DD574767B860C57CC9CCA991E710576C626EA909C6677057A
C409AEE846B4D5C0535F849F33470FA395CCF5C05CBB9A1FB62CF656F7A2AA42
34730F786153A9856C337112F6A555A70EFA76404E2B88DA2DB91E8A2BC5A05C
CC339DCA364A87738B60497CB790EF16875CBC506695DC7D70C6ACCDB2A00555
3877A013482D55281C83BB630CB3EFB0657E5490176CF23420B97265B22B4CFE
1DF9E0B294F064F5160540EF3A452641C82E347A96514E4063A7FF16832736A8
6F21F6881E269CA09FB66DF37CAE7FF46D6B9AE42B6396EBF9A7A06453A81EBD
808B047421B0F88F62B3FF217542FBDA872D03A476FBC7C0D658C03AF70ABB40
03F1A3027E0FE186A22AD461835877ECF843C0E8B8340306092FBC5E91783A48
E010EBD29F114BC273BDC53D2C94275F8956A74561813AA6C2D896CB3F6E13E3
30F6C230C00917A40EC6F4689B65BEE32F5722BB1D1147585AB3B3D2D5EB8273
CBE30D1C6CA1BCC4BEA9B87A014E7ED3CE53D13ACC8D426267CD3BFB8497E1DC
C51CEB14F9CFB4D4BC9D6EA5A49DC3871DE59C89F855F079299F45D363F78634
493829329E3F370D117DEAA18E7A6989C515667C2229779B9A5494DF0B4109E7
71D79D379FA7B408A4675FA3DE17ED0ED632F9A443527CDA8E960411AD4070EE
173ABBFAF9101BE92BE59707F98419503A85AC58B949E8595D66D7B13B8FD4EF
11B28FCB5955C5F147BD7FA141AE0CA2ABCB1CAF82FE22D3281852205087CF45
549F4D5B47F52AF50E8F6FA0AEC0F95FD0B1EBDCF965BC8A924CE0F4598AC546
C15CEE4EDE7E6DD0E5FEC3A531B944CEA406DBEE21C4CF3384A79D0D5CD51BD8
AA5B8B1FC987AEB57E86D3C6FDFADF998A6D6043449FA5B88BB2DCBF2945A513
AD7ECD01B39BE46A577437E1774C3FEA176287C51ACCA15909E987B5AC2CA664
709AA5605EA89A8DCE6B4014CFA781E822E8B05F377BD0187D5EAA0585A98E2D
6726C471578295D824D1FBFE89F04A67F1A360D799CDF92C1218F29C24DE22CB
C6B625D044404C22C89C433715BD77D0BF171030BA84E292B7A81E2FD99D4E67
BA702C2EFA11D4461D833E74E97C9E295C6D170DB6BD73D615D03E678B0296C0
F8BF99321767684127625942B4C3241BD0608460C81D97FA658BC179917B5065
74A4D1F729CEB1D51C82F9C90F0C712917AC482D413ED7CAAFD545508652DACC
1A03842E354F734C5FCEC8C7BEA4C69B066DBC83BFAA473D0A632DA2CEDF20B7
6C7C83B4AE2AF7E05AA2C081BB6870AE38848F3870DD62C7D56EF1CCDD4BA3B0
32C61ABE629BBC464BBAB06AA0202772C16D82427ABAB4830ACEA267B0109A81
BA5D832731D1E9C9F0552BEF7A9B7AAA73760C6A09B910009BA9D93F1A56298B
A43A32D43CAA3988643DE373FF47C176CE92D7931601F0034E6CC303876498AC
026BB32D2F656A3541815697CBA2B6D527B69816161B2E13171E073D7CD85435
3D32708391F63D592B71D98805CD19978C2BAF780CB124372EEA0A3DAB537683
DC74F9E9EF98843F170FB086AEFD526CB81A7CC88046C52E1E56EB40F6F5C75A
FE9D5ADE49E82078858072F68BCD02487EBAF4E3F7F309628C1FDCD4B01F7D00
E1AE0A7CD3455953FFC77EEDCC5B5ECB1FA583064EC17132A3C12C0153C4B87D
AA57FF73AD33C22C81C545F0593DC7EF438FF7A5F76A04E52848E00CF2C8CB06
F295B1CD3BDB1D9E4EDD765D3753EA8DB76DAACAD75CEAC866FC4CA41501200F
F12998E8DA573786AA9A7232287A6D19A12536026BA4423EF0B6D81D38BDCD9D
2BEF15BCF32824F8EE802B461F52BD926A5BEB2E6CB31AF83E98E849D4339FFF
95419941B12D2F3B76CCD34D6B78B91BDFA5DB4D4879501DF3E514A5EA8F1713
E96330C5B4F1B7BA42D42F05E229FC303AE00E954A81F9BD43016F5930A0C490
6C753157E4355F6ED3C5D1963779EB27402522B5E9D459206B3A06E594DF198B
785F96B96E13045594EB42EF4A8BFE0DFCB4C5A2DA9594431FBE72A5AE18991A
36FEB5FD9E8B238B3A095939B6ECAF5644BCE7DFFD8EA3E723F66B305F142B71
B26F34E0538E4B58C4B5984883C6B08F3D1F596B56578FFB0EDFFE3F95E3B6AB
63CEFA183A5A49F07F0F7559994F56D7305139D06AC8DF9466E715D90AECB1E2
C35E3CD3F387579B3C9CA6F5BD741A7A5D7B63FC0130AF374124DC8C6AFA4FAC
E40BD5923FE889E87126FB22C1AC4FFBD351F884D70803BBE1BD0D40D3CDA0DA
F6984C373D3174358BC41C8DD4A215283ECCBC24F345FE65E316F24940198A6C
3B5483129706AEB60D6C0CCE0DF9C130593475C72A92662A323EA5B689E5AD0F
C949536875C37AA2517281A36A1C1D5650AC96E0CC00C03266E279B54232A1E6
E6697196A4270E1DC794D8DBDF0690372AE19121B85FFD357E965228C66BBE6B
D2E55533F7A1BF30B2EABBAC98CE35C619556CF9F0A522E8EFE4BE3EC61FDFE4
E364608963C928AA8B302B1636DE15C83711C8FA060C5BBB1BCB8E02215A4F4D
560DBC4A235F6F07EFD20ABAFEDE0795AA3932556D6AE3F6EB8FD0C1C509FAA2
55CCC2703661C9F48233B429F020E01C1F3B8090D331C3B925DD5D1CF9D19F95
6B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1F4DE0D0253
87641AA4A1113755D0DDA6EE4234CD9AF550DF63A46FC6F698E623BBF6F05278
858904B415033C1A33B7770D99247815E2A8F1216EB42EF9742EEB4E1D90EC3E
F2C0661DFDD996CE1FD66F946B9D4FFADF86861CF8EDCD570CB400D181697747
83F38B92B1803874C24AF99C66E5F966B0E72B725FFBC6172341596D8AE51C3C
4676A65E4D32F499FB1ED170554DA7AFD79DE5953988516A8B2B123FA207BC49
D80645DFB16A79549BD5E41606D80424DBFD6F5BA1DF0EC271C596EBB4FD0B84
DC5EEC45C3FF598241368442A3FB06B460C7D46678069011FFAA3072402D4DD2
3DA6139A548FA99A68AC61134087071ED8B4A37A0A8A1A3B48A2A8CCAA351D75
1828BA7DD5B7758A43F98F4D449ECB58B20B26C40B35AC82623961CD892B5DE3
777908625E1A91DDE62DEBB2EE5EA3CAD7E089F421DF613D976660D547CCB02B
3C6A727CAA1107C976C63F1775AF554AC9D6E72C27E58EB91C766DE3C9B18C70
02F76150373FA95630C23C92C3B6C925388988408791753AA23161F2CF0CD44F
934E3CD426A8A81D716EF220D70D2BA19D0ECB521503EEC0DEB24F72AA850A8D
77DBFFB11716E43EEB769687DD62EEBDD103E5BAB7D6339C498E11403B2FCEFE
8359AB475B9D30634B4B17FABC1FD9DB8FACA1B59982A8A3B1E8DF5D3353B5F7
55C1EDDB7D596D1C402F6A84BADF53D471D5BB4355CFA0E7A929A58AF9F079F9
41C0B50A3AA4CDCA7295FC2C7968A3428E23C95B7E7259A3C1784CD952B889EC
8795ED2D3BB7672A24748FE8D81A6C443DFBDE5732BC857EB9A69C73586C4C09
C73A8DDE73DFBCEE9E3508D57A95C197A14F600AED8F452FEC6AE6E020B8AE15
68D0CFC5342EE6361F0135235582D8A6B0223A63BA100BB2573FE7AAACC12951
8CC1614DBA2EF6E3F55DCBE1B27D1B3BFC7E7BB0575FCA40A61222C4B6E0777A
7764739C165DD4CD4DF1DE7951E7B824DE9125BDC60C76C7BE3238828992FDEB
916B8C462746B3B2533B6F4812EC952F755CBBB04A1E702F706BEEF9FE5314C7
839C8FEFDFE46F6882EFE9CD0093EF6BE6476F47F9E412799275D44AD42E6B84
B6102D01244C8B3FCC40C977D2653855669B719402EF96FF8175537BD1ABC0DC
CF621011605659AAC460ADD8B1F2AEEADE23EFC52E6B85011CC3E5DC1D13C1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /bracketlefttp put
dup 51 /bracketrighttp put
dup 52 /bracketleftbt put
dup 53 /bracketrightbt put
dup 54 /bracketleftex put
dup 55 /bracketrightex put
dup 72 /contintegraltext put
dup 82 /integraltext put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A203777646037E6F7A3E022256F9B8F5E03218E29844B
569EAB78FAA8BAC908BF54E6CB74F2D623721D38E3F6E5E1FDCBAB8F1CF96712
159D4E51D603DF25B27B0B383BD0AAAC886EC6B9E88EEF2F14524F41BB0411F6
4D448641380A096303493D3AC7E24AEBCFD27811DD1BDACB1A0C0E1BDD0190AE
B798B8DEAD9C354D1ACFA95F85FF17C6F616E761C946A648F86773E5929E1BB1
D4C4A070B9F1CF4487E0A932F4AF6EF4AF6A4644A4AB3663E5379D21E8CCF339
0A5561C5306A2987288D21629A0561D31469DB5C2615112CEB29EEFFA671419C
CA19F581FE5C1941169D35E59334F5BF921A7F042B0FF26790768C549A74A8C1
75EE8ED2D6B5FA8DAFA78DABB6F9DA50E9BACAEFEC61BC03C7E59E0F4CBB1062
13CD6BADE9A599C65D311831D91E9026D0D86693EDB6921568A9A1477C5A68D4
623A39BE33AE96F555FC39583A1AF2A85A5C8ECC4E47BFA4B0C95CDBA65752BC
05F699FCC10595618B9132AC86C30EF5C474ED5D1868A9100515BB29A0080E0A
793C15C162F73430BE742200FA70CCE594EC025A7A024C46B6E76C8C4942512E
1758D1786AD39AE19D0E3C8149FF536DD40E1D00577C7252597428A4C56EE834
CB1B932833E3D4F988B326B287A4B12B3C6B620335B96A9AF585A5FB99262F26
2C2BB49FF364F472C5A1A8A411A59733C70B419975F0A85996BFDFEAF3CF8E4E
06AFEB121BDC49E47BE41D4B686B84C8AA9663F57EE28341E19D069094765B83
6B063E0DC0599DED7847510FC61C5BCD2BE90A92E2F1DBDDCE4C88044BB2B03A
DBDF91DE28524AB374C5F8EBB22AA6D560C462ED488F3DAD4B95C4BF1B125FD1
A98310272B60FFDF4B8A791BA7B9AE172A0FC607046A25EA4AE4280AB59892C9
7C8234BE3CF48284BBC2B2A133E97B46D91F2A2FC558E74F69775D9DD932D6CC
B6FE6EAB037AE275A5192132BFF39123FAA224120860C973453CA30EA0727109
F7C9C2D67F35267BFF78310EDFFA3449BF5E20CBF93B86BC14893060B78885BB
5C886EBA5947FD9523055951CEC51CFAEC9F568B018592D1F411FD18A2918A1C
E408A424785C495F55644BE457B28401016A8F960A3BB7D3E3A998108DAAA2AD
72A91997DC10A1AD6461D913E36F80442E91D746667E527E1DA0BCDAFB64798E
D1EACD6D6C353C47159767302C0CF2942207DEBD5F35996BC897937DE6C60855
96CAC718744F24C8BA1F3FDBB2CB65745A9D49AE5054849B127537F5BC1916CA
EE3A379F9772573AB57F7117379F0B2175D3940F38CAFD58D6451F5E7C8BC85F
BA4E4E99A881035B8A4E67565FCE3934DB607681B7D17231AB4CC9014C5A7FB6
5A89AD6CD3AD613E0D3B2919ED32A98F5A94BEFE99692C1191F2F6D42D5D1E5F
F79ACC5BCBB6720BD920C7F3CAF5D8FF4B1314D8711000B8197E57E3DD6EC7D7
14B6D2BB8AE4A9E77FC52D8C47AFBA1F5CB5AFB606E6993083BD81BC93E33606
298255ECA404CE8934B01654C616431B140EDF40DC3837C1BADC9D1C0460C59F
2F37763DD201327D02D9051B9AEFE1C74F30B111D8A8F17F7F4C36EF7A4EB23B
031BEDC9A1133B5D6ECC930E4228E34CAFF18C90A553A0E31650777E41FB5B15
313599BD1E6EE524CF974E4A40278579EB4F20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 58 /colon put
dup 67 /C put
dup 70 /F put
dup 73 /I put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEB724B0AF63F7CAE541F6D0929A26F94B4
70854622B3743ACA2E94BFD25A4D7BD9FE7580E9094A930EC978E64AA9725A01
5C1E8C504BDD0FCB48B94AFDF44233DEBC5D6A1CE77D45129A5F665DC0516F55
9CF0359955E433247B041E055F354CC31DB36E775FC8649ECB0937AF774CD6E6
2DF9D7F1EAA6C9EB48FA39D0B1B9645A3C1F26C66534A88DD2DD5C6B30605E94
3F892597CB6172D53D05774529B50ADA66B10A8B41A3B8E7C714B6B4E693A1D1
58EDE6F6B54FCF287F791041F07884FA437A30B9AA6CD04A3F86BE99475CDD2E
A06ACC76A99D5E8EF4CA0741BBE9B037B6EA815C3D70DAC34AC084B43221EE6A
2AC98D76EB90FD07A2994748A3C7C8B8AE948FC6212DD2CE8D723DEAB785CF0E
1806D7B4826841779FD556341061CA3F2BE8EFA332637AEC878C29D0539BD64C
FC759E582364830BB77F218FB837E7B79579BA57A01541463FEF58020562A57F
0E4F5DB216F5B7EAE3FBE028D514C87A680A7A532F0E53AD0E8A69127A85D3D3
7535EB04FDC8F5D9F4C526815BD2B9316D195CFB78B1758D1A87198C5F4E5601
9DD02DDE5A651DA6117D663E34E5A7DE2D3AD36415EE850753A3386FD8C25299
30EF0C243EBBD7617B0874E9A7EFDF4EB630D529610944338E20680DC1F1C80C
BB6EED99633EB68D3D7EA4280488512449D5D23CF6D176944BCD483BF1AAD3FA
B74C2B69537837A2B70DC0908E880CF86E8A78841C25F3AA946FCDB5C0B35D25
F8DFBC0B973C2044B3F056156E7AC6541E2ACF42998192260C706891ED2D8A5A
42889A1E3072B94BA1AD3A9E8FD474F83DC3A126EBEE67B048AD599218849097
9432D679D4BB2B7896B300BEDD40C4E4C3701381040A0E52A2A296B011D7B4E7
660926C38BE8D843DE104331A5D39135CC8D7620FBE67189C32D8598046EF67D
9CC27499F821BC245B3928D33F7DB0985F0A3C2E9D379189360FED33DD9ECEDD
74BFD2C45FD1A30675D11E8F2817E361F92C4FBDC642597373C612E87B273DB6
8A4A83F1390445F0D1C153FC538358DD1EFABC84E666D9439695896C524C909A
11A824C2BA80DD28426CB762BA1573E6C3E6F8F94EB98184D56DEFCA7213FCCF
4706836EB361E9AFEA9FE6933D8F4356196C1202C8C23E6940AD023F9B8D3C9A
53B4B1F5ACB0A7C0CAAF245CFD735E44C9274648B6D218EE5A95CD21181170BB
05CC2CAF62830C2C50EFD34C4EF05F89DAE24CA627F36025A4E08A62AD01EF1B
7E9D687B09372D5EE94D84B5BACAFD53BE91AFE6C0EC4B85A8ABB23EA32CCD52
BB4207013308FBC6B5F61500A82B7A78B66DD733B299DEDAF84924B838AE79C6
E3CB678AD0DD00D59CD7BF69DF34BBBDA04CE3B0ED7D158D1E5546A8B8D708B2
B900F04C56E4A8C8B7BE8A5C27AE952FC90DA22F8A48FD53737090921AD4E526
E94284433930B270C63EEEB83A1F14C83CB43CD00D5017211998AB02723993D7
0BEE6097DE156AE83A4DF334F24AD194A9E90136B1CE770232141A22A82D5D31
17B192FA00B564BA6593028541484A3CB3CD06E450B1367CCC4E89D473139C6B
27C19D65B3BB2B3351882B825B08474173667AB121FCB1644EEBF07A328EF957
C8FD243649D5C0CAE2C44B2C415BEA7BD5BE7C5F9911F6741388AA8A96552E4C
160F533715510FBF60F16752A596C75673C3B6353A0004D9C518E1E689BC6280
E678F6B108E04CCB14B044E4379D0FAF06FF03EFD14FC371035D241AD41FAE4B
3D0EBFE2CA271D5851B8FFA5FEA6B2209FA625C7492FEB4701E7EC15F3DF84C1
7A23C8C3364DAD8ECB47BD585D6948C6B93CD3821F1B1BE1B56E3A6F51801CFF
42FE6B4BC1987FAB1BCF595125912F12A412651AD21712F7A08DBDA6B797B06F
908476EB43F60D5DB0558715CA5D91B363F99E4400A8150736E7C70D3AC58AB2
2F1A068624E074A308829EFF1AEC66DE748ABC4005F9CF03EF47888C851EEDEC
AF0CF9773D9A1C7A80F2C01FE3823DCCFA3E63ADCAA78453EF602B48B88111EE
5C79A76E9A23DDA203D656334D7A3E9F04DEFA0BE8072C0EBCB075044E23D2E0
3D6DF9C02645D7399924330D5035BBC540EEBD08C9748D66FF8EF5DBA57863D2
87B55C070BC7250F889152DB29A99B4DBC189E30D98D5A052F4D53D6124EBFD2
ECC7E6C65CE651F61F30021C37280A52C8D8B289265FD8D019C4D182EEF0A879
549CA69DF46E74BF1D7148436B3B44E97734FE2DE4E93F5E1581310C8DB07D36
0901BF4D8E28EF59F2D856C8F960E84845CAED1E951E4DAEA74E16CF146336BB
1C7673590C9B6DE95C6756DD5D25D068A192C078F279858CC888457766E788FA
0CF9E80381E1920CB72889F791B34F09E5AC07A9C7E57142D2021AFBC81D698E
98DA40F5FAA998DAD4676EA84BE72B3067613C1C42EEB3AE4C6CD7E741D2F667
E5F738397C69714CD26B5846F36C1FD7E477E158973A528AF28F9EC9834A8D9C
9B376D9B539BEDFBE4BF99F37D7F4B6632FF6D53076BCA820F31513270C66D02
3F382C11F437908D8923413B47634BB6D2A1F4E10513E548A1893C75C127369F
803A4FF311DE54ABE828056475519E205047A19687D4DB020936DC1FC1A2A7D4
551E62AEB13D93E8442868FAFE7F1AEFEA2FDD6E298DB5E658286596DFCA537F
45D7914DA171EE0B7C7B67D8C7A3C3051E6F5F0C806A7F79AB16E333EB74F587
E821121CCD32A02AB8E01FFE68E34547E711C9F0CC12E2F48F13943C8B8150FB
2FA728869BA508BF47D9018C075241C5ADA1387512E22C664D73B7E6C9492C2F
C9F53849B352126E99DD7FE462B6951767A48B780779CB9F4966C6E038A136F8
256B7DCCA0D7503A0750027042AE20ADDD2B3791D3E11B88FA8C6A73EA0539CB
FEFF0B69EDB1C02DE323917F5A206046CDABD9D54EA413DE44094250DC17A96E
86F969D738E200331C21B2A4A88A4687934A656C6339E8FA99E9ADC35D21EF89
326F8EF6DB0E54BB0D8F42D4E42B088C4D0CD4ABDFBA02B370DA074A033D3980
332EADAF5574C8485C8BB147B2677DC44DD649CABF3920118E3DA18FCBCBC783
9C0744DD5CE017FCC070EFE54D59CA4B0231B33AA21715C2DB4C43CBE3080F67
CB1AE2F07904D82BA5229E9F8D2388C2EC779F543E10B6E91BB15E9313287370
BD8B6830D477F6E80DEAE0F25ECC0756E993727ACB39C8D5C70F0BD7C1AAE145
43EDD1E08D41269ED78A655718F13DE2756FE91B30682DD9F12208E5062E7351
9482F2B9403BBD58C7D4FC5E171B748D0E32EFC30AC7C036DDA3B3BDF2721951
FCD97D40ACB70C5FA5B9644B9DCD674101B04CBDDA982E97A40E6D156F6A7C8F
D198973C85E1D31B96B022624B35978760B7BB5AB404B1B3C08DC92DC7B63EF9
9CD228A075B2C92CEE0DE90474FBDD8545A1B7B0422238AB08FC266E193CEFA8
96E66F5DA5736A81A26AF94A322C61B7ABDCB6749EC08D9B25CA2C8DE962BF45
57CBFFA7A33FBD1C2FC1D72C0A46792EB1FBEFD69E056BFA9E5EAB5C5FB80931
0C68EAF27FF1F6DBBA281F6474A08B536B62E635F78E1DC8F069AD39FD56C81A
B650BCFEB839C9BD4CA394C114E7CC244189592F2489C7CC749F1A84DEDEB869
7B94CE9FA650753E9092E4C5BE635D685C7D0B5D1DCC7073905D5F48F6F7633D
BC2BDC59A3C959D707581B95A8D83F7A1C232BEA79A963F11C878251438F05B3
EA1F87EEB1DB1976C534D07D2B87A9C7B359FC7844483DB58DCD93139D71EEFD
5152B9555DB01587210552A924D8774C369C8BE4105427D83E6A9F23A452E7A9
EBA367C73531AC2CB48A949F58249CDC9DCEB920214FAC67CA17A3C50EFE7870
9A90C93A3181BA76F74ABA8E01066F989875B0E39A581C9D84E5E6B4FEEF926A
E86BBDFEBFACAAF587E04858978AA6736A1102576A11BCFB0035AFBA4F5FB5E2
FA278C7C48CC3E6739ED59771B1766C834D9A6C07963D2CC71CFC028E5B8B995
E2F69946FCC74D7437EAFBF21370B85DFBCA3510EE99EDA34A11030449EC2797
422B43664122BECDA245795F0B9F63CA14C780C279A8EAC82CFC16EEEFDB3C35
117EA07B5D587AB92F4A78712F4606601A73EC912AC5FEF5B2B40359FADFA821
C6D1E667F758A3F5742B9815ED1BC8D3AC92EE2C2BEE56877B2CE618BB4BFD6A
6BFBEC0F12FD6D6790E60AD6DAA1666196276CD3B17DDF7E2CED97C0A3FF4B58
3F940CB91B46B024297E7B56569C0B000B29F68648D99EE57CFFB2828431FCBE
59534AEB466BF89B1CEE0688E49435B741D0CF8C3C4B853B443716830BD0073F
0222EF7F429AEE94B8C8C7CAB2B935EAB8B40E87282A0415883B0E589EE3A04C
524C7D4DA86A2BCAB94C02CF84D9FBE0FED625D885137CEECC9BBDA28A492580
BC81BBEB318534BD0712FB762D628679EAF2BBF0B30C94F5F89A6A211F471C13
67CD41B458990222AE5619488FF64B95BBD5A95B6779FF0CE7CB64AAFFEAAA11
B551CEF8C41825CCFF93FF6C9746E56517FFCCC38B869B87019C735FCDB78F86
F4DF4B80390B39CF604EEA41A5429493FECE0E01F764EC4EDB1BFEA191FE8B7B
A8A857CD30B2FADE7C4025BCA222875A877209509AE017C72756196C53A79860
C1C2C5C6B2D359E019DE556B4B316B7FCFCC2BC76593408A1A722D957EE1D3D7
F10DE7099B915167ECFDA4E11AAB9578D7B17F79D0BAB02D1DD26AC50551FE05
1DB4B236E518BC7C4950CCF37EE49BE9381E9D1378F2A228255D63DFFA15B43C
7A30C8E2489B2911207DC0F12D8AD66E923791E435E83BDD5B4CCFD2929A6571
FCD5B27FB0BC934B042D49D2B50DAD534D89F7069922DF3E09E837015B593F3D
83F299E93D55750C4E1FFBF1BAC1B1DB7F79D7BD5C3B783F48CC545A5B5824BA
CBD02E66F5F84453F09FDCD0C074893285A7C4777F64934C3F532719364FA25F
BA34B804DBF498E020CD3DBC2A9D562F0C531E2B93DF0EBC05AB0DE0C6E88606
A37D2F98EE7CD37A89A680FA563CF41C6DFD6416275AE8404FBB3846057F8412
F7A719DF88437F3C251211F90B27F22CDF48566D480FCE031AAE0BCBDA4B8FD3
0EBFD845F788AD4A83CEB9A5A17E10C52FDD4917DB67002EA074F1A12DE82949
2BC778349B206B428D456B0E66FD51E334EBDF32C36983D66C5EF5A1B2A02125
5D5E058B49F2CED05ECDFD6D0F393E5549D0C1A6FABFE75429ADA74BBDC8B1BD
DE30A0918510B93820FF765B1E2BA34D3A05D7A8D6AFBCEC1804B8BBACA7C93E
A56F91CBF15A10FB1C7DF91F3A4B14EA5C09FD08D11FFF297E52EFC6AC674D06
C4043A01985BCF3D9493ADCC168FD35F1FDB5CF57BAAE89E77DE7439EAEDE7E7
4FAE774E26FDD12080677F842E118582C25F8D530C24FCFC5A1BB4ED5B9360D4
4BBF118C876CB7D3F774D330106D094E374E315AA75E2DBEFD9157E705BCD55D
CAF71780CF7241EC497A138555C633FFB34870CC7CBD9455239FD36A8C7FE9A6
CB7314848BE940CD26B61D08F3BD2A3682548B07BBB377709AF9BA62214C9617
6A8E8AC7F5608F30A73B2DEB73F8DCF83A5238D538DDDC4D4D95119FEFFCB269
1D8B6CC41C71B3473EC03A751F479B41E3898AD6CA8BA672749217DB6340F8A2
BB39FC87B3608AFB5CA3FFDC25E4D0C91FC67652592233C6DE4D1BAFCA37F680
9E2FECCBBF69BB29E44926F3E5B6CD1A190D37FD95E789396125254AE8404C35
A8DE60D88853E165D407000D1E19B5BD1871C8AF43DA62EC3BD796E511E66CD3
D20000F788DA64DC70906C1037AE1A00B08C97D7E25B9B26105B988FF4B45E6F
996576074A7C16E48D290BF2BF1F831FE0E7451E19590399DA4A95E246046912
0CBEABAB5FB0645EE4B3525A6A54A83A3DDDE9751C61EA7CD73C656A5E9F7BFF
AACC39353D00557774D8F532474D9FE3E19B1FE5A14041922C5881F8FE61064C
DC37D5D409A7C792C2BB12D17E781165BF4F652474FA4292BD624ADEDB81877D
D21DA8AD147CF6BECDF7060F981D5ED03276591844E448DF76C949C8A39AD7B3
C369F0221E37586438083CCA4ADB0F62198CB655F4D200A5E65DAD9EFC30155A
BC28C0AF2BCCFA79761B40EB3DDCD11C1EC3B74515AB7F9180066487B93A2A76
F874BAB1EB35CD9CDBA7FB53C8277AE7618A5915BE4B4083F7FCCCD9DA51D172
5E9346A2DA62BFE1CBA12545EAA0649BBE9B0757FE377211FF06C2FB0A25FA5A
9EA4169950A6AB72809EF6391B04BC71FF7BA67D0627D42D934A7111E936FC77
93C1DFB264FAECC34FC4BE08EE2B9B715B980A9EF152CEB56B5F65C3FE91033B
876001B63F2B5B74506F498C3FCAA6818DCEBB4274CA525EEE706EB3A93F5AD7
02023F0EAFF7F5351311CAE348AE5B6E02AE051CAF726D4402197F018A5FFB16
B2BE7B438E4053F7119A61F472D589D70DCBCD1F58365C906820E54568870449
30CA095A221F2BCB233D339A135D2872E051051F28EF8B73B91901757BD9214D
7B35DFC03C912471E50048B6BA795A88F06662D0A6B752F3F1D50B8D87A6280C
615D6634605FB2DC8090F273F408A4825817C99E2374CC5114234070EC704DE9
93C5E863A20166C3C7BC127743282674A8EF5797446D7627F01D9E12490B988C
8FD03F50A37F757C0C033FEE7B3ACFDC7A1DDBCECFED4453279BC4AAB7E97A8D
E14AD4C78B503D5B9F8CD07273FC0CD9BD3470664DD6592509AA5BFAAC5066D9
62730B209EB0C5FA9E6C1067F528A9062F1A0169E16BB0E823C17A7F07965DCD
28A13A84C0EA98CB65A02405F91D76B565BC0A76A62664C648C8094022479280
4E224100EB14F3B0FF75F3F39982FDDCD0AFE81A92497C59A304058C3321ED58
E61C6D4FEB5FBA57EFA5ADC24B2F076214C7B490169822E88F93E5AA28E634D3
F1CE95D19C7AB424F463EF13AA03826DA56462CC5EF01DA240B70AC497055C72
7B761695C2A4F262A5817F42291ECBEACCDAD8EEE767CDA9F2DACE7DE3C9DCEA
9A5A832ECC7C0E75FA45E7C0806AC25D759A481537FC00D3825230D2F78C8D0B
9092805F16C7A21967B04D7307185F5CFDF9FEBF4AD705D7D05C8315AFAEEBA4
6D079DF8502F2BFEBB3D629BDA76A5468992FE21794132A2CE5FE4829A94D35E
E1BDBE66C86069A587D7D9BC0D315DA19F7E70EC4B5036A97F9209A1B6DFF62C
D410E0959D3CAD793C3F2E4EC3E99A788EC2946AB0F3DD065F3ABFAC3B499727
97C795C9D528BFF56D369C97BF5D1049477F857CFC1D4BFBAFDCDE7C6E2D6D68
806E9B7AC98633E7B27426D64C882C8F7A65FF3F68B62CB8C3B39F5E640BA9B9
A895B003607DF2F5856C95C463EE32305A48AE9B01CE3CBACCBEDC3A4ED056E4
2E9B7596BF60BEA604FD866A60FC15DDB3DBF320918B3061B9D2456B4923DBC5
6774425595101220C2DD438812F28398C66C4A6ED7957F366EA2C21A99FD4BCB
24DFA260F0A952C78435B7611200FB7C65AB6FFCC212A783B94EB7AB496C1E92
49A5807910CDA6686FE944F525D58C5788EA81162BDC48531044EF18212AE3B0
B9F2813582A3D2AD0C44BB619244DAE147A55F1A3B3083B32563E2C59FAE8F92
20ACBA6491DE74CC1C902F63F84FA36E9A31E93E6C0B23A7506351666EC32A92
88E4EDBE2A581B792D1FB8F2ACF4591161C146F6CCA97794A88BE20DB783E152
F48A9D2F5B876D7563F1302F645B862D2C9828D053F04D3BAE7C3E6CAE62FAF5
61B3E5884E567836D9BA3FBB2E6086F45148ED6BB2C7FA4618527CB58CCA2CEA
7DCB3CD3C5A0894E922D864734439DE8449DFECBA5319BE13CD3499903666391
7C28B818F3ECA9ABB8AE7C01AC661E74F7777A037D709F7D0C8F67ADF9D37DD6
1526B7977710E0ADC318179F91B72A093C9FFF73103CE369281969C3B89DBE0D
6C60938FD322FFCC55B1CF7E0A5FB7E0171210A5CEF781AC4418666392A1DD9B
9A9875A93546531366FCA3B9FF53EDAC2698418DF299E9EB1C6B1BFD83DC06CC
A290335507C1EFBAFD4EEBBE99D75F4BB58A01E1595785E2B90F44AB1193FA6B
262AA0932B9C04FF201A86E4AC244F565A6CE21A0864A6B46C9F3F7AFEA1039F
04B5500645DA184441D19B85F93E1AE60B991300F8699484F1C46F0F989B063F
0A1093569C625FFA54AFD761481F714A226AEECFBAF07D47D1316EB29812063B
D4C9193FA34E4358F2FC35AD5E96B5AEBBEEAC590E86C384621C4B2DD77A892C
C35C96230F2E67FDB2D7995D7511989E902B00C8E64F171EB613CD6B53101E86
14079A3CEC4EB488017D76AA54D9ABBC621603420578E776E0D4750918D79B28
F198A79458AFE93649D69EC57B67EC01796C1F35A3A0A3351A4A6EE8BC03628C
6FA65E825B9D4C5C34287D12D2D40E3D4335A2F910272BBDF79C3CA700D49D71
D860989D8204525F471526F180BCC6F79CFE78A6ED4D29FCFC66D59A6E358D52
2EF7326081C03C75CDE5D5BF52902095C1BA94805E41045634214EC39B123787
716EC5034CC099A85BEEC85D696D20F98180B6F0867226D139375F957E70D0BE
7C809EC499EC719B25220EF4FA31F9BDDBCF66BCE00A03F4C8D404EE78BE77AB
036D9142C2A0CA9A119D2DDF907ABE3784F22AC6EB4F15450BF984E7554394E9
75E415D9A9A24B28B8832B943DA76F0EA77AEAD6C52A8485B471514D9DE88A08
E85887A8DD9D6CD7D2BEA75E8AB4488FB3FBC40470F4DA073657ACD75650C84F
70CB3CEC622E89596A4A110250624D9686728652F372746ABCF3C05292ED0CE6
B3A95F00F69107A6CF73EAC7822F0201F8D3DF2E5251D6A8AA11DCA16699F849
86BBF6856C8B06C865F78B11A3A1B57493B2521EADA247C996993965FC96234C
002F148E663E2E2C1CD8C7223BB734BBE348D245D8DBA0BE48FA73B3DFCD7911
B3CBEBD0806427D632FD08BBADC0C2E1CDAA1F37DD4E291C4DDB4C78DBEBDF3B
8333FA06BF408F1483E7A587EB4687488691EF21286FD1FDBEB5BC4232DB57E8
DFCFB788C7B531580198CB5EA8DA9BD1906E40DBA3262AE65ECB460517349E75
4857C506F0FB03C54158A4928ADCCF2DCAD3C8D06A410AA80D2413B3932EF9FC
DB5C092FAB75B091146C893F2B3FDCFE8B2C904705A83CFAD4D610BBF0DA505C
4BA5C2B8C70ACD06F4D0BE2B9B63AA4C2846409D9B8D2047C859F900F9C867EB
39E678CEA0F8180013448A2354DF75837441EA9D25D1ED0D9354BF7F8E20B6C6
6CE383B7C1748578FE62B98A268DF5747C15D8BA78EDBE663620FDB23AB81D56
FFEB701A1AB26E4A0A499408221980E2F562F9C5B138512F3425DB6FC0D16679
295AA5F7F504F9E1881C843D7A22E9850F66799AD5564679C50E5FC3F680E2B7
65EED1DE4A9F87C1DCD749F5EB08A1FBEBEAC9A560E928237F131918EE8BC4F8
71A71DBB28016D32303991A5F24B012E2E9A34C6AF93551F1DF653857C04BC76
51283212966EB468366DC224B62A5241592D2F04E8A6473E8E43735B1CAB4038
51FC25CAAA37A0D397A81260341C786B5744CEA110169921B5B5314501D52A0A
2C953F4814650B9437FE4294325E4356AEA24A13747062904898419C4C1AC0D0
5FA32E94BC1A3590F3F1FA9946EC2B2FAACA56BAF8705F10A18BDF63DE873476
06258C6DD3F16CA79F5F7282B0E77986B9A44A16EFD07D45F45FB728F1D0AB10
49D922D6B430D33A33603199CD09D004579E5F436B764F91DFD1759274D8E905
B356507DBA8854724E08725C01303346338A3E31D37A9A0D3CC699BA0DD2752F
421297E8D3645EB7CE70F153E8126F916D493C2873E80083F8B5F16EEC195EAA
EDA98A4C030E1A9BBB0795E95C2DC62C711369CEDDA424A94DB5EF7ECAFB05A8
F7AD1D57A647427E4B73DDE462D4464473A8143925412C1F8CB556AA39317AFE
BF621C34AD3F535DC351594A9FFD5DF1C7DCE803B7567A84811341FC62B77651
C463D5CF910680EB827595216D3AE5FF9E67EEA7741A2DEC90C7B7879AAB1FE7
AD92C22B563D5BE5F379CDC26ABE7973FCE6B2AEF8A295910569FE6DD5350290
68E914EE4F830803A6122740B5070E7B4191A3198662F5D431456FEAD65E964A
087AEE8E5E03338BFCC9EE9D36B4945330C92111208386CA03BE7F6BC304C6EE
83FC48D46D16A04CEF9188EA32C21E92E358278BED0C9329F3932BF2624D4BDC
7E68A66E3042B03058E233DCEF610FEAF036BA164E271AACDD917E4FB173FFD5
DCB6A207DF66420727F63EA49794F99EE6506A86534974543F86B0902A960420
048ED29326426E59040063BCD0D0EF20C5604C70DC9E9885D663D1B90F5AE4F3
03C185B3EFE7F34896C210541694A44CAD7F0F8661876FFEA813118742DD1C96
3746D0B6D8CFB637FB50304DC5E8687B996B591A96634FD75E7E6AE9BAEE00EF
9741B08B43885B05EA29CC2F8B41C82254D198B01A635BD49B214FDBC98CEC95
1D706A5929AF55BF5FF4BE46648742C5B09873E18BA9CBE9CFE6D3FF82F88E63
35E65364849A3B9D87CB95993FFE8393EEFA925E555E7740F4A6C846597EC048
BF049BC8CA9973048938795C3EDE035D59AEE1220A07B12C559E2B061EF0C658
D089ABCD8F4FC8D633A1A840CD4DE874173612072687F848D172AC533865F195
98D19F067A97385AC80E34DB863C859175346A792D8F8EBFDD3D6021D22018D5
53A830A787849C1046E56BC9F51D43781F400069C427F03495BB9D1A59BCD2E2
214DE15F2172EE6F0067B032BDF7BE8417AA18E9B9F28DAEFC8316220EA64619
C80889A71D06D50F8146775E4F587DE2DD00793E3AE97EFA7854C704CD8D3090
E827C8ADA7B1720B335DF3A74BC2AD59F5378C60053825BDEACCA61B28A52244
0265B5BF1E303088CC744FA898639CEAF727862D42A048CC5D5A26ADD2F0F789
C85ED0476F1A137615373846415E83AB02EFBD99AAE8E5E25795361210FB6167
E2955AC738A8BDE294368B754508FA46D07B16C39DD25B97F92DBE4ED9586A74
B4906129C40857AC324B2155B72EC9A31C22824D2B2230EBD29043FADED34465
919D3B9021785E830A35C6EC701F4EB8FF2F80DBBD7729D8B926F59A5DFEC4CB
347FD345E79059093525EB5729D8AFC59FBF53176ADCA88D40F6E5E93828EAC1
524C49912B61EC596F05EAA0990BC0F39B6C525687FEFF0AEA87D2D64BC87027
179808B654EADFA2C7423739CBD4A70D3317E73FF21E5C954F0F01597E111C82
925456DBD9678B037453D09982D002115A81CB6A64F656515EDCAB89F477B0BF
71251E78AFBA8D478CE037111028607A83960D08D8E88440D44BCF4DA7A39CB1
6CBC5E5EE6D63E0125A0AD008AF33DCCD8D5109A025BD25323DF67BEB81359C0
2392CEACF58E4943B24D92726B036FB55C32CD25B5CE6CF8F9939900E23254E8
D5C0B14E68542BCFCECDF51A82C599C9DC9C5A9C67FA8BED6B8755F6590F8E6D
1B5174B4451D1A53BC569F87E5FE3D2A6A4BC70BCBD7C14C3098AED3E8165973
29C9E30A3E26335D471D792B6D63AA54CF618D5FB6FCD00914AB6D68DD3FAE21
66488ED27BE15615A91E8E547E82747638E3C370F9E0D3F6143B1FED35E9BDCB
C2F4BC45F68A5D49EBC7D806EBE934A3187D8B0BA82E66CA45885211C739ED5C
E3EA1E106E0617EB87C7CCBC14AE903CF9D8E1BEC5E62B4E94E0A1423D686A56
50C8B500C8661E83ECD43BF8B5330214CB2746790563A0E2A6D21E9E0C067CC2
D14672911DA655A4B34ADD6B8B3D87910FACD4EF4BB09A03E43514E9FA6DE1EB
EF0107F753FCEEAC004E7B35AA9815D0BAC90C1B53BC10F8ECF19BC0DBB003E0
F8F85DBAF1D3EE20AEBA224E4A6B35DB689480D764B1C0315E4EC49A1B2B0B47
E982413C87DFA4362FCF3E2DC14401366BD87B413A0775CE97C035162E1C9A8E
C1D3A5C7027A8BBAA466FA8504A41415A8739C286566A421DAC42026075FB7D5
4A1E93D06407374373129570E1ED647D599CEBFCF53A00C4F79CF247B8D8C890
ABDC77CC85BD4E533423D7DD25883F2224EDF2547ACA81F3550C48B9FDFFA436
9B82F88AC32AB22428ADC2A38C8F82C013FFC8D3F63162A066242DFFFAF85329
31231C1F1B2403ADAC65F5623472B7CC3A6A9C9EDFE263025F6FF20BF5286AF4
8599CBADBF0716861B0FD03DDE687169E8993B250A092BDFE8EE635D40D2E341
7B3174D40C5423ACA87B9C8CC32A7059E75F476D05ABCF0CDB60A3A95B31BB15
873301F70E5965CBED9E44792D5359FA1BB3B19ED5BE971F88AD174A53AB53AF
046F11D8E2E25EBC156DBB3C14
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR6
%!PS-AdobeFont-1.0: CMR6 003.002
%%Title: CMR6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR6 known{/CMR6 findfont dup/UniqueID known{dup
/UniqueID get 5000789 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR6 def
/FontBBox {-20 -250 1193 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR6.) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE339BA29C1C6F656
1DEF13780383DAE38A868377CC7D396B2A05F341AEE0F8BD0A0191F51AD11A4D
2E927B848A1EF2BA15CFBE57A51E3AF07598275195C9613041F71C1AF39E61F9
EFD5F6512FBDA76E29DE6B508F62F5CF9F73F5288DF1C7B0B82C92D3B6358BAD
EC3CA20BDE55DAA7CC58004AA86B6CBF8C410D8287E88BF20588A39309C2B703
CED322F030AA6069869064486CA651DA054FF3F5E56534CA358B0829A6B954D8
9103436E6B06DAD1658BD4A95AB41343B01F5866FC87C4EDFC71F1477C98F8E1
1DCF27EF743FF90BF918AB8C4E5AC35841E2F745480E5EDE1C1DEAFAD8D0018D
2C1F1CFCAD9F6609859DEDFD1648A6CD23D8ABB80747F94899F17C8F3E6CA55A
E176F19CDFDAA0D7C920B3A72051A4745560AC81978C92459EEE5AFE85AB247A
32981139CBE352B248F4BE5F73503A084A3E91F05328EE521D9669E44E202584
5407E7846F9FEE3D54EA18FFB144BF2D6803BF65AE402034B3CDBB40DD24217A
3CE0E95E2717CACD603A958187C42B3558AA38D6B6390EEEDD396F96E6041FCF
6F8888221AFA87EAD79F46E0E32CAED91E6C8500879AB6E580C581E8C8CE9B68
2BB5EFE2604E8DCB2432D39D75EE556969F1B2FBDF6A4BC72D106AA7CF22C268
464027898B311613E06E1584707F262F71D9F49D2149306A88E02BC60BBD6BDB
EF41D90F19197BA9AEF32B5E63D5B9FF41B5602F9F786E76621DA54D574981AB
87A72081EA05D6C6BA940EFEBD0904EA4E77BBCE17E20B42E1722617E0F6EF32
F1ACDE9D758594E9C81049CCC10605A27C2A06872FBA9F159CB155609B496ADA
4886F478E44029B5E620DE8319E257697E93E1CDFD27D560E2E4D34507020E2C
D9FF06BFA14E056D81DF701FAC3ACE4BE6C098AE116E079F0044391EC1661F6E
7A93B9320BD7F91E8FD2E8EB3F5CAE997D5CDD35107A1D35302260D1499B8B65
39625B7925F97D917B66BAFEEA992873F07220714F192839948CEA080BDB9A03
77B9DD032273DDB5629CB28B5D8797EDEFDBC601823E038384C90C79012A7D96
8F27784DA15BACE21501C26E3AFA5DCCE81B52B0ABAF71A35D33103EA86F2415
A39A830D559C5C6CA7423945BD3DFA942B20A06D7A8D8671F9831DBB52907AB4
4E54776D29C6085CD9970B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B8827109
3BDE64DDA024D67F098D6C1998506DDFF7907ABAADA1C39C759C850E0C6F8E89
A392D1C9329ACFFA92D361218D75E115F70A47C53B73B356D703E9C499AAD098
AA9C8119EE9E9708A9EA3049E976FA19AD04210D5F6092C7903FD155113F3A3F
269B746560F70970AC9F8D09956E0E84DACE4112C4E7C7F6B3F0B63D26EFF95E
2B2E9699D16BC8AFC4AD9113AA3A974C9E82E877288CF71E9169D2DCC61AAAA6
C536E5604EF0716F6487292BBB677518504B52C63822BED3BD5FD14EB41EE6A8
AD4B6CF90D39F98E12A765B645CBA3E8552FB9A986390212CE119E7C3DD675AC
17BD006144BEC534DA2A860188619F17589008409C5A309CB83FBA70F6446B6E
2B56991B6A03B1DE10C621591CEE45BECA27C54BC8B4F1754A9E8F660812710E
117850E1BB6FD89BB13F8CE391C43DA89EA67E9C3E7A4697790EA26B0E4E2E80
DCA508873A7AFFC11B8C02EF86C2316E8D8B6BCEA37F81A3A87546705F070C3B
9D4D28C366CEBC1EE485B8E2357DBE46E86C87B9939DADA60888AA9F1B92FECC
CC1C198DDB594BB70A8FE690ECAC21A414BAC89BF019F34D2A130F485EAE35B7
2A10C67EA3A48A4D9734759CC93AD85C6A570500AE5AC9973FC76EFA06BF5DDC
26E20E28D16B50957EE01AF2653F8D860817967AA5A9BF9BF7ABCDA710E9F34F
4F0EBCC32B3C9C2971F6225D2DAA6A451366B83F32B2ACB83E746D365B2DE38D
C1AB7447FE7B37F9630E410E5D8F0ECE74DF46C538947B3A167AD9F3E4A7EB3D
60F5425AE75AC3A27D39311DA35696C3DC7282AF1532E7AECE63D13DDA0296A2
01487185FDF1875AEF55A36C17D6A8DD329279D229259463A2F05CB7A874374B
E2320E1F6CFECB9C1CE62FF468C29751ACD9754AF1EABE8E7696C2888914416E
235B6766F20FFBEFF285277B639A51EA2F2E30D207BC891B00F0436008F980E0
9EEE7FB375BB069B9E0BA11DA951A99D8E60B4F920A0495C247FA7DE904765AB
DB5C3B2D634757E43EDD6FAA4DB3C67F82D6853E1170F0B2D8CE496DD4E72B0D
28277BEF172F1402959F64527F9B640619F04416DDB9D05FB2ACD019CB9C119E
E544D24EA6DAC5C69785394EA50E6EC9AAA9E14B904EAF29A733C6D7942B63F4
85729686742F26DEF78DF0DA1CA7CEFBB684F4CAD99021A3B3D1FE03B9C5A4B1
BD04CAC89BB91B11952A2B17A61789BEE0C54B46C03FE9A1AE73D17CF94BA30A
237C29D414C3BCE8E3E2DDF83C0BD59DCB66C4D2C3DE73DA8378F3C6C8035D28
7464399857E57651A53E9C4AA68DFCA91B2376CF98AC5290FDB9BDAD9EF1604E
9B0A70EDDA1E564B6D2456E7BC722454ACA8C4950FDD44B6EB9AD01169A9F845
B06A0DDB7897C847A5B1F42258AECF3807AE936C8F52C3A7A0A85D68160AE442
FE81543DA6702D76AB6E8701F80DFC1D87C961E350D0E52AB2A298B9E5908600
7E14D2A87309043CBF13F69AEAAB1BC239DEA88EB5176624F6046664B1D2691F
FBB2071D3706F97DCCA355A6DCC4D09FD35DC078FBAAF672FFDECEC61050A120
10B5A96629041303FD01ACCC7686165DED6AA712FF8E5E85DE33C4E7D877C49C
6C469A90410BAF60BE65ECD91CDC2EE7AC0CA8BA7B53865F26092BFCAA0BCA77
B80DC51DAD09C93C8DD8E43502B4B68F3D5918C3492196292447732BA90F5AB4
9F5E1D634ADE1CCAAD028DE5EBA9535F6FC5908DBD2D643E0A7E059C8C386FDC
E72659C0033F535C0D7F6B98D0335552D0BF3C6E302B672A5EAADFCEF81912E3
8F54E6FB7EC2B325125159713D0AC50DEE3673B9B148643727E94C80971A2E73
5E1E13237BE69C84FC039DCE02ECE2668AFD047F21A61BB94A9F498C9FE5CDEA
B274B40728B6F6CA9B6C15BAAF92F465B0D7311B46545CBA90D874839443CCB9
3110F052EB247B24B45A3D2FA6FBC7EB2A4BEC2A5892914B3C5EA3F4F9B9DCBF
6F932D95700E045B49E4B1F2C9D2A42CF39CA2F5A2654E6E8E6E92473D28AACD
5E35C6705EA728F704F5996D286BED433F976AB7E018621A577AED7C0AC0A84E
A032FE1869F603E6F20386E3A190A30A21EA886249ECF8CDDE2C33D73BA8647A
3DCA7A8DD9E8EC8D9A415D126BA38B6771C489DFC419303EE9C1B83FBFB3A0B8
97D64F30E4BCBEC24DF603FF3BF541E00D5804B6B6543D3D2B661CC551D497A9
9DFFF535AF424B2F3150BB39AAE8CDB306AAD37767BA10BADB031DC2FAB16955
EE78342CCC0E8B5976BF98F215461A8C6F63EBE6E2F1A1104662DDE53388CB51
8B44F3534853B8095F3B746A2459C2EF800FB1EF7F235EBAA9731E3AB3BE4369
1D3636E3ADD5BDF0C34FA80E90D8A1DDE770943FD196E0A7C5F1FAF6970B34C6
4673AACA6B2B5C12B9608521AE736C1F4B97209B063D991300ED5AF3D7F27E76
68E0B858FD8BFF86581E2B9548C691E3E5D9EC4D39C9715CDE86C7D22223CCEB
8A38C776A30AF14912390A7546DBECECD7A687D4F08646E57A12C80DCA022B7A
33399761A50B8E0ABEFA1163EDEC3DFB5DA3248792EEEDD894872D4E6814B4C3
548BAFCDE0CABBCDB97EC6D1BA47F2E77CC1389BF19D73661749AC33F46A618E
A665A85776545BF9662F2179D7BFD604FA8EF4700591AF3AEC647E27B24B76F3
133F9198DC15C1AED830E737909E43EB91C334C44BA35810007A3888E33F5DA5
B3B2C35481C648AFE630CC3E08F77744E401B2934E407D1EC17ECE737606B076
F8DE8EF3344F57495EF49D11580D6FB28AE0B1422521B320843B13467501CAE2
3DB93D7BB779F73B6AA30050DA74BDBC3F8DBB30F32EAFD07734A151BB2BAED5
C9B1F790059339B64BB4146470F30928C9A49AE88906BD6FDB7431A4B50809CE
0F67ABA01CDCC2320B0B097187B9299E3D80CDD7BB5DD5BFA7B28D924C5633C5
45A23CCEE097C41C3759C1FA8DBA0DD95034BCA89BD23FAC18C70093F40FF2F8
0FAC5DD4835F2DFD40540E9A9E9FD951A8AF2CB766597DE00147B163BACFB7E6
EFDA4DED594F1C746D8B46A1145E0E4058F5917B3F21E9BEBDE745EE72CDCA64
FB31EF7A2E55265F32559480E2B6726D3DE26FFC97EB4E3160F117E890C4B2E5
8DF310E6A728ABA85540F571C024F8DD58E1D7827FE97CED5EB31547EBC36415
02B8C0E10B7E37D816F01D56A364B8552CBFAAA95BC4BDDCFDE91CE0EF005B4B
7AB56FFB47A093AEDF0DE1EA48FC8103CA3CA1470864D2693E360006D05668A8
AA422CCCED20DCEEBEA5CE0DA1EFB00FB93E922B18124FA11A88D0F6E0F719DA
57603DD5DA42E1C56C2FD9E5415AA199D4F334C151C1157E75C107FBBFCEB706
5F4EA47A29B54ED8CAEB8DDA2F53D2A703B95487619780A52DA1270011648A28
AA64338E04AA5B92C1EDF3D8DA34FA6D227A0325EA6F22E9B38B6338C657BB21
CD4C582DC04010330F62923F817E4EDC6E5C0E6500F2A975A8A95BAA30C4A134
BB31B5AC45A2E7F6E9CDFC810D41344C4F606049445F8E93D74271C1E29DF7CB
5459593BA28AECF64D903D3E4D77CF5C04B06DE44A41EE4D9FC769854503AC85
69E4A5106E84016DE3D59865D4AB30BD6C9E45C45DCB5408421CC50CD6179C85
34E55CC70FBD8FEFE9F1D5160664981716E3BC7F24B6F54E0323D9BC4B692971
24419EE62D8B0BA726E2B4294A9A76F328B8101DA29E78BD5C4AC383350FE196
4D42DB1653637D19530124858950C22F1E9CF5BC07D46B7A58CDE19CC88DCD2E
7FE4EEFD8AA6047E919823C8CAB2EF5274F45E861E6508CC11A8AA90AED2403A
B2BF1315C2157B3B50A3685205D93E40906EEE9DE5985405974BCE0B84BB37DB
080A45C5237B269B93C0A7CF294A18B45464A41F604C494CBEF829A381155CFD
71CEEA54CC39EEDB6DF58A9896246B09F95DC6BC40BA6916AAB5ED3D24F66154
3662F8978FC63DA9280FF7ADB09EA5BA79D3B66E0C88BEC1EDD78DA93839073A
A4D7B0E627000C4ABA76C47CCFEE92E319315333A5584A951E34C55412049C4A
A5569FE65A006F77B416E0530AB6A8E7AD6C72340AD4CE25937158FABB2153EA
281E1D840206F5DA38E00815E9081F81DAB9FAA8F4DAB305867AC84735DB4F52
A36129929BD2084A8EA37BB6889695204BF7290B68D5E722540BF8A276F8BB6D
451D582EE59D2FF03F6B97DDE05FA00C3D375D2D0AAC8FE298F85CC067B15481
48D70B6A0354C705715B891915FE8EA45244677B9FCE81E72D66177E309F3F83
F744B9EA9E55C3B30DEC6E5E03B3988FD526A82A5E8E1DC79127FC62B2FA7949
B3AD3148868DE22BD4B5708E32CEAAE6ADEED1F463EAB9692411E18F8D6BF391
126B2700B4CF3B59D02E3F8795130C96285A63FCD1E0F647ACB1D35E9C58BD01
1DD06BABA00CA4343BEBEDBE677E053E9732B33A7495DF51782A07DA07F5646C
770C957AD915CC70BA8E08BE7A1F4E6BA5BB9C603E38F6FB0A2578471C4D02F4
283069856D926B9076EC73AA39CEB0A061AFF1575C7093FDAC9F89C3DC06EA45
06F3C2A3BC9FF21128B10CB758DF0F099B459A5264A8C24C098110D2BA1A8532
8FAE146A91BA7D033F591AB1A94B8A6FE0FFB610F698D216D58B4EF6C87B1524
8037CBB7E23D8550A620341C6625A1A2ECE7CEE2598D66277F857231A36155E3
984F147783E9B93975AC38A29F2FBCF704C8A04AD84C3E04A12D2321FA56811A
5B6744813CCC187968C5C26BB8D3E6615A912FA5369C01CCF8C0DB790593B190
1A90CFB5339B8771F325C5FC448D36C7312B11A15A8635BAB59CF3CAD176131E
026F6E141B2619EF7F3048750CC9291397F141591EEC8B612D6656DD34DB54D6
DBDD303CED74BE76664E7DC86FCFEEF2001C9DBA56418FB61F589566A47AF36E
C94671C5E8939AF9F4D53C0DE7142B7B63C86AAFA65877EBBB48C64589AFB2CB
1280AC099FC48058855CBDEB6C2D2A0D092267996591DC3B5EC8252984E9B27D
2E9EDE8CD8303F0905DBFCAE497DE1B755B924452CDE11CF4F20893DD6FF7251
427F520FE00580DAF1703FD968E0F8ECCDE618E1EA5820EE6CFED97C78864EF6
26FAFEEE194A268F24249D44829AA360D731C34DC285501E966A959180718F72
6330E4CC060588A2F65AE64A720DCAA818D49D4440F5D0B6C1F6C3A107E12445
F1BED2D3FCBB87A9597F01C7332AA79143564056219BF87D4B907A04F77621AD
054935E883B2B137D3D1C4BC792E8335CA08B6D83227F35736C41312A0BB077A
60FC6488C5E02FD51A10AC113D4EF70038C649C1677B2204A77F2ECBE9B3C341
F4126BECBCA61E3F3801F9188A3775924A62D30FB096B440286FA655EBA00A74
9A4162904BEA07CE68EE76018346DEEE20839C9A2FF71179B58E1D4AB30856B5
F5D97295A097174467010B15D733AAC5813CAA633746B430B1AAF9F997FDAAFD
436844D1A56B8E25A89D2CC4BA6EE7ABD167818FD4F6C747E07B262C99EE2C35
323F0B471586CA50F54C6381B052B15B0C58C19DEA82C0CA29F00400B727419B
2379979CDCBFA966AD513FA903160C571C3BF1BA239540B11EF2371A3880837C
6D6CA2F374280CFA1586427AE975A2AEC34244874E4D441DBAC6CD1828841C91
069AA87FAE849C5DC7C9EC1B9876E59F3CCDF8BB23D939F5348D7486934BFB02
CC5A22541ED352616830A510DE7732E5D8F7E785BBD31C2BC9D348CE5632654D
2C1740F89D57FB2AA1FD8FA3304EA03F757BB8F498ED98E48485722E78D97B12
A05F3A28438084D1CF90AC4C3FFCD7B3365941C45E1E02CB13CA1E99F7FA1D00
1C9D489D5C95F019AB4CE89FA3B6604473DBD2CE8E278969E0A0FCBCE68C23F6
9381882443D3FC16966555FC222F3FC4B1207522201AB7A15A7A6F22CDC9D392
360BF4C95DAD35770E0AC7E5EFF015F2C74ED7391F40EC94B8D1C163B5DEE5B3
911A20C2625AD3B24BD94D2A42405E655DA47D3F94F882CA2F479437B4E0BE71
8AFA4482C6FB270F8D05B4599A01403DAAA90C01DF3AA7C2BC7E66AB6AA833AD
FB6E5EE13E45CC7CE7E200FBFE639F9CFFF5D08512C02764997FD28368969BFB
0876F236EF6189BE73AD827332DF1B2EADEAC0ED3B939CE5BC3CEC78975FC636
44FCBC2CCF4396AC7343EC62E0E4F3DFFA2B880BF31D93ADFE201BE9CCEC8BA5
0B9B919E05B851E0909968DA259EECC6AA0743F25247978CC09C28C4F878E29A
5070E4023BCE95FE0ACCCC01D0EE219FA8344E8F6D7D4347563BF8AC030B9097
41F24D4BC9494915A82EE9FD37FBB6A46BF077B728FB569B1258CEA5F51F36BE
4F4D0F890D782E44748CA3FE8C8A515998371D9C7D2311F192B4B7E7C68FC6EE
3F7136714C282A2570FE591F247A08319CE9EF1E43274E4E57166E31A2ECA506
85350DA31AA4C33C9687F5210BA225EA1007C444FBFA2126769767E47A967884
9F68589E4BAA9ED32A7A466DE35554C132810C68ABDAE536D9D884352F28EA02
8A555D2CE11F30598F44A65E2D86B43ECCBDEED9E4E5B5B7DCDA20EAA09D9FF7
422FC91F2201431A9E8FC624FF44D26C0100183D77BC7E6B1A6CFBD3FA8BABC1
AE4CB0FD382E26BE0A83169B46D91429DCB746A0326243E212F802AF6A56C709
6E70C6C7C9798E01C777D83A83360FA37B362D1C604FDCC18F1DAC3F41703CD4
DC99FE33F7A054696EA5EFA3AF3AF057E61739D46284154370173CA4DD5B1DEC
9F096A421D6DBDFC107111354369F01C92A3951B7B718A8364F5369B820439E0
BA4648CA23539CBBFFBC3967C52EFCBB95FC6F4493037B465F3624169C04FA4B
DE2A87AC1371B4EE657F10F941994A09E2C90422CD73D7852020BDCEF69CD159
590D64B236041F798FE7A292615165414E28BA0FA7955B576888B037A6D25D80
8F758EB76975A74A0F8ADC117FE01300D5A62B17C4B0A06993A10DCDDBAEFC4D
F316B672727911A20AE162DEE8B9F0741B1953D83810B40DAE2660F96F1E5449
8DDA3A25DEB33B7C5D3ECABFCCAC275BBD8533CB1F5C2497C674E2A1D3560815
C9AD1F37A2AB631EB0F13FBE39D1EC86E2D757D935BD8D59BDDE77F41468D1D3
5B5555CA5E8AFF62F4B6004A6F2F81629B46DCFB12AA8231C3F2C5748D6846B2
B43B3CE00C0A4F05FB7942CBD3AB030A06E8A74D607D716CCEEFD5BFED2D184D
B8085563B1342F7654373E055EEC39BED8D2555AFB4F7A534157A9FEB3C919CB
977379685D7FAC826748064BF0D056FFCA771FD9D55BB3E25116A7F94201495F
4D71CE975B47009D8B0437FEE384BFE24D18E7E452CA76ADD362FDD3F55C1DE0
3286559F73B1DFBCDC373EB033179CAD93A6C389CF94926E6CBAAD2E9A0A3F95
FF39CF78A8BE5F069AD17E169324737960BCBB371D0C0C4A1BD8482FAAF4AA08
8EA94090B2B6661B0F3045DC79F886E83937C4FEE164C26F28AE2DB864C599C4
BDBEB008C2083296CFA07F0DF33CDB10716EDB1F4E0681D20232649C9E216127
0AEFEB4F4344667F1B48F72D51D909A576552F6A33E29B698C2C5C6C038EEEAB
B1292589C4A03C856CA1AE5970B0F612EAF00FA6F9F28B8C15A1E900B78720C1
A793601502365B6F8B76B89A8016C1BC274C9DAA0B0F8D4CDD0F543747212FA3
17FD0ED51BCC792A5686B6097A4C84C4C4EB60BF97CC6D2D99756C79BAD6C8B5
82AB5B42B2BC5F9577EA53FAFFC4F64BAF4DC436B6F345B951C6C524E9AC3E8A
441A8237046130BBC0240A1C1ACE51BE3D2732E691A898630018582272B3A6B5
AC50A97A7CDB002BAECC6142A8A23E18B9B9E985DFF078597834138A16E9F85E
11173415C8037B4E2543F58A9EA6CD83465415927695A1D0F116A41843E3FF73
CE329C6D30A4886257D4DC0AD012D6866985AD8E739FA2C9F3316B691F3C5CBC
DFBB67BC020B7C86B6A81F7D1494FFD8331C6CD29DEFE88B71372C6EC1BF8D5B
41C3F653882CEC0C42F38E99DD9010F7F05EE00F67117ECAA5264846E99D786C
B983E25A79A83A2CD8F15A69F84D546E6D4495DADEE775A9667A6BB109EF1626
B25A06ADAC1A190E889EF2885B54689101D88279BB1A78BD51FE3D3ED298D160
F3F385DE4C5C3CE0E1F146F407950BF52C47D299D456A9E80D738D24CCE4D4F9
C3C13E321A57BC7F0B2D0A1B1A8BC3A38D6732880FF03241AA63EBF3AD89F34C
B5BA800BE981D7ABEB5132B51BBABE305BD9C8C3AE79FC032D788000C0C96B52
D9055C474615A4583F998D37903F29521AC90686DECFAEA6FF39D5EF7C780E6B
F9E93DF2CE7B9F613D325D62C223F714E272E729A78685565F415ABEABE79BB2
9A0016917661EC67AF6AAA277970E9CE430FA6A27279C71587E6A926BF7C6E51
57ED568647B092FF8CF7F05E627E42F2B7D0F13F43E8D056182B170BBB87A31E
A5651356EE5293319F92359F79CD3BBE08D8CB4A5BFE67BE1632179AC1F2CD93
24694FEECC312EA4FA37B461C5B8FF370FEC605E0F75C58DC111B2FDFB9760C3
B03CD24188241F6632F1B4BE5C57CD5316D172024154EBF6899E45D71BA97CAD
6B4D98E77E14F1808D1051BD73CDEF249A14C37B54C54C17845D8206F49F4F9C
6188790700D4A72E9862544E828EC2E06BF77D73C4D32765BD02D68D99B5E535
95BB6DD718490706753D7859FBC8FBA8839268E8F0AD9E29639316AD652FD9FB
8A9ECEBA0A71B856775F89DB43E5E530744372CF2E767D1914367532E1B2C7B2
2DD5577876313B732F6B84C0FFCA1454BB892DC251544D1BAE31171F8B61EE7E
25DE08D5CA3D282F611D51E4F72AACF93BAAEF622C056118CBF15EBC8124E1A4
C319F2C5C11A3A9A52E05B6DD1C407197DCC2A68D19D537FBC02F466D81E1122
6D4C2E5D619122837EB5E0DE4E498F8241D4B933627F01A1026C217363FD2102
B1FE93D5AF46919FE29DBEB7CBF64C208A63DABC3B104EBCBF29CD82FEA038B7
CEF10920F606324E642A748D113C2C794662530C2A32887F2DB7A55EA520DCD7
A84BC9BC8C459135B0CEEE5DA526211D09031FAAFC5E686C103C86A0E7099FDF
67C960381B3E6E069FA674A9C4E75644AE835C15CB5C6ACA3F5E9BBE6F5DA796
6646B567E5EC1F20E49FB2700DB2BD0585F3C0BFC5343702C3A31A51CE0F4441
5303609B6A4E2024E23FAD92CA4AC6961593F13FE98A84FBEDD1894FC81A1CF8
781102D41BC8A089A8C44077E6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 35 /numbersign put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F98037D4962EFAC0FA86B14F3C046A1F7085E40E99C0F2841
8B2C299411F9DC8FA0C8C7E5D7822A10D31D881F6C47B6C47CFA943FF9A9F5E8
D5F1C3E6CCFA324059B942FBA2C6D0E9A3D080DA0CD80D8DF76B0FB6BB706F45
C84054E62F75294ED126A95DBB4FA2D09EF80D1F2C507DF980D3DD2BFA3DBF49
6A99DCC954BE39E51507B12ECDD92C397F4065813A441931DA18D8C4323E7E6D
CC9838A428C04A8E10C09161E17404C3DD7DE5A4878FC2B2E5894EBB741AD1B2
CDCF61FFF6C6FC17747D88A77C5C5009DA281F29ED78B547A4D830917D603A48
C9FB4580135B61EC07008822E3B3522B35D0FB628772E58BE5028AD23BEB6656
C8AFA332E3757B5EB4390E8D4759DEAEB7CECEE8D8D1CC4E2572E4120134CCDA
09A315F4049CA286A50B8F932D96F006472BE61EC6F416F946D0B64627E9DEEC
A49405E26D1E1E62A6B33A5D03A9C484F5EA43672526783566F8765090E7AAE5
9D8053AE0BA8DB3BCB2AC04E0A18725EB5F1A1B135B5E57BD7F15A5D29229685
E65ABA59BA195FF2CBA240CFEF3FC6371DF18E6C8A81E1311F3A55CEFE2A53E7
468E74B9D98C028FC1EBC501195D34460B4CB2E8376F715506E6A03C7A805CCE
07F47CB52B04A826628A6B800E419CF8205D2404AFDDE54253D416DE51872527
79B0E778A14F1D378BE0922D6E0ADB1F798605E4C09257FBBBDC95998DEF2E0A
15B2DEBADA004DC698F6AA407C229163BE0E755D27A834A3B0F64592C488680F
CCDCA3B4D22C3552E70D2C97370B4BE2810D704E13D612A8A45057B7CE98EE68
41A47FDA675076CA51E3831797C62154E0B91E213252C58D39514E9BF54A2055
71C2F16B6692E841CE94683B5EA31E9E8B0E8F00027E851F33F65FC1826208B9
340D7C1C10B13BC8F0DDFFA077FC475190251FF11D1E177E5C8E017539764B07
F955F8B74DEC4184CBD9F20C0BE0834FF2E99379F0FFF2AF19530626CCEB5F88
5A19A09BA12788A5A1902F494BFA6D3D8E7D3F6C712F17617E183341798F49CF
236D86B9AB2D194C3B6A8C40A9A7B34431B2F8ECF582A3D80351CADC1B791ABE
07A42C689298B6C4D2754705C175D80C3A98CCEFD575F1A6047AE07518321EAD
CD19DD28B8FB2731C7D678EAD6B3CD72909B36448D788487089B3A27CB91AE0F
D6F83B7060DCCFAC4A5A95398FC59854CE4BEA2FC1B64A61DB18EFB30ED2981C
BB158CC215B2BC939F4669C25D971B49A0999CF16EFF5EAC3E3B95BE251E4DED
D581E5C14976EEA77C636D61332BA356F25DA553F50B47D56F3898A79D1D0E32
1CB9E9B9198653AE499A44F2371F673DC4E903DFAF62ACD0F7A7CCE7581ED079
07808ACEF62FBC2C87052BDC1C4E83108B8DC9A694E73121314303D793F1B7B2
53A606036687812BCEAE1E6685A17884D65EA26118D937C28963672EB2F97AD9
8227C91510F7AF3CA01F4828F2F47092C0277A3EF117CB6BAFAAF151AD647A6B
7851C47323042B55851C51237C65E3AE9BA042068C8062919C80FB94FCE07B4E
0C98FF4DAF9E9EE68C45C32B1FCE62A99EEB37E5971007ED101769A7285353FD
2CFB6408EA2222D5B282DF23B1960744A768CE17197BD544407F661BFE00BB77
D9CD90A2927EBD880FC65AB891A0988846C5AAB6E664ED5744350CF9CF89D289
4F3675980558A31F651522C4461E61681C949409EE7EE344D4D3DA7967947E13
DDF331CD9FDF88F5E4256FC2E4C86FF570502660DB07902319EE21E683EDE7A7
620D63FD3B79D1B92027FA73ADD9DF8E10DDAEFEDB3311AB476C02D8B72F8CB7
24B3BE4DC392F082A377E85F7DAA4FEA98243337B241535428B402525EC40B1F
E40164D288DFFF05A5F2C20E8594109C52A5C3ACC67E6900072E7AF387BAEB48
20A8F0EDE93A9CA6983A7ED514832E61F38CDB12110AD01AC037B8D0E4544BD0
45E6A4B23890D386007D607C9CFA16BF308BC2D8C4E55D7FFF72FE161E9292A4
9490F37ED638DEEE126570A3F3D67949219B41CB1AC6398BEB6FF94BA86AA27F
397F8CDE09E41B5D14DCDFCB56EE5204A01C50ED95A0275C8CCB016DF2EF168E
2ADC0D705A1E41E824ACC0006994E0B785B21C6597553D868700A2211E939261
DA99AC63F59CF9297E0277E6B4DAADEC7686A91A0EC9D69FF47174C470D9BBE4
D3DDFEC9A91DB3F91C276D12E70A9964F1C380705F5C42E5E8197DF53135B01C
33E73D3D1A7F1E3AD5893B9E358B7D397E76E5DCE70C2BE7296CD2D688956254
3813BBF4AB8944457BADF6B4B0996499B4D9955E6D55BFF2626C867D233C4C99
C0E216619BCE0680D3B9E8A075448AE39FB407C0C4AC73F3C5CFE8AA43CE3A09
23BDB4D35A56437A492266187F4F95E141C933A94C5CF53A7A9B91A773FF7A09
FBC3DF1B7A55696354391B70392122615349A0038B42ABA86729C2B8DB713AD1
E769B0915DCE47BE227DDBD8F2DCE58DBA2E1014958AF489EB8F8A55DEF9CFE0
0B28FE01689A5195D22A515C82994A1C45C06E113ED9FE75B3B55CEAFC2027BD
340E42A1605217B3428DC9B2C378E9541ABA5A7581078D310164BA85A3D3D1B2
24CF594EEF38634D3F6127C99D461972A26ED02DC783956B6435340CBBCD57B2
A498D8EFB0D4727654E90E6AB4D94333D256E0D1BA26315E16152373FD7E2B8C
5DDF812AD4514256217996682C953DA132F868C03ED597727ED33737EE9A79EC
3F58879EF16E08364E814181CC06D26916422DD93DAEFFCC78CDBDD759AE48B6
933AB4E8E545E03A96CE96775F0F8174EA68A9FC3076B912AF9AF263B7BFFEE5
5548536604A73EF5AE581140B4DCC961AC83FDE0803C13CACDBB0D77E94D2A47
AE7BD9664EFF065E710D66C1C76A6EBEBFDCC4D287BBEF83A17E6178826E8054
77C60F2A8DE6941101C98DA5CA62A619FB9E3C11CE0235C2AD605B009A4D02BC
491D28C6748368605A8EB76CD9FCBB606B54D4DC1ACC1E4070411C135BDC282D
20EB1F44307D6E6CCECF2D325023B6713562DBEECB41287F0206D42D82D2022D
E9ADE941F4203954020EBE0174D214A1829B6D32BF2337E48995D4EC90EA0EB5
06794C205294597B0938B754B9FF2899A112EC2C922278B8BD3B5F9CE0440B42
E604989F99AC41AC27AEFF1F1FA4FF4387C4D2DBB51BF9DB49BD7D81335512ED
F6A48EC36F5E26A7796774471B409F825037292EAB350269F9BEE49A8E7451AD
39C67A9C8D48D91F57DDD25C6C3042B1F94400A4872C0320F8E418A63AF75218
124E11ABFAF291FF11F3269B73ECD8125C2F042CCB4CFE0142D9EA32D5DA6555
773D53BD1182909E1A74A70C1E9145003D26CF01D60AFBE2C1B78B793508819E
877DD3407865CC40C11071C07BD456E550BABD253672B259D1BAE6028E8AEF35
0EB1826D5A7DF8B689E007E289E79BAC8E7D2BBDD5BCFBD1533DADFECF847C7E
38132B7E187B4F87A07EE42A8E4AD2D10E258C375DBFC6A80629DE3327AED7F5
EC70756AD1E168E91612C23F19F8E05AEA618862FE3D56D2428DF7610FD506E5
4F99A1AB54078CF1C028B0D803BDF6E14EF01C613FD187980840B37ACF7016F3
6D92C37C352276481A470AA943ED6D68F7E52BD0863F624A0C365DE6562CB3CF
01195301B04EE136055C683CACC10796D83BA660843C54B4293B4D933020EEF9
C88C7D4885CADCF288E976529AACB20F127F20FC918D3B0ACAB4DD399A2831D6
62E782B771FE15A2BA81E48761E2EA94F1CD08ACB8BAA527B492D0F3D1AD1141
208A8FCE35752781FDD1D3C0C2FB29CFFA5A1D47051C56A898856DC168F02267
C1117D71CFD934736D2F7B80DDC515DB4806030254AF6C69F39E4D4004278956
88EC63B16D7B5B2D805A30CD9BA02BAF4BB4B29FF4C22F6766E4DF7AB8555F43
DDEB0783069630DC28E3A54F583EF957E65EB2AB87D36B6BD0CA4242971A1752
350B5F0AD897E42615086EFBD996EDBF337E86D58C2646508B3335972D3478B2
D1779B6A61EDBE4CE8E19A2E8A9F4F8D4F583E04DD9CDAD7841F8E6F8FC1658A
00EEAEFEFDA95FCE83D0C0BF769E3EA8353AEF3EB31FDB34C4C5B606E684BA78
693FEA52AAB008D0E0700BD17021A626F5E3514C1BE7D327ED9E4BEFED2448E4
E6E0897006C63477E9E618C3FE404B675383F8B9D8B3BE26BB974795E3461268
B3AC1206A64DA82BBD47EF4970D546ED59E790E7976B2A9CC3D762F9D718D6E6
990611A1A80A69811C1B82A13352E9AF75E84E97F3E1A91030568829A35EF3AD
42C6EE568448015C8ECA19BF6D035FBDDEAE793AC7FA276554D961588D7219B2
5C17FDB15866B4D5A639F393BA6F9C2463A05B45ACDE25A9084A941B3A7EFB0F
82C311B281811449EA9ED17CAF0A6745E2671B0804AE08C967DDA992DFC162F3
008A4857978F4F0B4E9227D2B046DDC09CD995BB68DE6F0EC972A10C42594493
0A4E469FC72449906D4488DC51D7F868B9936B36020763E3C40B2F9B70A375BC
6667E017C62C07408958178987B2DF22C7349AE13F0267A9A9BDB2892E07AEDE
E3314BB3BF971BF8F3C5B2F4363865246E07678599A1F79C060CA8D6AA98C159
D866C05E7C3F2C57827004ABA2C8CFC94864A12A5E3280C3D8A718B6328A1DDA
19E6568A491864F233918B7CA90393C428B52DB7C939AE8E1B0CA355624F648C
EDE578695E79FB93CB5E1A47E9915CB7A4CDC766B6F3FD703C7C31133A38206B
01D916D41DDB32AE96596B730DAB59A286130E7B25189C48DCFC6A458C0AE845
49808F43141C6C6A194B32FC523E1ACD38DA8881D7CA019B0D07A6F048978C85
BBAB151A6163D2DEFC7376F4AFB841508B37C7027A1BCE71C57712F6DB3B7E32
BD23174F9CCDE093FCDEFA785C20209E2BA3B4B818BD47F201D9A3E894C3E3F7
34AE098BF2D99BE24D8F38055E39150C0EB535983E620C11D60E7EB0D68DC2AD
64E37DF94D93F1B6899162E8FEE72A5F679DCE5F203F39D221EB01F5DF1F5F3C
948CF346EC193502FD22F7CCFA776334CCA660A0E705AB881B68F877441EAD6E
302C6D11CAD1BFA7C372D8C9CF6EE5FF7770686F6613273F3FA06573267FDCD1
B9B3655DAC1AA2C4E7DF39634B28D7030923B4C2DA6D10E0428300FE5A776F81
F14789504A092CA4B4B870C2BB44AFDB1B17903BB48F28A7DAA215648BF50009
288BBFDF271D9420D2F13CEF1097EF602D80A793B72DE3D51212BF129D710483
F2E853EF429D8478549809016D2A9CAF5BA9403F596B02397CB06303ACF01C86
A16D70101916481D2CA8AF36680BFA5C18E54F4177FEE1BB9ABF5C15DD275501
519ABC6FEC0CCFBCD0B0ED51DE8C8F5CA76B8B07E204F5E319FF11F7FD7CD537
7F02D14B1515A6DCB70806C629FE3A59823B37133C6CA636860D4338DECA0CCA
BC794174336951D2EC0F6F352FACF08A2FBEBEC63A512C801B05CE59CC37E003
A4F3498A0C55FD38BF72B75032FD566518F46442F6AE003E68E9E80E1FD50BEA
04BB397C5257AB1E4147FBA26C8A4D04785F58FFC3C15F2C2E4EC3FE7D4179C7
09371F1389066CD1FBBE2F48160E257BEE60B789FCAA1A48B4E6EFBE189BB569
404FA84FACD82577E7D5EC7DC891D19E56B74161BFF1A1B3B6D1D284C145DBF2
F4BB2F08848363867470074D3FB4FD677047F50CB1E67F766635E55967FFD923
1C3E4A0DDAB1A3F4F13F81E70B2179A2CABFFE86C2D8BA0C1B4A3D05D8316C02
08BD31DF7BBF7C6C7A829B5CA8729D982B76FCBA1B32E641BB1346D273BAE5DE
975641D74924F09C0DEAF9F5F9850F9311C6AAAFCCE8B82C768EB2C1120518E7
D5E00033658764E27BD1C17580B12BC08C648B4E935D55760E50FD2E874A2CFB
4F77D8FC89B715D323B06C68A3020345E4F061364956680D1C98A69116291D55
3986B07B9DCCDEC16A912378AC6B9060A6BFFD47ADB53023530F7B169EBF891B
2F0078D3741D90A9FE0B6C9089EAF85FA69539180D872705F42513B90661800F
57231F256B3D475296DA42635DD1133CDC1F30FDAC16E3E48F71B0B5919689DC
056AF826CA226D8AF18E7754AD4F28AC26E66F6B5FEA7257DFF55029E108BA1D
7AB8FA400D377D83C437CA8BB859810A2F8C471C06A05C51319B0BC571A3AED8
3C33721E6BE138F9784F6F3011DE57FF99787515557323A1DE0E81D5A91FB7BE
F19E3E01D17ED5996D56824ED7F4D9640CB16B76A8FC7A4282E19F9678FBDBDE
77DE347920FD2685F1200255C92A749F016BFFE7C51B1949D12E69B67EF8F58F
39019F9BF0E9B3109353803A7FBFDA2F734CB78DEFC1201486DA64C16280F8D7
FCE5E9E48E16923BD0536C122F21832FC590B022ECBE79D627DE5E7FE4A14C9B
FA580FAFE0DA5DA3E83AA0C3A97AA08B13361DE0746F7959584BD86023DC6CD8
DE314808FB8636648513FEAE4F9D27C5800AB3D6D5FCBAE8309691C240ABF4CC
9F2D4A5C0FF04B623CE74A76A2FCD460990F6F89FF96013813F9520933944E3A
615A03E1C14C57CEB15EFB05D7DE49BAC502014E39375B81552655FDD71BDC56
9436735129A3B8C4E59B7796D06FFBBB04154B4FDBBBB3D85EA6079EDF5ABD75
7A7C59815544916FAF1D179446A1C37031F066524A7486476F09B885B0048E41
4CF51C435A81000BF596DFC57134A57BCC190C413970728083E3E6DC95D1C72C
46F829064F7901DCD89C5CE0E7C130D79D09AFFC3805C6EF60FFBE3B63429340
4DC5CE4D9CBDEC97EB957E0676E814719E07F8A077EF22B0F0964D1FFF7AE48C
15B3647EEFF63C4EEFAEE293310189A692CFDC9B3FAAE4FAE503E9C00C21CA11
25A68B8CF1AFB84EEEAF5477235CF5CB9BFE6ED634E52A5DB51950791F6CA65E
AD9177859BBFA53BEDC3E92D1D842E11B8727D8BC28ED3029B187BFEF524EA0A
0B762A9ECB3DA515D90E3EA8514ABA4F7CBEF827A0009169806B7EF49A217908
FAB10706B99776B6710A80184282E490DC6C69FB1FE74BDA511A810D478F0B3C
EE46A725E21021B82B840C672D0202C72CD9BD5D538F76183A1513B3348C1906
8EDFD49B6D7D587BBE552A4C2EE0BABE9D25766C75FB05F75640AA69CA393F2D
393B3C8CDCF7368E7F95217B215C70EE5ACE954AB790E033E84E1EBBE716BE9D
E241B4DF9DA1FF31B2C62D194F0DC20F36747510312DD81D2CD1411D219B42C1
57154CCD4F47C76F682A0A90221285EE69DB94D6E1B1E383123961384BE26B4B
49429C47DFA4B512294C421D7216D9A4773AA1DEFB68CC1447267FD9733FDE5E
0F2EE527A5F9E9034B43E954084E2F61F1486AE5802DA12A2963A66FA8F65BF8
0F224AA5B755362EE749085E65CE4ADAD297B14ABFE6C0952082F266E41BAEEA
AC5267001B2D41469C7C09E4C2A28C47495BF52C1D23089DA5FDB4685C29D7AB
03D87CD3747E2F7E0747D478997EF1D256E16F01879D1E7528265A879036C431
82723D3BA4A7C755E924A9C8147BDF651000DF5D16FFE1597642E49AC4A165B2
B4F141D20D93BB72A52CBE4006555E236BB8B824ED60AA7281D69E8B71612EEE
DE345D8227D11F09879C08296ECDE40047FECD8257CB8D7D22B1C564C1C5F85E
D3DCAD6A177FC529BF0C68792D394CD4DA2EBC0E7B26749CD7C06704895BED98
71EC3373E4142E14406431E3672A5332E2D1EE35BDA8C2D2B2FB5D353EA2E9F7
3AB1F3FD02FB6F8C0FDC3FC3037343CC35FB5CE3CB7484D9E53998309C223967
E12FD40F214FC04BE3B40719CB60A2C52573F1D4FFD0B663091A845FA7C205C5
8A879235FB34D26011BC38AC5779AEF638A342C243550635F3AF86813168B8CF
C397BDDCE4F1E113CACCA044DF37C005E33A6AA637D003514334C521728C2BDA
66AF8BF8C7CEFD1279B3323A8216DF53FE95A8E7B699EF1DB0CD791713F6CDCE
CDA2832B85C6D4F7F667B910FAF7C6E0A4144E9DA6004AA0795BA2921B9EF386
5ED0FA35173D9502BE56F04C83735FC5F5169F1DEF2D183CBCBCA281D6EF537C
0C9D9CEA7FC6E139D2409A93731DABEF793FBF7445221B41E0D7A0813C7314B5
044C4855B1EA93B5CAE1EE207F30E703CA44478FBA008C15B621FA4AE5BA5C4D
B38FAAEEAD1F00953ACF5933E83FF30E10D6640DBB59264FCE2E4A01BBB03440
82472B9C15DDB4F1CEFFC06F26BC5571AFBB0C9335D0588084B32E7F15B0EF1A
75E8AB8F4709AF20215FBBED88B5E6992FB3FCAE09E3FEBC9AFFF94CF305C464
C3F2F541BD2F29FF00736D344063BC66A4C3C323F692CC922CCDFBAD743070DF
628E7FB7EAFC3D82E657037D414D8E880B78D79E943B49AF3C3292109701FF16
F2269DCA9B8BA105740E56B390ACD1C4D2767B8C8759DABA83A7804EF0F2A860
F63F173E16174F04C8020E2BF7801688554FEE37CB2E0D924874C4EDCC89B3DC
463FD1DA11AED081A3F749AAF1E9F2C48A06268FB45507BB6489376F4B2D03FB
0562CE8AC211DBDBD5C2CF170BF02A382CB730EDC8A93F477B81180200BA6118
8EB855641B4CF5EE01076399C983CFA46FCC00EE7B9852D66CD401D3BE7BAF8F
EAB6214C64DB9178F7CA01E19A3EA0FB06FE0F049C38ADF020ED28F8AC8DEE47
892444695497C050CB584365A8A2243501C575D2D9912AD02DE0E52033319D80
4237C7BE832288948AC6ABEEB443540784F5E59D22A9670BB56AEC94A08D40B5
4400434F41B6D474C66779105210F2212D76A4CB261661E392E57DF189DC62C3
A07DE89873A3BE06FF93222179A7AE3136AF4796FE47BEE6EA6639120391C13A
D6CE002493D3A4F5119D77FA53454E5F54648736F532C483BDED9433198611A9
08E6D9D86C47C53C22F909E6CD0063EE8628E699D86BF8964116607B6FDCFDDD
CC7E3E780EA0725D6466EF111407DAD9E2BF7C8A4ED6EF851B1DE593E76D7C20
E6EE84CEFB45E6E44703FC7A2A7A72E4F5E5894F659A1EE74B597556A74DB5D7
1E9ADFBB4E0E601ECED13420823EC8C6BA31397E56DBF1054099107B7B72E522
9A9E5C431600C05F8CC2E2CB5246B783443FDC29164CDD2023EEF2F41BADA72F
9F257D892669732CC59788BA269E945497DEBD76C11555018E88820E797116F7
D6E256294093F89DD10B71B845F5801EC6E649721CA6BD5BF2D156FC63F51017
A4D05E115710F538316ED58898131A3A3E6CC06F6BAA8BE2897FE83903C58BD2
25F60B182C59BF1A8571B5EF95CB3FCEFA5AB78398B06021674B80702A989D31
D317321A0AA40B4AFBDC4AF66AE320DD5DD214B6BF068F9CA23A498B764D555B
1043077F457B1CA704E3E01FF1505A3DA6E4B0CB2092C9BD346428B688898EDD
C496231FC667B2E1C93A1F765DDE7429DEA107C459EEACC0BA6776412C2316CE
9D62593E27B7F3DEC301AD318940BFE52500BBA3D981FA6A8B6AC3FE62F69D61
3BC18C2F6C6291F4CF0B4814B1F132B552AC2465130C5E50C9209490CE3B0890
BDE5CCE72DAF2DDB1E675A58950C9229D42AB24EAC498C435F8A27134AAA70C9
38338BA5E4A21F7207CEE4A115709E2B71EE956579B05FA8A2AA74606F4E12F9
06FB01C1EA1C4DA2F73564996D8784BAAC48459C98A1B302EB74115413EBBCAD
2F995CAD5CC0EFC4D210180122109D2FF3D426CAFBE79D14DA6BB95B02DDAE0F
3EE54A713A75E699ECE25359DBFA7CDCF00D78BEC112D8F3766754BFE310F434
55FD9B0784E1B5E88A06EA40EE4210BF19879C63C489FCD8F2CFC48A3F900528
603A4C347E64771434B56265AE2919D5FECA073892ACEE8036B1C359B3DEA199
68864B0DE9A9F8144889F37E4459FC52DB2EC0E162B1D04E6889D426E78A322C
0AD470EFBEF4D45507A27D8E8794D39F79D71455AA16EE0A43FAFCE216BC851F
8E7DDE8959892F4DAA59D5DC04C3B5F776B4BE9C644F0FC3A13AE59D48CC3445
A3F59421F5A444E995DA55CC6E1BA0B032F1DC3ABE924F84405C5E3B78AA7BD5
03325A1CAD389470D5F24F39044B82B0FE243153593B3ADA5A9DDBD02FFF5A2B
AF3C015CF1DB3A7F89A0F80530461D10C1FA1B5E8063F127CDCF51214676CE00
72580563EF6C7C0C088C027562C74DC318EE83D2CD0B37DBD8369035F918E7CB
3801A1338E7005D301F53DE39C0F3D1C4D00144F903D7970FEAC81D7B8D959D9
2C624E84AF8F7343F11207AB81735313742911A2FD1777DA4A0AF5FE76674BED
98874D70E385BAB2BC76DB8E57E66F0CDEC84C43F859045882599F2338653809
2E05581A31EF8BD08AE09EDD64E05BB48A2352F17CF56524C7488320A2FA1C77
E7F9C78D698C87D856CF3F43C6A73B221FDD49EC8FE9555C3675E817CB89A7A1
542DF6DC3FF5BDCEE65A4A68C7F8843760C4F4344DE444E38CA20E9771DE270A
03CA4894683072D35A1710AFB21675563FA24727BFE2B360C5322935ED5B24AB
BE2B3614CCA0DFF68366A3B057304E357F9A857100C1E821E994F94CD2A11EDC
9F39CDEE603C737B68F8E1E036C09D62311E398CC507E2B1F81FCEEB5AF12DB0
1E51581F7D68407A25EEA603AB84311B0A2206B486D634E0D4DE9F6D85D4590E
C17E9A46AD74955F2D43E04FFF31FD3F251DDBF870B77569934C7FB9D8B076EA
334F891E1A32F9611DC25B572C6CD11860718E1008EF8BC3FD7DB4E6559A45AB
FA1AB153692151C16BD172F81A0B11A8FAEB381B7294620FDE93DAEEC47B0875
3FCC5BD67E85C325510210B0158B87A4E18A94F6F451A37C24CEC48974671516
FC1F3335C281D1D3B7F89AC8B93E24A4B4F6F6E88A2809399E40878F1D5B7A85
B325DABDCB5C553903F8BCFE052722B4890A47D4124035F52EBDFBCF152C061C
2C1A4123F0B8C95AFF7D3A81A92B0ADCB01E5D86DE2DF8B42326E469C24F085D
38420AFCA580251074E00FCD29C5ECEB46D2DBCBBC65D02FB19D2C048A5E4066
620FFA1B34150A46165FBE65406502F54D161B67BA36F52767EE501FD02934FE
D0BABA7F8000EC54EF68F9213A020DEDDB05A4E5A8E9B9AFDFDE145DE1A64CE8
4CC468872863E576F643C716BFC9AC4B8D7867E3670ED53BBDDF63B46C814582
3CE88EB0B12CC8A467BF04E84156DAEC58CC2077AB5F38D06E9007219D95F029
425DD08CE4D26775AE6C06EFD392B37565BBF5146491C8EA429171282F196B1B
7D0FF66D121F7F9BA7C1B50DA7CC4919657102AC2B9330D331A9C628839F13BE
58CC190AE468199AF17AAB8B9E43B41211A034EA29AD4BA212E2DD7CEB6AFF07
1AC162B5407B5669662575DBAFAF180CDBB89142FB14ADC14A56E5D082459DFB
FAD7A3263AD7E5C489059D67F3DA19D45A901E5B542C44BAD9CD2443B8E1EE6E
5044B6F85BE7531159E46E26215C498E28A7220ED6243B78D8CA628B1D826EB8
E57654E9B34F5F1D86F8A690EBAA01AF04C5CEDC397FD4B628B0C670DA8F0200
1F41BC8ED52F1B2FF2B134683A0352FB99C4190B429723F4CEC438AC4E767934
D1C97B1410500932BD74C0A9107DB7EDB037C0B40750678C242E6768B0B6C303
A3A30F638595586CAB57253659EEF99F64FBF9B5FE098E3233ABD00C1B9F06F8
139569EDF7A52D12FEF3EA2B184D1929A26B08EED18B4A3CCBED39F2E916D908
988115C100A20251E9898385F49C3CEFCCB9506E8D445F312D653513ADE611C4
C8E3E8077F683A25F0AF42F280BA3ED97BC68609DA85799F4175EE0445E02B97
54C43B57586948506FC821141ACC722F9DDE60065272D9FF3A9157830DB9EC6A
E3CDB0394B8B3C21843CAA9C029438F3128010C8E2271FF22E2860F0C4608295
2BA09A70892071D71AC9E69FFB04226F8CE775979A2AB86132B0B870E4433D6C
192A7D608D679594A77220C32B1CBCEA6D18ECB7287B7EA59A290DCB69522A06
B2D7ECB6E7CCC7F6D609349527ABEFA7551AB96886E389C7C8371D0C1BACB20B
18AD0B61258EAB675F8685F205DBA961A0E8330A20F581AB13C55021C8C1A2D3
75BC88E8605D5D71A2681A85B027F65F17DD7BDCBA7860C4D005C4CA9EAA9878
FC267E1A9134AE8E3203E95F2A7483332B31223FA3944BFD3DC5A2A1F8C611BE
3B3DE25BC32066B89B72C3D7C59B116F6DBC5521ABCC3E92CCCE813CA70910DC
5FF2DAB2E845F8EBE5ECFC1B654ECBE530DAB0A6DC29E57109F1C5B4E43A8591
AB6071DE1B19FB35CE707B7E63C8B887AA3DB610B92D3CEECACCF628AE1CCB81
9EF832B40F21821A5F363D6FBE9DADEDC0DA7895F9DE7F41F7DA370C8F87B06F
733502D4A97920296F2FACFA8D42527D3A23B4E2F0BD380ACB8D517D1748D796
D1587E36144F9BD1299D79ECC5349044E6F8D7EA865545521F8D2677661C8C40
135431BA7610EDE19F710975E691EC815A22E444D4FC47948A4988C3C3155DA9
7D289FD644CABDFBBF4B188C90EF18142895F2F192260F24691218CDBAF9E651
7F7C7EC08609D409D4EC5F8C3644136C11983224DE872CFC4978C7DFB3401DB1
41F7323D98449724D466CC8860C75143EC8FDFC5E874170732FE56299C416A1E
156F7978004B34257A3D9E5F5CF94A35C9B05EA60618C44A22A663624C223BF3
9138934397C57E6F6AC49F38C4B77A1BE23803E6574156936685AC0000AF45E2
2ECB074C8AFEAD35BC2E9C405FAD220C378B144BC62DAA027C5710CBC01E43C3
CD78B76EFA000453E7ADA4213A9C763B800F674D2FBD4AD29148C077E484DC4C
A0EE89A78814967774A8456B60D854675113B1E88658067713F2D63865EC15BD
B0BDA044D7D19B4898967F522FD9534A6C3699AF6918EF53F42EB808B4D5C297
78BC17A0C4F6A168BF98362264545D502C98F5DF0F3949E98DA6E7D9A8AF5B99
4E7501A3EE9D744AAB723744BC20784F40A006D27AFCFB6AA93514A8284EBB79
31C9984D104B2734655694DC50FE6E6AEC1C4BCC54B5D0B529CB7BA47CC198F0
BC03B583C55D33769A3525435C0977EA2DD74626FEC9D07ED5CB330866FF5CF1
92F77A87F41E057847E55E82508ACCE324D15FB69C4394A8360429B7B8DE4191
5E54DF67F3DD01A82B5366DEBD0BE37BC7FF358FF4DE2CF530F81952F440CB46
40EEB31063B3A1E7E06BDAB09780ED34E2162F34B71E6D1B87F5CC8137877853
158D82750003C47DCE44347BCE31C55FAC9A9FF53D2554E9BB4F1B2AD366A3F3
7C5B802E77C250AF5D73A471554944BBF0916047438C56FDFAFE28889545ADF6
D835FA6234545566EF483FD9571D5F7F0E725891B7EAEAAAB0E4D640480B878B
1CE1B1F09E008D8044A7CADD76212A375956B0B5B0D7F1E90E400EBF2B802AE5
0F23524B4900D27AA3502D6B5877D3BAFC8D08A15CA13B30D58236B5B8F25C0D
7F557747D3CA663509C09C4983A8DAEE23EBA918F6048AB3AD22708555D9D066
8BA1DF8E9160DEA4DB9288478F33AF37C4313B963C53A32E19E7CC804A735329
EA2FDACF50EB91A8611ECFD38D6947ADAB3F4578C7EFDABF8AA3775259D2DEF0
A44ED0AEF8313422F756D097192ECD753BB18C66C44100B17E31CA79F1455215
B0072AB517439EA2887B93E3FA30AD54550E1657B06F74D904AA353A494CE476
C38954533A5AB38259BC80838D425A546D02368F6D5A8FC9A92941DEF1BF80FD
3F7E4D4911E95D8D3A56B2D115F4A7357FE9EB63076703B29D6E0C1101238BA5
84DBBDADD617B43D02CCC07CEBB4F12191B5BDC4A0BF911459A04771DBA148BC
B8F43A0039B14370E558305D269095D65F00F04C2009D20E61C3049D7F805A4E
1A8CD2BCAD770F036DF53B58A1C0663B7EB5C5A3A35E7F302E1BC5B4704FF435
CB1796430310E79DFF0E142E1EBBB0FD167A36D5E367EF2B6E5475635AA67EE4
C73C5581FBB90542A392A103708AA6846BF5C7B36ED50BC6AF6D7F2EB1A195A5
EAD299E76207CB405D165BAC6C50846632F338A7054FA776336EA11DAF207F4E
A6FB1ADF8B44D0E85A1A3B3A40CA1FE4E59160EC49F3081DD2DF0153FCDF8286
9F1D04F7422FE3F60ABB7E62A51BD03C37CCD6634CAB96249CDAEF6BA11DDF84
2E91AAEF8D3B6597CA1AB6D653C2E16F430B8A524E7233FF527A0FADC8028623
734A287EDB3966673CF064015D67768A5F8BAA4BC44D215FD8391DC68421C91C
3DFEDDA4FC30D6E204AD339DB4B77B7581FEAFB92FF3C269E59BFC9B29973FD3
FE5981124124FF05568246A69607C0730653D3101CF0ABCA0CA26288FEA81BF2
3F0DC1519C251704E5BAC43CD7C8D80950AE3F71A8327A6260D507C709950F4B
9E175F63A9482C9B9E1F7DCA13F02E548F8BE0F2B0FD7B7C58319E246FDEF67B
3283A4E77E4A497902C0EE54DE1833B132814D725A473E898EC1F37D4A5279BB
AB77C1C9612897EE0BADC4F12A71B6B2C7ACAE22AE71EE8690CC83CDF6B35CD9
A003DF8249DE54781455CB89CD7912C8CB8BDA999B05B8E99C58468ED03B43C3
69776374E504A825ABD2A119FF2CA473720B5CFA6C4D3AB9521720C1D2843400
920979D086A28621949064F05D8802B9BB8E93892B228FE19FED631008F9BD50
975BE078913B689E8FB1FFFC410CA886CF7C9901EB572A1120906219512F8DC1
C02B0C08C978CBEDA871357AF34F56D28B9AD0BE3A52A8940895BA8E956E8D7B
153B3D1D9BC3355363F44CE8992934F7FF40C753CCA1CEBFAFEE74DAFB1246A1
6607E0BAE66B6E202F327E28A501CC9C2A9B40812D0599929213E9E0B926622C
03105D67E80138177F7BAA9F7BFF3FE630A2ED7EA6509998DB3AA8E9AA00BEAB
BE15F6A458DCC86BF3804803B7843348CD9EB3E80EB4DA062A8E66F40848F22A
6B090B9802184CC6F2952CC3657E8F01D1D1A6DE05A0DD56FBA213962B26699E
2EF79821F1DDBE3CCCEE12C266DA7E66A5BD6297A8E0557A442440A155D34216
ED545410C76DE8CADBE55AD20476606B9784EE96E05324E39EE4527B5B8EB4B3
D11D87B47687C3B75029F1BA87E55DA9C087D2FBAD355CA77FE507042114C1F7
63F3B806A84CD9CED89ABB5DDF61B59AF25EE1C00BAC8F6BF1F1E93D1F7DCED1
CA7895485E83404E01913B3D6F3B41FD9B88AA4B0D01D30B35D0BD7BEB8EB378
4D0778A4244CAB69F3FB49CA8BD1F20EA8D1B4E7525211190B565574E8B6ABDE
D779D18CEB8DD5CB1A5DFC748FBE38F7ABE144893ECABDAA6DEB209039263819
5659766A895475B658A77DE1C719FFAA567DF80A3F5D6F99490A5E0BEAB655E2
4DC0ED42E731561FF90D6A8E62F478DCB426E6537A8D5933F906E4FAF899A87A
9C71EB96C2408FBE9A8B6F109326FB8982EB16B8E05520E597FECC1122423082
3313333D68F2FDDA4E13D9FF98F245940497BE2827BF4FB5223A458B5DBDAFFE
F696F87CC1463029892FA178867B88DEE2FC8C314A6F6AFA1FD8F84C2ABDB5D9
1AD8ECA32EA1DFC713F75DFDEC6FD1D0F0E0E13BA4F093F904280C4F00102C06
FEAAA48367C94478143EB8CC6D62A0EB8A2A7B7EE845E47F98031FF0155E670D
F515797872AB00DEB5D90AE7A6D9DAD989ED8A89A636D2213E5102F056FA52EB
68D9010FE69C5F97F0C909B49DBF3494FB64713B7620BE1428CFDA60CD9BDE9B
2571426A9D9F41C21D1FFBEDE8196E33D7496512E68324A45F6AD3E7FCE9B0FC
5B9A4893753D66C83FBD72C03244EAE035AD6716A146EAE39D1A28D3BE8756CC
DFD3907DF429C776560AADAB1C642F1FA4D406F78AA71BA97FAA271FF532A3E3
BB84ECA5C288424111D1195E8EB78F4A44A864DB41BEEF41AC84CEDD3D81207F
D6C12D94BE7D937E3EBEFB2C2B626E178F2B1A7C071D94406510E2DAB79A2652
5F6CFD782D73BF2EAD945FC6ABCF3E234DD82300BC4C6E25FD2F5660F2B6DF00
6FAA7FD64DCE3ED9E9FBB76A983342C1E84073BBC32D9A930F65E3465317C430
1BCDC607A33AF286A9F872E4F884AF5929C1DBF27AB60687740EF4183FC5BB76
A68AE06538799955A06063FD6B521714F0584812062D511DAF1D3F2617455A3E
553B98E54EDB2E87ABE4E5297DEC3A27DFCFAA151AB5913EF25BF03E7700F91C
526DC6BBEDB79F2551C4DF258033A07AE95515D4652A4DD6C5A7ED9AED3ACB42
69B85FA6307F434A6855AB48B62DD7816B8E0F068DB7DD3FB87BEEF841378276
E86A46BEF8A7628654B9C29080E93B4D2C30562CF7EAF17BB12878D7CA7B9272
3E1D0BE2AADC04ACD6EF350EEE6B41A51210156F57BA24DA24A358A997D978E7
2969EA4D250EF3D4ACB15C9D43F2A989588D41DD12E35E1B5C905E5F83686A33
3FFC1E8D4DC5AAA2E50902152922BA1CCAA4FC259796DE9C01D04D671ABF1AD0
31C7E77EF68CD968F1D578E2CF64A201513CE6FF552D7BF0BBBB84F1D2A27B33
7C1116212A487770271059C959D2873A4AC5FE394A25FDEA51E3B5A47A16E637
104E10817290CDA7B0A652B1AFC67E4EBD206F46A7CB8C85A04AEDC9D7C21347
F0B1A704F0D039746F2B21CFC921DB4C6227085CBB09E8FB507C1AC6D82DC6E1
AB1D066B3B59310061D79BDB429FB215DCC47412E1A5FD5C619FB5A01528D6CC
9FB6E5F3A03DDA628C1317FE3BA0842AF3CAA67AC1C969BA6E8D8136C775F5FD
7B5CC6FF4C870F4A7189921DEA99A80D7CC24A5ADBAC5E68FCD98E4F3298563B
3DE314D430B253AC44FC3588A0221C92FA49B71726D917EABC9B14B5AE5768CE
E886F263E35F3D6D70FBC9C8AE8C004EE29953914BAE9829DF201FA0782A1845
C5F0ACDF965A85CE5A5B428FAEB389DD78DF09314341A336B9C94F24A9ABCC5B
152E59468EFC8E7D5976C58BCE715BB790593E785ACF9D612B2DC554875FB8BF
DC1E0604D4FF7D4670C206B82CBE49377D27F8D8FBF4EAFB01AF6FE06EB9BA27
509D4438B0ED712EFE4E27928E8AF6276637D85F502263289CA785A931553996
E9FA2B95ECCF029A6B181012D57B73E41349DA8E83144103C1F6BFD5F44101A3
FAD1C773F7C370EAE4EBECF2E9DB94575FF15511584D14AD7D707C32C433A929
4FE847F5E977C7C73DD2E81464D350F7A82495540F8F85C04C3D5FD9942EC00F
E6D4FFEA6F102712A137A5D3823EBD486A4E8050AE0C1E41613F48311E8A4043
BA7215D15E4FF03AA1DFA8A969F5249A94837BDA117225CF47B6FB8F8515B81D
C31EB14729C197D7D654CB7DA3096F2EEF50A0B957A34CCCEEE58CF34090BB07
006B8DFCB0B72087ABA3FAC6E915880D55D9DBD5C3B2C574EDA0EF3CFD876AD5
0BC033BE886D4F15EC16083AF71EA351262B61927CB24DF77BB16C539533889D
E9347E4FF7B30129CAB5DD5DF59A03F08E6E182C5FD4B1C80CE0C7EFD9EB133D
94C8959BEDBD42C1054C8F79E7EC5BACB6B704C09624D2CB65AF38FEC17E5F58
8FCE964D4586042E4EA9210F6E33429B3044211182C5A639F33910F2EB126320
AFD252970210F90A4D1C3C8276E9B51C6F09E58E64D2F0E91E9E385B2F698A19
DB7275509139534871244E05ED86366C24F297FD09D4744C627C7E65F52FB8A3
8558D2D5613A53D789E9159DB5DD2CD18CD9A9D4976FF44D0D74BA7AC5DA3801
836CA353C207CF14238446080C998155DB9400C680386F9A4E2EEA70EB84A1CA
E1BBC01CBB470025222F7D4514215B3011301C40F68A56D66995E371D69C465E
94C22B1BFC3F8E0252F645AB538C7BD7133D0D229CBB9816CEF1DE608A17C1C9
7CF31DDD69807B07325B62D7B87EA397B6CB85E9B2F828CF1762A226D1126CCA
9BC16F96BF0A66532D1741CD1FB27E68034AD304C4C1B8D25F69ADCF6B7171C4
7B7A6886253A263A52F1411D7C9B5BF99847F3ABDBBAF58B564ABA03B04A22BF
0D4F4F0126F0ECF8522DD5BE23921CCB552E9F29E52F5B0FA7C45DDA9C2D2DEC
3F4563EBD8156BC11643656EE59E8E3FDA7A9576417F1D87B3C2053A91FF2B24
5D07793A724D15365D9BF7C985CF8B04CF65BA9F2D2DA2614871C5046F1B7D8F
5F43B06694ABAC6EF14E9430CDD1EF4DD71DC20D49
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 13 /gamma put
dup 22 /mu put
dup 23 /nu put
dup 32 /psi put
dup 58 /period put
dup 59 /comma put
dup 61 /slash put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 80 /P put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 102 /f put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF7F09D3A6C93191E20C47C7
832A25DFE46206D78D05B29615AF8A32B09006939A989F7EDEF37BB9B883334F
528A5AFA99164500A4FF96495E5E23083A673A976328E1F0D052AA49B80FE035
9DDB6B5C01E4EDF10ADA000A7D6D9CAAC7970690C002203AD8FEB9231F5A2D0D
2AB4D8007503F64797942F9227920CAAD43D1B48EC23887DF500A243A7967826
FD4095095317784AB2F2B4BC81933CFCDDCC723A92C5D81B3B8D5E7BD3C814E1
7E6430C149498B186503DCA07F57B5F1164FAB22AA70670EAA5A4BF65B0FA7D0
ED1C46C17E7F99CFAC861C96C8B4512A7FDEB9F5B7007D4DF17CA85FF1A474CA
7FE270F111A14865B5E118D34026FEE6A97289E11909EEB6A58D6C30785B0391
78CDF986A2A3EBCF0BB8A6B07252603269C43D536ED758747F3E4F27FAC6E04A
BCDDAB9F9AD0CD7F15D490A70F55BE9A4A080042CF555350D6EC67CD59D314A9
9938FB76BD776FFBE44AB15ED1A3407150588AA6249C2E84780B72D65C70EBF2
32E5586BAB20F08DA31EAF33A1BEAD8791D88B29AC6BC68A4A536026514B3430
87A1456AC31DDA01A48D4F82540CC1F21381DF81C6DF9D6614B654755F33CA0A
6EB6187A7174CC0DE0536B6F999606E44F45EA7CB2D9EA9331F0560D7B90CEA6
E6948B82B4C753CC3306B0CE45B0D5C4495730E07C03171D2BCA0D443506D2DB
E5DD1685C6DF74CA75C299E2998F97A65215C1B6E08BA11FEC9DD5C10178FE5F
E8BCBE292FF30EBAF205C2C36F85C11F5C075ED5E311E1EB05A98DE0382DF3F6
CBC82A67DDD3C1D266F30F431EB7CFDF668EEB2AB81615EDBA2FFE66B604F240
E3CD765D0412AE941A2BA2D563BC2D16A495299EA684D375276985A185365457
1A697DBB2E4CB31217665D2F470342CC60B587816D52CF0FABD8C13C6A74308D
A424764277EB10B7F981D5B609264CA385AC0CFF714EE43D1AFF9F17C5B95316
E77D307E52930477564A682F577DC9E5D417849CDEA84CD7771570F602FCC81A
92D20E648405C1BA4EEC4BFE1DC9B0514A07F4DEBC51BCBE7BCC01F4B8BDF9EF
FD122A17A2DBFAEE03242A47656F39DCEDED68DB480CD829DEC60F62171645F5
C048E0E360AAA8AEBEDA89B1509BFBD368C5C72EE743C5B87EF96B91ADCC6331
F08316E9F218585C42A3FAC0A4BBBBA3543EE354CAC001C8DC8AE297C7C9A548
784A103671ADA2EA4CE112C42555EAFE6A3EB10F57D323810A9C0FE2CCA8E8AE
149E43698FD6CB007962788A37F7477DD3889E0D5BC9864B64D76E447E581162
672A62617B5CB409FECB9D84D3FB0CE61144F06A7560C7BA48D6CCDEEA5D7E7A
AC943A27B2349B403B74D3DA5B1A0866D83D9891A5E31E3F6EB50C15123A49D6
BC9F7FF292505B1ADDB149ACA621E9186326D02623BC5B920F226327018A6BE7
9E5A254ED58562B975052590B0E32D3D221DF53066347FB17D190497ED49CC6B
E5A0C53214AC50C952C6FBA956091236043824B686988E4D7B813A0DF7C906B8
EC2B4BEB729CDDBC7789DB1F36D837DA7ADDFCCAA65A9324E2DB859E2F7B31D4
0F1C73D4216DE1ED39C84287C3F863A919D7E47B52A8563D61951BE497AB1EF1
9FF67635F8FE8EADACF8DAFDAF7AA83D3799D6093D489BE74DFD036A99ACB07D
71D6A6AF09FE833119301A96072E711C18FE8D0AE562B6741D7ACFC342A19A77
EE6116E76A973C4F50AC987520E0A050F515235D65636894A614CB2311DA77F8
8B4519A3D9DF6C2B657DB0FF7EBF6E4A99D403670E5006C1DDB2DD557399C34C
C793B50425BCD74BB94E5BE6B784E8E2848D9C242D39282585934B9E996CBF59
7BFC78DE655EB4479897C1F80B06F732209F271B8FE6A2935AF7CB6D4A22A333
1B1132C58E3B696367079C1B858136CB8126E98D7AD2C189CB1AC1CE9AE8BD47
E984F5472F353FA6FF48728E8DAED3A32930AC7023A45C69B102E328164312E5
849E1D2997AE4976F4FB445045AEE1BE2B9C04B724E3E0BEBA30947B92C4701E
838443EA1D11B615B7F272FED6B293669B9E964E7B06D8202067945301C99DF1
C3BB2D7B20E7269F965AF7502F003200BC39BBA47EBD232F2C850061D9EFE3B6
3B691F361650A7638C87B19AD731E6EE91F030A8124B7123EDFB775CCFE54500
548B1B8378069F514941E48E53B6BA78A8FA4CCFB498E502E1A411B45CEA7B3B
C5CD4CADA1D4148C351D28E2D3B66990D819831CF35997CF5C206B332FC1B11E
EEF8071225B3E832164A4A6514E5D929CF09562E30E14003DB3A2104471A3D40
E14132D1ED610C89B31EFA64F29611089BCA3FA337C473E1CACE291B0066D03C
9DCAB72A666B4A7DF99ADA9A9009BFEC66FB1DE2313A9FB1020C917B15AD699F
273A56C457E0AEF9D97B1E4947B3147DBD8D362FE53D9B03066646A4EE597A85
47F90C1781BE8D374A8D48A10B9F071ADFA4ECC0A957199D16C2D2D7EA60CFAA
91937AC987F575E8105743CD3FA7C83B597AE677B57E859830EB98993CD792CF
27567B9FA368369362EB886BEE4B15CD4C84F862200CAA99A5F828B72CFEAE53
E9A1A4DDE90E32D93D6C2DF41EAF2676B00DED8C665C9717711ECFD4CDA0678F
CD98C7461943C9FFCC2DC9C606D8E348550D32E5C0D110BF7A97C1DBB71D39F6
B05E7E5569579141DCAFF671B556FFD4EC068588D5918FD0543EC182D6DB25F3
BC806639F676D9250544A3F054581F97B64FC0910AC880FF26EBC069D97F1BA2
6A25992856ABBDBA83050295F04096020264ED19D636B61B46E7D49E4C434EBC
460BB8B4C333B5397EB4816097F07848810B125E054B98CD0B7D90FF96BB48D3
F40D73F30A9DBC447FD7B3DDBB80D0628F1B6A88F28F34B069077C2D1FEC030A
4F1BE3AFAFDF435EE41F5C560DBB1C6233F5864631CA83490FA68CF515A9E8F8
7ED90F009BF31292AE463C104F3BDF0DD0C494F1CCC475627D1EA32B1A2B3AC0
BA44BBD086CF6AC3862D48BDD751C8E1748B21953438F048C373426BE65CD959
22C0B4D36325E9A7FC29310743F0D14579BB8873F0543B6096A314F5D7A0AE86
BBF96B565434AED499876D7BA7ABFE870302D29D6A356E572393A86C6AADA2CF
FAA6C8FCFF321113DDF312E1CC54B32786EC8FB63849BEBF1E6413FC3C91317E
62B190CAEAFBE68B631F4F08A3D8051DA534007CA3B42DE88D341D7C6F5CC9BF
FA28B00EBC975985AB90D317419CC45752BBB6012AB4021021FAD6F65D3AA466
8F2EB29B3B51C476287897BADD1B2C8833B1F9DACC7BE3AE09BF46334AA17D63
F4D580692DF469961D0C6E4D031304681EDAFF033F39A63B1724A7140ABBA83C
C24C3B3B06326ADE56C99583E25A16962B784AB77FF463DF5E8E209D9A5E59CC
65FD7EAF7701F59A8318097A16907D6069278F38A29F6A99EC6A642320F33BB5
54FC7CA4CF62DC77986AECDBEB22A6F1ECDCCC614218EDED642ED9A0583155FB
839B080A2FE582150E2F802399A2B38C8DA594E6ECCAD7C024B9B903C4C4982F
F11EE0A59636A19A7AABBCF2491825F6DDFC221C3EBEC72A3073A34AE5B627A1
0EDE35536FEC86BC93CB89D0D82E89131F39FE14700D626E89DD4B2300F73AC7
0FC93367B4253D9836AF314C63478C4E0373EDE6A493A0A5055336EA2E3A5545
85222688865CC1A0050EB1E57AB631D9BBE60732579B906B48901E2DD8E78C0C
A83E8937F9D905F80E40DEC8490EC7113664A19CE223B439FA9C9CB65A2EC513
35185A966717A81E8E4C1162E114A62B6826A7CC6360E6B1C0D5427E6FB74BEF
465AD2DAF7406C31409DDDCFC07A00587FD63E84F77BB17B1FA09A78F4D31424
C7536F04CAA459920AD13B95B4E3A3AB63CC440E1F8FBE5E998839E81FC12484
309F932CC28D3F48C7E6302A5F5E1DE5E9473B7B61CE75BEF62611EF483C9711
2EEAC83409FB480ED2A055F83D4409452D6B3AFCD6E5E5EF7BE864AADB1E3159
C5CAA44B6AE8C2B03B63DBD68DDD7FF1168F921705DBDC1A1922E972730130F1
09564AD9EBF12729F661E8E92C32A895B72266402815113AFF9DBE6C0FD5355D
FA9301926304612B52335EA0783C37AC5D5E8A4425DF51CDC9951D19A324ACA8
45F4881F3C4C82FC28C3FA9CFBAB460DFCCF7AC9866225CBB807C3D4F8C157F6
E899267AE7730EA11AF9CB23C99B0C23CE0516C869DBC3177DBDB72C8E8A8D63
B325DE5DE6E7A07491C61ECC1F4933BA16186CA445E483B2AB1F9BACECBF40B3
7DBC52908E2CA81DA91AB6474A4EF4EF84C96BB923B1EC82C494C66B19CD21A2
AB68DBF2912264EEB6C222DA82221AA8D405A9BA7BFBB5698517226C1886FE6D
4BF57175D41C396046EA296D4EFFC7A89D3EA449C597AEED2F64556161F746DD
3013BAFDA75D55DEBBFAEF64A114B323E88AE7013EC8FFCC607D7593E4A21592
49652EAE0044C7D50A22C2E13A96512BDC620E0553C7BAE7DB5844F85606BD12
72ABB083306E6E8E75D106C6DAFED28D706F2B0F5172D9107F514744A4C33295
257621CC87A34D9BF542F2A0A20A5D199B4CCF79DB336E71909B97944B38698F
8358A2EA54603883D9726B5D3471E6922416F3ADE8862766430C5B6A1510627B
E8C5883202C328F60479600AB8965BAC29A3DDE262E3C0A573140F4508F6B1F5
C11B7AFF1C466AFEC96B1D88A358C82060FCBF1AC58A2E461B76E2C8F788E723
246DC2FEEA9583AC25DCE552C3B8A705BE488B929437D95AE1D854E18C237DBB
A7499EF10CCEBBBC64936C8B7F9E9B738BAC09AC05F51658AB64813BDF1DDE17
DD0165079A599CB89E27475CEAEE6D13AD7720EB7A5490BA67F16038E7292FF8
F5DB855D7FB27BFC48D077C9492C1C04D282BA20E8D831CE8E23B0B5CD0FA07A
27BCDA94E226E39928F0012CB8376F26F88CC727D7BD9A2B7F8EF79CF80D107C
DAF7D939407F3447458369493637674DAA0817E332A21863CD0A948C828563EA
72CC9AA528752A6B760F0A03D3A2F7419BD8978AAE1D472604E515A6A130CDB6
1EE6F8E5BD0ED18244D91A67A460CEBE4CC23B33E63254A33E56EB546E30377D
EC22B1129B34418190DF9242E59BB6B84E336497000529A82260B52B723F47BA
E7855EC268A99627ADD833BC0DE7AF5191D10E88334638D240E88A95A5184E3D
A0E67E22E2B7AF42CEA9A5E649F28878DB93BB17B2B464EBF004182D1FCE8F86
A0AFC01840051667B172BDEB1A6ACA2AAB0AD7D219B5632943DE888B40245412
79AA6E392057122C366EDF86CED507A151A2C18EEBCB21EEA3C5ED5601DF64F8
42AAA086110874D2D20317931E22EF5EA4EAFB25494208240F6E8D02A571FC48
BC1C4528D85B92D57575AA4218D02564B6A3A0C9DB205CA49D251D966C2E20F5
71ABB506CCC9A33C17ADDFD200A42B6D535E4A0D38F8DF8850ACB783E4227E88
A448C7C373296BD8E7FAA34B163CFAED549CC6E2ED55B74CADA2A43657F8D579
2167A015DA67C549267299B5C30D5F41A8344E318C22ACB64ACA5A481054DAD0
C0BEEE2612F2FA6236BE962003558915ED447F6D3FBC13D8458635E848BD73A8
6B72DFFD5BFFCB2AAF892CDD1578D2EED4C1084168E4CF992615A9FEA1CB1420
77AB2272EE78FE09D3FA79EBC3EC5D6D5996E38EA72CAF8BBE51D6F7AD53FB10
155B8A6CAA5F0136DEBDD91B088C7487694A9455A23BF38873FFD07C8BD1D71C
15D00989697C5950DDD977CBDF0252115A2EDAE55E44346546589AD8040074DB
BEA21A0594ACBB277697F7FE1EE894FB20528FC901A6316C4C7B437FA971DE60
8143226DCE3549D9839B2D15A0502652C1585E58D3D8E87651EE9BA4C7E36849
2D0C106BE132B4CDA83E1839B1E5AE7A0716C9293DFB0AFC4DB927E65B2DAB10
58031A74137D07E364CD579317E78ADBE7670A0BF87CB8C1483F6903DB997EDD
12D343C149F10FEC44CFFDAF8140B04B45BD710196E6A9D4F6212A0E0C983DB5
6FE6F5ACD26AC1C6E10E569C655634FD9354EB665939C0562D6FA5DF494175AC
D33B7AB0979B1F5574173554063CB4207B65FCF5AAD087331284D8B69F7AAAE2
5E518EF9F2925385892DDFE6DF12AEBD5173705AC1AD84D7937CE6E937CEAA17
81E6638DEC399CAFE40691DABBC70A938DA4D67B0DA30F8458CE3A8B1489F30F
571AED1E68078BC842C84F6CFDEDC0824B81F1D6BBC483FB5A1627285BAC2108
C4981EE3343257F2510F5CB72BE88776C4DC4E801368BACF24317B536B5A0EA3
537FF5E578EC302A5C63F5E506FE1A4E2F088794B236A3366688DFEBF5EFAD6F
B10142BD2DDF0516C3F9C23EC66FB2CE55F5D39679F823EBAD0456D94EA05305
BF040497297E402EA65BB367376E9188823CEF2727DB6A454197A7EDCD3284E9
02B5DA2316D66FE20CA450726EEDE791790C397AFC3E129CA9B3817EFE08536C
039A1E863CC5B2D09EA3CA3C3A9A3AED4E2B1AE20C82D4B4E2964F5C6F7C63C5
5CD53CAF97918FA5B43B8C38A5BFC157DF7D1D8149CB34B89BEC94945930D196
FF75864D1F1B4BFA0124FE338320C01AEB711D1FA7B674EA391B5DE2B5D7C2BF
852D1B3E743CD14A462096118846907B45715C18921A01DFE8946348F40D2200
7A67A2C4A929DC0B63F69DF24D86778CA7D4D77742BCFC6110A8609EB711F8A2
4684354F189AEDFC1CB328C7D9383A3F0C14A24725937B7DDA36254ACAB4A8D7
332EE87506480776AA6426ABC23ADF1096031DF2E2CC48B302A6B3D30983B899
F0E34A7F1A0CECC053D869EE409F55FFFD1B813AEDF927A437E8218322806754
F0CAB1721FB1448323D9BA80B74EC6077B8641E2C66E7487EF759746CF57E816
7C3DF94069F9B9C1685FF5B3360A2B1B561EAFBCA9FF5686DA0924A9DD433772
0CB503DDA2EC4658BBDB7CC6FDA008A0737F945C63BF2CBA2B9D45623402B184
70112FC9D50F06BBE3EEDCD01223EDE33889BFE1A49202397733AF5AABF26003
C14A417D45138341F955C177E161E6CD7353168EE9ED74F2A3EDF63F423679BA
B77E34BEAA1E7BF3765355E031AA51A493574985468BDFE07748287874E7DB59
40E2B9D89A0F153D878E0F93B147544785625D248827AF5014AACB0331FAB117
1E7CC634700905B8C80358BB794F963850B275D2B04659D1D468F43FB3468971
0E3FCCEE94E280DAD9E6DC655CEE16AAF52382B9CDCB2337D1740FC14C95FDD4
419F06C45C4BEE1D5917975AA7A3375B732A2DB798005D3417868937704C5825
339BBFFDE60C8D2F5E9DD7AF88BDF1A3A692EE7737803BB37F9CC49D7AD4412B
24B49719F0661110A2222598C85AE67FFF24CEA1BF30975A575C634CA1F38D1E
D254E3FF9B19E07110FCCFBCA4C75C1FFF8BED3205E3F3744BAC30114DD82E9B
76DF3BCF4877A101C7BC94AB17F553450866486F4F810056D046D0C8BBE8B77A
9C499A304417D6C81D14B0744944EC608CC407B0EC74BDF073FC4A7EDFC328D6
4918E10478E5CCC3472B4B278682E0D0071ECBE91250C02F5A081ECEA30C5991
E9491E74853A8D697C5943ACD5E67B9046CAF7DA5F0A5E59EAA3043990C17F2E
19083FD23F8D46CC98DBD2BBB9BF0578FB13039D7B341F5624CAF4D40A7A4661
9E0D9F965DFBB8C025AB165C648A09BE02EFA8416C0A42A784610E5AED8340D4
89C39EC83CF7CDF9B97496CC79B39363B6F1BFD8B8ED94D9F2096E76F1C5F705
3BBA081156AD5743158BF96593A6A04BE90F244FA0A863C976DEB93EB9E5F796
557B9ABF2DF07D52037CCEBC535374893438837644013C483AFD3BC3C1FD828B
2FA56F6AEC395244CCC224D865BB0FD9115408A72FE20C1A1D87268A7F20B012
D099E13AF2632897DBD34D029F4947265293FD1231A69BF4D9081A0A865C5DAB
3C6CACE4EDB4E1019DC0C821DE2F69BA310ABAF715D1E7EEB88E83FDCD05C370
67D1D0DB35B3A6E5813680C85E896EA1955D24462E366FB542EB3433C0619E2B
B18B0DAB73A4250386CB61542AF305967216BD0B3081C08B3BAF4826334588D2
B41F5C96C9940943414D62462D985F8CA1DC538795731F30E2BF3D32A0BE64EB
62B6F7C59BBDBF22E0B5B1C702483E2E011E9635BD59D0E6BFDF24DFB0C42B33
365E5F3E37867331DC99D639F90CFA7314DB8ADC3DBD43439C2E3008A25DCDCA
A6D9407DA4163DA61E80015EF3EC3C68D5E409BDAECAD79833A8F61BC044731B
6DB80077E96FDC846F28ADBDD7BC0B05A4A28123917DEF2DAB9E61296286E4CD
401DD27C88A8490BE38B38CCD63AC3AFB65B26F1E4801FB67759B076F43E4AC8
9747972666F9BD1EC46A7EB55067E16D4011D85116A0DF45E52C95185B5C8BAF
BA306B42D71BE68CE74A82A2AAFE2162B5C30B0AC1A19C7CCAC085E437F5F64A
10BC277A76B137037D7B8447340E09C4699BBB7B55F54247F82C94D373E2CD87
AD735974C8B9DFF8106B214EBD7FE93CFD06E2CA9A043DA99642684586896637
47A82B6F89BD83BBF48A98CBEF7EFB484A933C1016DF95EA33BCA9F0A414140E
0A949C3559B7E43888F8ABD1F39BBC3F4BF4AAEB46939A570C8132C69C47201B
00F83C5E4AE9EC342F95494CDD63BC985E24AEDD79FD0F093FEB3B3F7ECB4328
367329E36F676F942301846A6F3C54AF5A4D60F37B7A4C3BE982FDEE76F0B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /Delta put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 56 /eight put
dup 100 /d put
dup 101 /e put
dup 102 /f put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DCC87D144CF91BCBFDE8190FC56588FC24977EBA892B99A948B0B01356
388F586D7C4B4CC1B1AD2ABFFE9D04E79A4D2621D5E33BA7F200C5D817F12DFE
AFED40651C6A5012AD0A6E2B53E8732849A2A4EB64BD1ACAB202C286449EE92A
AB11490AE79A04768A960F32ED30FEEC76B71EFFB921424564254483E202633E
932530725ECF9D29A454368B45AECD7C8749EED663680909A75AC8E5C468AB03
69D361C31826743E4F99594432892BC7B8329E15C0DBECAB857589A49DFFF5D2
FC715379BF604C60DB3BB69E55E7946CD703E272B5EACA3D0AA3DF3C92B235B6
EE5DA2490D1057AF619281A0CE437F5D9C80383840F0DE668CA7C020C5C2677B
BF1D214E7F524A4039269A8B063EC77994466AD7A99FC5B3B42F2A2A65CE330E
8051BE1D913478A757A135A631B0B64E3F5069F70375A0B3719363F95358CD7B
24E2CF9BEF524C5CBD3CC5ADDA81F3B793A339DA29E7EF1BDFC19A6789C6972F
02821D66FBE07102B7F4BDE776A26BA53B17961278EA2933ECE4B1D4C0FA4D9E
86BA47BDA84E566F78683660741193EAB37419C3E6F16C8B1F5607B4E0AE83FD
6775A9A9B81DC2A472327E2A3575E7A82A090D0E2278E3F98C7FF30357D0A01F
47AD444D0280E940A07EFDB8B91B8C8BDBA5D6219080847124982B3B01DEFAF1
A5E10814710C3EFBE913E38EAE884A574A87DA42B97AD53D6AAA39F7BD8F8732
39A2D170408D11B9E4F98AF54C85B209AFC97D5ED18515C32972645CBA218F95
2919F1193A884F8A1D7E2275AD81A9AB0F30875E69830BA052F73C48CB9DBFC3
8E6C4F6153F331D67DBD3A9094714E36B3294A763424B120E7585C9D60C1107B
550416710D60C089A8BE548E5E4858BC7453A2F11AAB80E97CEF546023CB74E6
77177C12ADC73CE8C2B7DD8C944EA0CA0AEABC37AAB78D0BD40ABF98FF27B0F9
CE7D8FDBC27C58AA432F3007F402C29BDF224BC761460A325BDF3D0617728F1A
53FF41AA3DF3D4A60197599B37471278DC4843CB3365E10BFB9B8D216486CDE1
512566A8A9DA742683D63D012175B5F3247403564E73D3CA4722F9F8A96318B9
2A4117B86ACB10A040C66DE0FF9675825EB9958EF6F72B2D23EAEB0E30251F8F
7ACB959DDF0C10AA8A8EC1202C05C19AEEDA861ACDA27B9CC31AD4FF295D8BC4
C8A26F39B2AAF68B0D238605D0FA0F3822EFA079E92C7529E60BC9C9516175BE
0FABAD6D730507F2054A3A3EB071D55B42CB93AB1149EC458C51514D22E1A144
D945621490A5252083FC8C7E75718025309313827890A5ED01008BE6ED7C4ACB
AD7CC603A14093C91B26B924F1FC9FEA692697BABC081DCF5039B41326EDF612
CF8AC32CAA0E536D9199EC765ACB6C2F270E66AD325455D21BAD65E500409517
F81498F5165A7A748D6B294AD8C246AAD000103DDAFC3C40D8B02E13755EBEB3
C6E0A48FA5298A3196196C4B80AAADDA609206C9673ECC150D6A92C05F08CB4C
8A4E8A1DEA762510DC8D703FC96A5CDF454DD369030BB122454417C9F7D90A39
FDB58B7824CAC537CF2F2A40A07AA415FD4283E51D34CD0CC310D875D45C9CA6
9A70851B565CC999A3FE1A41895F475EBCD3EDB1A574BB7925D7A9E3C58F1B3B
D7BD980B465909E980AA7CFB332E514B114D564C610BD8476546CE53D4EF1C32
3A78C5D18F40BA577D6E7185167878C860CBDD8F01AE261F45953502A7410CA0
5F50A91F8D92F999349BC5D6D7065EB8ADA81FD8C11AB5F7DD2CB9CD7BC2ECC7
84B6BD9AF183782D0A77D577AF52619DDF5F3CBA93B7E54AA9E2AD4344D7A7E5
8177B2BC9802F2F0A3F9F237DA1DAC8F01EFD3C637002626C069D435DD3180BA
C37996D8C553393E3C7428473886D513782D454C383F5A50141BFDD092EDE2F2
57B0D4B33AC6A65390B8F97BFB9EB6CD3E47AF2832EFC5A3CDF6B51D158DC57E
A03092EFE39B8824B58E2CA61EE7C2153F540BBD2BF1C1015B3EF8C6DFF7BAEA
BDBBADA50387FAA3B7C40802E1278A9C09B6F89597CE0BF4C59BE63A7884BEEE
166A7BB189FE39661591CBA4619752F3F35CA3D8F177AFCB3D650B9667C727E4
FD346C14928C14EEBBF0D508C338947A710F840CA5F2E8B3B5125B5B1C1C27C4
8C440DA4BA7C1395816F1372496FF460F8F01D4212229722CA18D30D73004682
2E2D9B3D39F67A4EDD286650001D2318CCEBB832192EF079F848EF9DF1D751F2
08A490EE94B74E25D6BA2D9661DCF7DBDC27420C7F111C4E9E4508C410FB9E7B
376AD6751BF120A9A3F0E097C5F691289167DC17A81A2C88443C22628E66F971
40AD40F7A916F80E92A8B02DDDC716AC38F139C758B934666057E81CAFC9C7E0
EB1A304A4F6C81B39B5B69FEA10EA0F7ADF5719DB359BB195AED6137B04A8DB5
B4F7F5CCE472B414132181F25E42DC46610F4F8132F27B7A53A4B1DAA816EDC0
F9044400B4DC56311602F8C94739313A03DE319F423C16BDA61A894CE22205C8
F61EE2062CBF671815C983178BDCD247EB7F655F96CFDFB71C43C2D02F469BF9
792DA24F76FC6ACADCD421554BF2DACFB440828848F72858D6CDA794358A0C58
6ECB611567A2A953997D943C9AC956CD2C216FAA9DEA2F453FBAFC86DC9FA7F7
A60CFCCC3EBC01E6C2B377CE73D11B14079A11CCA04496884847352FB7EDA939
BE715838EBF3A8F5C56A116CBA44264E0DDF118A863FE3A0B573A5042F3506AB
A1F90D81A5C93F909347D06A1FB7166FF218A8F9F1AB2537D712DDACFC6141F1
9E0757C11DA8A49C6486F71832C96E5E1665D83D8C479F5436D71406F62443CD
BD1F755EB75DD46A5289A0046D8DF3A20C2F6AFD8271F0BA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 3 /asteriskmath put
dup 6 /plusminus put
dup 13 /circlecopyrt put
dup 17 /equivalence put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 24 /similar put
dup 41 /arrowdblright put
dup 50 /element put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
dup 110 /backslash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B1491
307A6D9A2F2BA5099C8A07762E70BDAA74BA5E2BAB260C1352107EB8A96523D9
4BA3082B99772D585329AB8645C3BBD11D72BA01F95CCF11C6DEBFDAAF7F5C4D
795F99DAE6A8D59462D759001BBEBB59AB0C322EFE02904D82B424649C2FA593
0E23281DECC5AA908E54244566055D418602EEDBE78843300158908F77C0AC75
9562065826D34C38C598D8626BFED7CB672F132E065E2C27932F709935988376
94901EBAEAEC410E2B36575A71EBB8954C3A90EEC264E6115950FC91D0D54999
323D8B4FF8129A8EEC3900A00CCB026E6943BE1728BCD3F6C1BFD503D55A6A7A
6376AF4D646B2F31B1AF935446DCC68233C72AC164BB393DA250B0B423D32887
C680509C862B6F49EAEC995036CF797BC11DD87159241A7503B1FC87023766D2
E1CA46A71DA0AC40C9187A55E4EE91A8202D435A136AD3BC35F9E6591558CE1C
D5A6FE5CDAD43BEC7AAED176AC36FE9562F1D7713421990CB6F5A8DFF7AD2D5D
52433741A0D430221E045FF2ED8EBDDF2AF98EB5228E5D864441925CCF2B25B7
9D2790ED9AC57C3B85468D2FF24ABD15565E6592CF3725BC3C679FC020358255
8AF383226F5B02D2FC02738AA610AAEC3899817F9011F65EB06C971C7DC8DCC4
664A4EB1C1F2B7E7D8E6FA8E586E2F8C60B57721135DD56F9568336388F1B979
9D1725B1F1C23C676AE01DDFA4252A9AE4F8D05A2B5DCF31C1A4EC8EF8DF0F75
A95930B927B703603FCB77EEBB39AF1AC042D1403AF2EDA7DF4C0C9009D0CA18
67E999A8A852C5AD253521E1D9C19C2919C50AFC47214FD26436D9FF6A5D02D5
D9DDBF9EEEF26F19F44A34CFDD85A2593671122CEA554528C238D6F5ADB45F2E
44568E6B2575ABE08ADAFF18F8F161B30444FB153A232F92B93B5AB9E58F09A4
D00F9438FB6BEFF78D05DC79627DD9A94E6224E14EF150B93D2FFF9A6676DB5E
29734710325B177F233D992E9EA02F6C2264246F73C4D284F5C5ECCEACB0D1B2
8935FA42E5527CD07854A9C048EE45E7CF00EA85473B5F20F977896D1FF1F36C
F92454A02F441E55F5C4F367BB6476940D29E511B77752E2B6188BCB996ED978
C4EA0A6C2698A00388930574247B482CE02EBD9E3B5F858088A0E5C6BFF77D01
31F0F7CBC4B48BE00C395B661E0E4026F24570B6C8F2F209C4EF070819913A71
6CF52A46C6D3AFA85AF53728C8C22FC28C644E0A7060D50D431BB0EE87F06699
3DC8E6326398A38716BBB66D143EE335E9AC0D1185F65D3D31000D284C87D38E
AF5844AD5B5219AB753D68F9077DD86A3E0B67E7B6122DCDAF837EB22D0018C6
798D65702D94AB53F1D3EFEFEA015B22C646E70C3EF0AD1AD2E91846D59CBA71
DBC3DB1B1C56FE93A654BEFE430DD08F67496E8CC69BC62F01354DAF94824593
05BB59883B9A6C344E8E51ECF7EB0B1012CCB4C591995C88A5C7E69047C4C30F
71A47C7561051B3DD0A7FB52CCB29ADB159FB72B72CEF4DC1C62C8D548B4FBFB
555E149AB01AA1D072D0F7C2004890C8B64B1A724941B14C95E3C167B29749B4
9E74A54152E1DB348D0F136A7CB12AEFB9137816202BACE89568B2CCB2206FE4
4922178AF6C4F8B7122195D7674A7EB5A3EC94F3B7AE1AD34575ADEEE5438A51
FDB0BB89D22EA0358BC18D70CF82BF167C915E0D326A184ABDDE7A1AE2456F0C
4A53ACEEA9D4D687812F92CD2FDE658D1C738354C87991EEE309795D60523BC0
392B050B4036933C551193993DDE9BD76DB40B8F803E0CB46E579C1130AE2A42
2D0FC989ADC6A246649415C0F501BA8DD225262BF82C9974B20A32B127F3EA6A
9B4B7396A6B8AEBBA02767185CDC7D547710673122129CAC1B46EEF0A973AC24
6EE921A8CF5D047819E4D77B6FB583DE2C2B27CC4E15C57FF5F25AAB7D457910
E81A58D58AA9F2CA873C51BDAA4C0D617FCFBCA261F34BE1D0B64C4819B6B2A8
F3CF109D862BB000060F40C0F39CEEB4C75B67534C83BFA9CA9DBA17BCFC3912
CD7E7AD57F522997536C40C97A1EEF3BD5FADF6A8784870053B62AB5703B85F0
429448A93AF90A5834D22F1748461FD7E2AD5CAF4393CE4328C9CB6C3FFB5C4B
56B45C48AF4536CBC73DC93DC44E47DCF15BF475874F0D63A387C3960495A579
1C672EDBE1AE6FBB668E6FE7695EDBCB63E53D75FD4128EFC7F0CE1487209BCA
6CE133A248A4A5D28EA1A614549386527E844562D0F60DBB312CADDC41135360
752FA0D824B5690522B8E5F3CF00B9928EED18B110E2F23380B8288033B91B25
3AAADEF2486B15DB3A9C3EBBB1E4AD314C1F85ED70E4C7E615B95FCDD115C52A
50938D10936A1215925EF569F0965A35699E84DAD26E1083B9CCC8ECFC837881
9E19BC4C84CB3F6BC2EC80C8CFCA5BDDE76A0E2FA2964B1FFD54AB96E924FF8B
DA06CFB1E1AEAB610A191084BA61D3758680937D98D8AD03A6C19C3C5D88AAC1
386E0D81E46EBE9B92C3E9805662DCFBE5FEABAEB2B6E37DBA78C097C100C957
4CA17B47BA546787E3F824D4D97154FC956AE2EA1990E5255A464834ADF3C15D
8BB318381E9F94A07CBE69ACF2A56C1D167AE82AB12FC0A02194E42B349B1D2A
61172CAF185F96019BCCC815D4E2560D4992FC6128FB856A16BA026B89C6FA75
D21E0513876D616A0E03677A7D7531E1ACA944C508B8B2D0D59B5D305F7203A0
AC3F9E885AFC27DB2F58957DA54494BCF1E384C0F1ED7DDB929C562A0B13ACFF
4765FC9668213761FAB00471ECDA751ECD6647A75E3A00D997A1F5EA0884F392
8846B00C70EBFFF3D1DC215E6F517AA0CB991D539A8A368389E562A9325D31DF
D526E1F2C24BE7572593DC4A208F97F5EC11D0E5253827FED2666141D908CF17
9400B89D5B06A9DAACEC5283AA451F666C9BC6DE8DD44FFDC6824AD0D9EEA03D
2FCA68BA3162960373E6C22BD6DCED3049EE421C6F307C5B4C9395BDDD2091B7
59A5659E541530F490DACE8825B66B17396B8E15D9FDDAE616C8186F1C5D43DD
167929BD8CCCDDDA6D9B43999B0C10EC393534C4434BCED1E12DE25FAFF4A308
2A143674CB53FA79B2DE95274BA6205B5C198BD5D4EDF78E23D8C68A752B85C9
44BDB7A6356056BE75362FF4911EED1656F976B4D53796CA45AA948E0282EDFA
5047C53A4369978472107F67846862BE9376B6BB38C9AF59940C623338314BF5
448297B3E102E0D42C95B2722760D95D888E6B3170B7E4FC8490D2F0869FAB01
ABA9B7B518BD528B3C58E8B740E0C2F8AEFB94F2E994C8D8DE151BC5AE9B32E1
61CC10A9C827A0078EF992DDE1AE9DCB74B4F958BC0BE500421B58D7AA4FA160
185ABFC8D952491BAC263543A53BF9637FD695A1D573D179AD2291070C9CDEE1
836A7EEACAFABA963BF3DC5786F205DE83BAEBA786EB90D17B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 3 /asteriskmath put
dup 6 /plusminus put
dup 7 /minusplus put
dup 48 /prime put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF42981DBF30908C060B15F4F00DD318311BEF03E77C85D957AA6AE0FE86DF1
3E7C83439A6BFB9B90D8383270D42CB67F8E8CFA9F2F4EB718886E4FF6A9106E
E1B30387D1AFD9AE0FB988C4A2447C8308E59F86C7A1EF5CF687BC299D5A6FA4
865BB4233D51C99ADDF88E7965D04B09766859324C0AB9247EE5FBBB005A6CB1
AD69A9A97282045C605F5CBA7D2418075DFBF4D1506D9CC31BA588E7747B8E71
5698C4CCA7D22C186888E3B873DF61F87198F3B2424497D542C0EAEDEF38C3BE
02571B9684D8855A6EBFDB9306D86BFAA8EDC4050B2A0CD80309AAB1DB1B5EF8
0D4DBB2E9C1F17B66E194EB5819BF5D1319C38727CF1B68789904761AA8591FD
08FCC6D5B7D160DCA4650AC44009A0A11ED5AB62129A525657F40C30651B45BE
2F4603E6B84691BBA9BA634C20B490E52929D4A3BDCF4E23F20DD8030B864ABD
88860796FFA8024B05C5C2351EEED8371CBD5AC49CFA453BB3755FE219115417
D968F7BA1DEF8D71D743E6E4CA1CA2BE4B32E608E2D4ECCC7DE6D2ED1D5C4F1D
A5309A0E4E6BB7BD92492572A54DBFB1C48A04EE8CD44975045E49C29BA23405
490E40C20DB60B0F5F5185A706F519AE26FBF95809BE7A2251170C28025A4DF7
849CC2F8267251C39C3F04BC67C7FAA328383ED75519BC5ADA18DCE35203C375
5FD749EFC82E808B9F233462B778D4C89776571C630DA055F2DD02B242E324C9
F11F6809727EE28AEF14CAFC8E550BB4700A63F5A8946421AE684E5C3292CC39
176E9F7B3ACC6416C0ED3782A15BFFD660069538746DD03F4F6EACF63FC4152F
06CAA207FF7FA71464677BB235B64DC013C7D2FA55A41A7BC38EFF6CFEA1A190
D6A9443EDA712E58DEE5A8381BD43B1028B2C32DE0E25FCB828D9290E173CC8F
CF28B98839C7AF981E87CBF21767DC42F325AB7045951A1276D44525204C2B26
09EFE26FAC8DD9D7B219CD74706BCB351CBEB11BD6D646C24E9BED5C79D11C5D
58F8104E27668D8D79557EB2E6B6006EF6BD12DA2AB679A19074793ED6DE5E1C
1EEB05557DBDEFC5DDA612B4A62BA27FCE8098F64D184631A55F75992FC97D00
49B83FEA54488DFAD4D8BB652A23D6351C719A6F60BED3EDA019115F0BE25B6A
2AC043A40B9FBFA7EBB25BE00DC8729B434839C4AB599833C5D89AEEDEEE6D3E
E552E714E5016EB22700368B4595
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 13 /gamma put
dup 22 /mu put
dup 23 /nu put
dup 24 /xi put
dup 26 /rho put
dup 32 /psi put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 64 /partialdiff put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 100 /d put
dup 102 /f put
dup 106 /j put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 126 /vector put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709013933E3B325C8685C61
048660562D70CC0055BA8777786CCD161049903DF61A5AF6DBFB02668AC5DE57
3D52C3FA13DBD74DE4AB848DDC5DF11DA16E7AE728A1B19B8832EFAAAD7263D8
DD78BB34C58DC2439747CC82B1937B920E8500DEF5293C01896B10A6DA71A168
4F6DE6DDB7E2910A0D9226ABDCDA689F20A867450D5C57181D23CE3779136295
0FB6833E98F45B76D98F7F115A67578C90CE30A316B3A041849901838D0A12D4
7F8BCF5CC5768C0AB33CE1B23EBD4E3C802D8BEA7EEBE241E7C7DA1E4135D3DC
6951F6431DE0F8FEB63386FF69EA3D1B3D050D4F4FCF722503A45CCCBE989F25
3C9173CE63FA22D38E3EE34254B743E266677D3E083E46B8C1DC654472AFDA72
B606A8923D766CA631EE7A4E09E690D33ED76B14F692FB22F192D190319D7561
B43F3859F3821264DA5AA9E03C2096BA5A85BB72F484E5CF75E9DC90FD8D2DAD
093706EDE4331297D57481CB67C54299E6EC7F3B3E52F666261362D67774293F
14F28ADE6DA25E3D41EB99633FBDF45F10B7D1AD6FF6A6A2D65DF9F64924357C
9623C5E47270675DBF3F913F8098E22CB56EF8713FC0160FA3AEA099002BEE8F
C602BBD6EDEE6FD11924A784B63EA0CB7C9786C3BE9F3808FC75BBF201A290A8
448B9CAFFA4BC15B304C7446A71A59F056B37F07C97A4455E492C6839B85A90C
23F82AFFB57F980486A9A1097F300EF1212A5129AB2E71A46C3AA6D9B5935484
45E2423C73FBF82E9961A7926D1A05FDB24365FA46627EADDC9F2827BAC12E0E
45B310AD8C11FEBBCDE72EADA68F6A0DDC1BF80268E5088BDBE5E056BBD10516
7CEBEC6582937749AFE68A7B6BAAB1E8DC347AD6CEB362007A28C7FD516B1A9B
E2D0D207C80CFD0BDA3BD897156E72985C4E6BD2E7C6A96DC29BDE63C7E42AF8
8FA2A7B54BF0E68323C210385FD72FDE4D52BF0687ADF56193C9D6D357122AAA
06C55A90405D5E1F7E2767D31E5008CC54BA8B86EAFE46108547E7627EC85568
45CF97062549BF859A34ECDE8AF4FDE70A79458A5C88DA8147804B50CD957DE5
C2AE9D179B2CF445F348D19317A058A4FCC154CEEC13E60A53EC9EB4B18A0156
C0BEDED15F61347BAC398E85217D325C8DE6CB2D027682042A7F90731D9C05F5
060AB617859A338B4394A320152322DDBB92296E71E8B68AC25834AB45050FC4
13A50371008CE728073F982C9EC093D773FF918AD2633B3915472323D1D10CFD
F77D301680CB83F957ABBA3F8F446210484C1AF9661B74B34E5EC0D7D5EE50EF
F90B8F502FD9020C9C6D8A7B03417A24C0489BE85952A6776CA88C806DDA31F0
28201A9E9B87F2B03692C75CF5492D88F2CBBB332B70CFD76669DBD8FA9A0CFC
2D221EE4C0BAF1C49F2B4D4CF254A093582A6625A0A490C4C0D6C3E0DB490681
DC2416C0D3B450D864B6B348A03FBCCED9B58B70956C44C14DD326118A53C451
B92A482534A58D7FC0819F73526A526839B597386E75A8CEC7849C310B1F785B
9DDAEBCE49A7540DA3F064922470D0019C4BC5535B2BBE6757B9B210F18690B2
1F869AB3001043656F2DFC0EDBCC7C2398E4787F9014942319CB25CEF6C40191
B24E20E69945CF519F9FB684EA11A65DE4DA0CE80445FD908FF01C75054235CB
5A713FDF7465DA56D33193DAF1B8120F0FA04F533121A5F23D4DCDB6790BBD93
4C0C8D10A93430C7FFDA861D12F5BA8990633918F52817AF8365E5B52CCA3140
9B826D5834ED552DD7293D1D3F83A2889BB0DE1E2E0D0646A3CB0E5628BF6C8D
599DF7F52C4500CDDF5BACCB90673A73051FEBABDEEB2528B82697B96B8E4D4D
6DE09E0ACD2F00DDE25D97C65B08A8714BCA85FE11E8B61E2D46440A38083B9C
B492F881A8ACD5910F0675F6848BC8D4E9792F2984F1E0856D6433253D3165DC
740B8FF333791EA89B9173E4A779F56ED9D3947EC669D91BF2C2047FE8156FDC
BCB29E7310A0A59D29FAF0D656F968C9DE24B332CD14F8CEE7025F3EE8F02707
4C783009BC044006265A0B96B215A26CE49202F6F6C8A71E3F48D1EA6DB2466C
F24355CDA69A9FEE8FBDD49AD46571D34ACD5235E39879C01FC3387576D9FBF9
6A1C9F3CFB08D0A2778771850237189ADC89E733AFD301565E9BCF4C0D6D5838
63A80627A19844BA2DD7B436A3CF8A01CF6012EE8C17CEEB7813CD05C6D5EEDF
E01CEDC7BC9522A11435128C15C5C2F7CBC7F14ADC348B1150E3F65AFC61C192
2FF0CBF43406D81C9C2E4A7DF980615EC72C940A64D1CC2CEA060372C9010905
77887F0EC3086275351BA936C52AE6524841A125A238B1816A682849808BE6BA
07BAC12B64519EF42C6A40210A37AD239B71303042661320B9EC43E6635FF4AC
05ED8C6936BA2FECA2076ADE61AA9131D0418857EE25A8DD72D0B78347BECEE0
3515246CE30100443FF160201541F836C15737AF7219F324508C2E4B61539B6C
1E5362B2A9D2FFA90940723F5385DE26BA4E0A86B4C12DFBE2543331215757E9
20139132F19D8D66D7EF0CC841A91A7D4A948CCE605F11AD5BDB57B65244DEEE
662B85535DBC891C20D512B8585E04894C48967CA6A7C340DE8FC2EFE35ACFFD
F712004AF3898B7A85B1AEF77F8FD0B67A3D19264B9205240BEDB1B049B4BB46
FE48CA24FE1C2E078CC5B5F20654B509502D3944B0D5892F3C2912E2C698E51F
5C572C1C2DF0F35E2C05E143C655DEF40C7FA40791289E95E86591A7775F9435
BE654457BC62882E2E474E3C6960A4947649C6A692A470E4780B8A975A789719
0E1E38CA4287C29D92B14E700A4FE90DC2BC9041463CC3E3C841E275A1D13F59
23B437B71610C65A5F5471660F2F5C324AB82418F777F4530A6FA5568796BE14
E0205EEEE877AC6983C41A35C87A8CF5C041E63079E8E1E16C55A3F78CFECC05
612AED9F90744FA78E151F59CBEA20CF274BF2EA0DD930AF6592DD8469F0A5EC
DE3F337EF1EA67F2B2080412704075A0874C08B02E8BEAB72E54106B2B6ECE0F
8F1937214062CD7E73E8678B0F9092E42F0B398899CB138DA71A2EF0DFF2D5E8
7D2D07D0A7081E6AAAA5FE7B76ED75C396573C0A509A19D4AAEE3B2F2A5B45EA
C1C5DC405626738053465ADCCF6F062D2DDF1D13334BEF6AEF73C0545194DB20
4AA3E31E2DDD52D0C372546968A0FC4674FF0A28829AABC4A240BA82EC955CFF
7644D69A0F5D4CC919ACE446909B1EA55564077780AFE4093D631429DA72F5EE
E8117634285BAF6899D98C6066B310E605893D07EB925319B847A40EA677E46A
B43FF2E93D0F7F0C3D3A2100144F7DC2EAB823B35F2996BACEF57B8675B80234
0054E091A0829E7E7A6DED8AC994D551F558A8272FC773311452B4D3EFD35254
9BA5029BA75EB3C499C0DE46E4D6F57898566CD04DC0E1FC7B37CA0EBAE5041F
14AB327FDD59ABF4B8D543D4C015CF5EFBD474709D0709D1A23C1CDFBB6D7532
1CCD47652D725D71C3C2DDBEC81AC8FFB728B30FF52A7809C9E705428627445C
8845B2AA8461018F35AC68794496AD0DB45C8D17A2B178F1167CC6CB4AFA2727
C57CF21C16C0B6017763BA1560D8DE2A5C04D59B29D04B95EC2B5E0619B6A30C
E4157E3C8BBB98E7F4FF8AA109F9E2944388626975168C3E7B1282B56A3C3547
F438AC8A4358E846A006F400DA53B65B89355BB312C3AB9FBAFC976AA10CBDCD
9AA634E167B06E0309303B35C7DBA4ED7CB40B0D927FD311267BB391CEA915E8
D16179A5BA825F0E694ABD997AC882A25C6643E52CAE58D26A7BA88BC82C5FBA
7B4BC1F5878C3B1E40FEC21DF33EF7B96E65CEC517DB4E7BFFF11A0ADDCBC4E4
D49899636652EE78A310832DFD60F20719768D36D676709B40B224B7F475934E
56CC58E89D33DC9662267E24EC8648B25748B8750463B30C12892766C24BADF0
6253A6E56AF2D6D22D0CA3130E229B74A3626E24F9D54D68CE1B8C2022005C56
3A669C20CCC82BBCA57CCB7F61F144234C47472F86B45118041B16F5CE2FEEA7
C06555F0E1956F7E5870B582598BF57E0B06AC9C58D64462DF39C5B90F045AED
EB65F5C249BE94DE7C01ED2F95393BD53B6034BDEBB0D20689F183010DF69345
A6CC789B2F615FEE2CD1014C4B84F7E59D6FC956D1FEBF4424B251FC22BF9518
865EB72E60807A8708F664AAB9DBE331D225B89200BE3D98FAD21E646D27B53C
AB4E2FBD271BF079C25039591869150A45BB6F944F46A72E4F8CE44759CC70A9
495CA6B6E12228193BA2F7E42A53738C7309DE73F4D74AE889624530C363ABBF
D0AE8DDECB933D43C11A4FDA5CC0065629A0898ADD38DA9D2ADC09A93455E644
38C3A0AC9FC611217C0A5290B15B504FC628FEFD7A7DE0027F24ADD5DCA3EB81
D1A473A40A3EDF8BF0C8C899BD9AA1623CE1179598EC3ADD4457C3ECFBA44069
D55C64795AE5CEF1F17CD0087D47A7B16EB6BEE4F34C78F00B793520CA3D5344
FD8C20BAA0D051FB976F0D9294AEB80724BE11D673C5DDA75AD3835FDF8F74AE
D88DD85D0AFAFF0687C7FB111AA0A33C6A09DED74EBA55729DFE0B905421FDF0
2E91A1DAACD55AABD3A78E7976BD55FC7DCC6DBEDED423120AB074929F398A53
E62771E44B2D4E1ABF3C1F9A6A55D407D9072081F947A123D4E0D3DD7DB02610
F3DA380EB9B5BDFEA0DD580EED35D020E8690D96080BC8A4AB462B626564599C
5E1E05E322E88FEB908AFFDE7768C5325CE2EFB9334731307BA6B5FD52229EE3
19F14A338091F63E53A7F14EF441D717A0F39800410E5894FC101799AA1BF66F
2D1BDFC4688F56A75892F414ABCA46ECF6896C1E5C8029A3FE3DCE0C346C4A21
82D9DCCA5473C776CD4B60DC37CC88FAEEE4E0BBA55D5CC746BED0A91EBA99C7
A71CE5ED05DFD34EEC713ACD8AB07F3840D032EB59CFECD9B12B67D12B810C75
94ED4D70192F007DE423824D715C97DB943E474B6BF1C48A4BD80183632D3662
42DB2233B50B98C760870025F74242D3378304F55765501EF88E350198CAF016
1C7EE80B0A2E526CF944D4C8E2489E6C514199CC172A1589ABC8C71DADDDE38B
60EEF4A6C956AEFF7BF16AEA5C0E64D2D7CB659B7ED382F39DD36893EC034A97
BB1EA0528B53D9B4617897CFE3C86713A54562471D35078359770B4AF75DAB72
403E9BD69EE6C42F51B4F0968AAEA668ECB0F485A78CEB0A3ECCF575ACEFC8EA
1858C831B3A79EF150A53D521A7BE2EF1D993FD3CD6FDB30B6D34649A70E8232
EF54586032D4C666DEA56C5F799B145AB87D927C59E13815340AD05B5FADDF0B
47CA6656BAE85ECD5A7AD9249B2C7344563C8019905FB524264571E373A94D49
5CFCDC046F3F2E58E204263C0C9A828B7310E0800093D4A6F342C305F6AB536F
3BE75077B71C03779F1423C5B30A867A824A3BEDBD9F71DF77D5F192F0BB1958
4ED6F5AA415E346547D8B1757AA481F7C5667D98DD67BE774AF079A952628304
B9BF4CF56A8CE7A90932FB493A5EFC745BAC65137BADE57780199A193CD55FD6
BC03CE3D37752BC66324FB0E9D91E00B9B629FE22FD45086F515FD6A6D560E01
A8691DC01DC402044FBE259BB7DE11175501D6F915A18E76B85E61303F147E5E
DA80F22C70BE2E9171536E0A99558F686E5CF7E0E7019FDF87808A79557DB983
75BC3BB1986C10F0FE6BE4CA48350EE0B28D2598D18E5794734D97E1333F3CAC
3416B2C0435EE768F026465E5C53EB4F44F28625CD4FF67184CD52267D7C9ED6
E6449BF26B93FFDA755A030D5E62E7A8F8BB0BAAFA9CAF97947BD98F35E560A1
2EEBC34559AD29BC5126A35F9F97CAC04049874F2F30EBD40C7BECE058D2847F
50B32BF39432235AA3CE07675ACBEABDCA4EC26312BFB1310B733141A69275C1
6552883EEB6FBC655C9F89DD8280929553ABF27823B242387115EABC04E54A6A
2F142D69B73B70C3CC2E1C4956AC956505C47AADC28A1AB6C3B31D030F540A14
81B160D282110D4C65FF777A56EAABE7582F7E941E91821735ACA2C583C6C913
595687097EFC9AD82595D79B79A9E6B81641BE9A5A4A89CDDEF45B406BC6D58B
107FFFDFE2B33E23606EA843A0F0A561673C5DCADD1B30771164BC6F167A569C
0DEB8F885863C1C0B88B888D68F1BDE4415949D2FF550962674ACB34635FBC02
C3AEEACDED509A53E387B27640006438E95E2E182137189387A1829B0096323B
F53D234FE62812C8D5F757D0AB6530A7D5499664A5D3C6F3D06E4DB245356118
A85BAFEDBC7111032844CB9AEBF0E7BAD09EB97AEF6DDD0B54928AC17CB8AA7B
D7CB9FE3AC8558A28827CE2EFA11A9FC5C002A38ED3F22C3E6D889960565C8BB
F53E6B409EAF3C13ECDBB538B79D079DBBAAB3E4A3D7E80B5954324A1A98E274
3D0B223A460BA04BDAE851B0D3158C2B35D4789AD0326F0A782A9DFCBC99D21D
362AA40D751B19C201FD16055119AE1F3F9E06D3FAD451B9C70AAAEB45CAA5DE
6079D49B1C13C48E7CABB1C95784607F59D98F34402AF08D3CE84CB3C1DFCF28
FB7B794D095D8BB0261A83F6A4AD799C419A5F59C8AD32CB88326B3418D3F2DB
816E2E69292BF3703578CCE7F2CD299BCEA871C557566DA6D309AAF468631A12
3043245F64D1C03CB611B2047EB7420DE281358406FDDEBA3B08D1AFD64A46E5
51CB660A891999483A346BFCA35C7BD763C29F365A804EDB4F1A86CBE1D46F7E
FF51CEC040593625EA35DADBA3062B29C33C7496A4CB8AFFC7F128803C370421
0D34C9A261CF01D8FC0D1B83CB08FC63A1A5FEA1F97DF225678161AE7D2EAABD
5D054993108E3A28AD8839EB854BE550341FD8A4490797597738798671B7E05D
BA8510E70C4CFD6B3C1DBECF3829401B83BDF8CB3E201D4A4078DD6635CCB1B3
1E6D549B3BB9BEDD4294BADB26638221CC01BB30F4A6EED2A4D397D2B7A23CF7
48890D8A84D6C5FDCDECABE30FE2A2189DBB460867F21AA885A380CD6FFA891F
9627CB7ECB6ED289778DA891436BD9545F513176F3DEDFB47DECFD3306EA0533
1B3F4437E6298304CA58E2D4AD3104B4412D1280010BA661C06FD16BFD5E5684
D97367BBD45196C622D281E8A36A1CAD3D0F877A9DF0B7602CCF68D551874B55
F4237D147A379C6081629D72E151CD96942F59306F653E3017E971B81834383D
132149E243E1014C390E95BCEC2CB6D6AC541D0F98A40C76320B77C1E099AC7E
E8CC94D5596272C1139C098C3512FD89FD8DFE7DE42803BB6160CB5A339DEDFE
7281847A3B5734ED843F3AA4011BC9726CB7E9081C5FD6B2033654DAAAB77381
D2ED08991DFD46CA60BA9F407B94877064B0B1A49872CA38507B3954C9A8D16F
8726C87843762A93E210E191BD9375225E935E2696E2CD43581574437A4EB3D9
E0C2CA7504F6BBF895464D790D1232E44E6A899792227EC4E047EE4536BFB51C
F63A363B8F5DBD42617F924ACD5F9AC00C2672B25A84C32467C3A0AFDC4AADCA
8C77F99E0138DCA92DF36587BDD2A81F9A4BA0C3C3659B345447201BDC55D121
B82C43A63A92BE8F2FF77A2E24BFB6452AE1CDBED653F730852BAFB27FA9E4BA
35E9BFC25271BB7A93E3F600CEA0C451721CC36E74223A94A76503ADB092F97F
89B98E19F36AC793F7F90117234F5D6CB88DC46B65EE950BB53821FB15FDF5DD
80E5AD608C073B7CBFCFCF3EF1E3F8D620E31921ABE5F0EE1611A760DF86CB82
C25123E781C82C1E1B1171109948CC3B7247E2CA2F5C1E03ED372F72E3107EBE
668A63303D812EE7132B24C748A9E7358C22FBDAA49CA80926EB11C38D64D542
D4C2837B47A41E5C539D27B873F7DA5855096806039CC7EEE4A50F4FD74A74AE
302DA09A6E7648B8602430CFED98C91E17CEBCBA832237A38F73B4526A99BE7E
F4345D2EA1CB156626C9F2594557631E783BA30FBEB22BFE17FDF447E4602870
2A77AE7B0712401C33B57651E9C67DA5CCAE512FFEFBE612C8F2A7DA397E1AAC
9AA9F644A37F0A6CA0ADB1C84133B878F291CBE454A860E3D43AA6108190BA76
ECCC2C98BA58BD75DA6CF0B632396DCBCBCBF67594A6FC36F5564FB58E08C059
F338BED21E3BDDA2A21B5F301138ECBC8AA221C5055A0A3AF5DE40095FED76B2
388C6DAFFDE1F343EBD7CFBFBD11DB908EE3D1F008924C260A7E6208EEDE73B6
A1E54FF7A5420DD57A539C91F3FD1AFB8E8DAAC21012403FF0E7F86D998F1B73
6FACA284E7BA0F0587C462415D23D8490407BDFFC8535FBD575D3104E7144F8E
435F4EE783C806BF5094F9BD532873FB39C6CA9AA16543E0BEFF1FE7CCC963ED
3254FEDE865C85F952BAB9DD4EAEEA92D97AAF2FFCC709D2C1381FE66D158520
F9DBFB084BA49D51D767A90CB95D90307CE32B057822B070A01B1932C7D2EFD3
C282B5EACCC06647522BDBE0A21FF0BD74C24CE66503E4D09FECFC60D219F9C6
E32B4A3D7A642A63F8C28649EC216E4CCFE2FE7E74B3705129C52FE58D58DE8D
1284F1DD3D3A1E7ED6B222E38216FA665EDEA9FF5FF38DF01406E540ED109BB6
46776563D467743D5BE9AFD07BF77E4C25040B922B2EC701813EDEAF9E0014EB
162A0607325E230D22DE1DFB75103F1AA53261CBD28F9572C0FBC4221D91D975
2492194EAFF7F093FCD10A02D12F4D5414128D8C2B6F0E4A8AF99D568D72BCD6
34F7F56A3C2CD3E825BB7195A2CC264CE8AA977C10AF4AA7C334C76F0886EEA9
868F742920119DD7623B3BC6A2967BC611E1A097E28DE106463DA29D3A15C8E5
10B6B46C3C9CC9114266D2BE9C719E5F565314D5C24EAAFA16B66E63B7649C58
14C74DEDA56CF812054B1E655C614D935156A51DFED90FB36617FB14FC815973
1167646BD5988231347EE2EFC664F784FD7396C8C4BA18567AD1A0DA11166F1F
2F4F3DD055BF63278B910D666EF712C46CC59EBF036F2C5A00EB1367F11E285F
D50101F4C301894CD2F69B4CB22412EDC8B84DE9954E7372C894697E8FF0FEF5
9469772775D86CEF03070DFA17F08C6A142E764C06769118C7BFB4F1833F1090
051879D68EC1B0CB7674B54C0C7BA78CB940CB6762B8D5DB2776ACF37CBD32E8
2E38212A8DDEAFE06FE0491BD218EBE5BB9FC6F442861CBEE32E655C79E86C25
AD91B99BC9B7EB8E0603CCFEF0B942E218181691F47951344B2C8FAF5BD45075
F910021F3924899D29E13CED2B20A1260DA841D060927E4378856A1E5F056E6B
7F65A9E79BA2677B03BA6C58F33F3E5C08AA9F4BA2DA9947E4707329ED48DAFC
13FBE8F90AD806CFBC4A9E868E6F29C45534EB6AED33D7D57DD969898CB1936E
49B7052503E617D7529D6422E316725021F052B85E587C8098B7310A3DD57B13
7EFEB9BF8E319D460EF0FE3D8A6E6833317F55C514151C1284F3AD6508CB7857
F5B15FA11FD20DD4FBB55D3F98B898A803356D0F8A860192335AA37F914D2B64
EEF37CA320308D010E6AA9F82CED0DBDB0747EE69F1FC44E68082A0CEECDB1E9
F41F33066B79A8E17CB0B4F6644B8A12A7FDCCC7257B889B7BDF34B28497B66A
03E49D3FBABEA6248516E4F9766B254F0F2E1901273DDAF7DE81CB563667EB5D
C49F0F9190F8AAD59C69A88C97B8B03107D6ECD368C5400CB6DF69C62CA3D796
B7078B4633EADF40AD61BC07678662F4EF2215B5C402F4C165004C50113E31C6
C2400E5680E889DC61396D8138022583389904158E28FAC3525AE8898761BADF
CD187616D47ED1DFCEB6409DFA273CE4FE4CE8EE25E5B0D34CCC627FD5CAB71A
6F3CC3DA7751B49790E92E0363F0B5A70B1AEA99B036E85435ED4779739D6413
4A3780F34AFA62175D9F1B0FFD6C6D1408C17CF542A016A02BC4328550ADCED6
E3B1AB40976225981BBB9BDA42A4B6D11CE4D736561C99950BA80B35A46AB8F7
138C77CDB0FED89DD66E62BBF89CCCFFC6964B374896424422A2C1DFA82D776E
CAA0D4A8EA89856E9F249949E5B03BFB9C2B6313E83E90017D9945032C97FEB0
608E949F262ECCE6317B51CB137FB177306F8E6F6785992730AF9923BF6C28EF
7BB1D8EA57238939527CA188AB19901F67E4C80945FD400394071106E7CC3033
5462D82751425330A73D8F1CA1BA433E06F74E70DB07312C4E7EDE7B60A97606
62733116DC0FB864B4EBCC0BB01838560C9514E9BE0D78E26E0A5161E1619627
7389B0056605187194632D1E61388F07E5F154EF7CB9AACE1676BF8B5EFBBD73
8D72D16588E4CFC8C665EE5E1AF238D5A20C0116F4CC91E8E0391926A9258C87
FED80E28DECA283D3AF3C7A480DA7B9471BBA9F33D2476396BC37EA1C4024957
90A82EA99D070C4D00FB62ABAD76D67DA4088C4B089C572F6A87D80F6BEC4AAA
D68C6BDB6B5A8AA151AB62B1650F67EDAD49CAC2DE70AD802E030BB706DCECCB
E57880BBE7F876A51B085E6278CBF16F57CE561C897FC7DBE0F6DE36A9BE39D7
F055AFD6B4BFAD96BB58C3A2F12577B78C6F9D11EA8B54CAB64B3D4149018BC2
46D807DE7694BF86B642530166ED03E35924603F39628A030C2DD13307053A64
02D4F08E25AEC9F02A913969DB28A72824D16AA50CC8E9CABB2D275D47E11338
C1BF8A2A9A459D050F8E02C29E14282D310408FCA77A6E0E7056C847305F06CA
6FCC651635F10EFECB2B1134E388B75FCE998B67C5D4A60F742D98BEDEBD2737
E9D7200FF7F0A50F4D36F7CDCB1F831485C0F542CF07F90322153AB11F1470E7
C9B3E78B8CD1959061CE0D33B1D59B621BCBB5841E0E8A576BDCD2D3A64FF240
A409C705284353C858089F156DC8E8D1F1C9F7972AEC9D826760F6EDDAF0E5F2
31C589FFCD5B1CF971B685597E711AF5FCD5F3AF6B539CFCEC483C886E39C0DF
CE6FF947339AC2FE93D310CF9FA7B28ADD2C4A0323066B55FF0EC9BF7AB97ED6
82DC16474C144B7098E0F2A3DFD72A499FEEC59000B181F5648E71C5E1EB4A20
D323096D722B8990DA0AE0A759AC2C1CB45E7F0169C486F7B227380B8B24A60E
58F2EB2A5BB0173F4480353C84819B0807DDD2717CD20678AA2B3D16B0469B09
B72DA723E4969DEDB2D0C1457449251E4B068D96811E8ED43920761140769D9D
94D971DFE8036DC4A69998232DB3C7270B8E670E5CA902D234C930BA0B99655C
27EDCFEE4FFB9C26DD7A39292C36571FED5E140D0070D3DBF7397225170B0F60
BC68F51EE434EBCB79686E71D2E1C2875F4D6B2C1EA531FD5E300D7432CD2755
0414C9774F699C4A5F4FC9BBC41AA033897F4CC7D4406A69B1DB819BAC981E87
8146BDC8347A578E4B104ADC687A3D4B55CF190459E0B4FB211986FC442B79BB
9E5C581AC627DD9FBFAE72D7EA64A8C1B6FCD5048E549C1401977F14D5C97D70
72AB8712F3A3D1502892FB60065862B86A698C78CF469E30B54ACCCA0F5B97EF
F0B5771CC897375DCA8A0110848A02EEEA5112EAE0488C14CADF2FF46702DBB7
F6181D85F9690A19DDA2F3796EC9BE7830BCBCD27699605164CA82F5EDBD0B72
F4CFEE80C5D132C07609ABA48B398B1EEB5F03FDB5135F0A9817A2705F5755F0
19E3F1980E8021B4256993E1EE8CAF4BCFF19F4BED4BED7A87E1C990EFED2BF2
A906FCC313C1B434B9973B99F77AA4A4175947C020CC7AE1514411B278C46722
5E3561A31A09EE8933017DF3BC1BCD74061C8BECA5849CBECA629E77197C4EAE
46689C7F66E1F8390A256E4BD0FACD4AAD505EADBE80659415D193CD8AB0587F
5BBE849067621974527FD2E8CD9D8CD4CDEF99D0C78EEC7AB64014B301C5B215
7C0D9A7EEEA6336205AE2C2BFC940D2EEDEC896200175D65A14F58D55BF5313A
FB79EA1A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 38 /ampersand put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27D78FA90FBE923D372C680C87B
7F0E702B8FECBE0CBCB087ADD6D28549FE707FCB616448B0D94CBDC404915943
66539B177D5940370C2035D0FEBB3A3C666ADCEB45F5B15DEA729BF86BBCC309
0294FF267657EEA805DD28DF5DAA86183775FC3D05912FD822E18ADB4169B394
A31DC26F942C5E89DF8851474673265AF4D38B638AB1B7E20B916D12DBE565E7
C5ED4C0E5589722173287CCAAD11F956F2D88CD06C032D8CD85C96FBEF695E28
2F12FDBF4180ADB0642AD5B49B32762965D8683079122D07AF452191A8FA8025
12818A017D9154CCA5DCE6FE6F5696100337C93F3D5A0A142749E853F4AEF333
652ACC41B39F5A95072D2D57D23067F7418185632DFD34325ED9EE31F47FD3FD
E1AE3A72D1E020BD067F728CFE3FAF246B2BAE6D737C4221890C938CD96C30FD
B68569A00745E647F7D3EB6671329AB5DFD816AD6E06974DABB17F55B8156386
18EC9EDA141668288CE191305344595A91B9E5D73C7B2BDF0A4972D6AB83E37A
AB03B9964F9AC0048A6EB8556906CBA9F496959BCF426F406E479848E587D372
C2F46C2BA526E1FC02EF8138D91470A9A8D69C54E3A3AF446786B5C5B7836204
D101B488218E9322CA38B48BDC79A97DE3950462318057F80FE2A15664424653
194BE51F8EAD518E16D260033383AB7B2FD4B406B10E6E94D9CDBC26DC1B8FA3
FE1436FF900401CF42723AB1FAB8F8E069A1DC5BBD46AB464C057CFE1BD99DFC
9B9798C718E4EC9439885B721C5E7ACB58EFA66C04867FF44DB11F3B6C449E6C
E8CD241AF271AA5EA7A62CF5F89B4625C74CC9AD689FDA4413302021AA651AB6
440FE7A9641AF4A114591CBA180DDC040511AA5BBF324A1579BE387D101E61AB
13AEB3F7D0E0BC6A058F07663FA4DA443DEFBD75741DFEBFE0CF20F57A8A13C3
61B7806E9C79539574C2C49E6B822B95D464ADF6A8B7AD57467E1996D611D4D5
19484907AB8D4117BCE4D44CFC50E6A11D1F4039C45E25F048CD73B540265D19
D72B8EC9CB5D9F0CFD7DD033EA19B1C0E4C4ED1F9DCB2E5669C78601FE9120B0
7DBCAB593756CED80C1783D52F7D6FC29CB452789C4EE05FD6231425FB1590CA
759D64F8D93A06D0F889E46E13AE29A4DDD4071B164C7AFDA29F9EFC036515BA
F18374DEE98D64FEFE98776F54884E6CE118D141186D71D32200246661F62B29
DDF2D992528DAB4D79501C67A3B300CE6EB840FDB7611A6C2577EDF7EFD8E285
C100065BF08097510D28021791AF9E6BD38DF8FC64EFE7B87694BBCD1047F0F7
A71894E0ED214CCA95B97840AEA743DBE45104DA37AECB3CE1C3E11596BC3752
011C02AD4B1346E872E116BFF85B2AD8849F3525110B93F0C9D4D9CB4DCD23A6
6126C79E2960C054985A72EF45F0B18779148623A673ED95741962E0FCE02D0A
BB42DBBB214CE192150A06A437508EAF824F5EC37F63A500276080EF11F38549
C315ABCDB3853489806FF0BC1695563C4DEC76A0C4163B1381F57C721D517907
5A55321379EEC9E6AF4AB9F745726B74574260BCE4451CE60D4BE398BB29290F
987E67B2D01F0CB0AFDD173C60F325B5CE5958125E442D7453D0F9B7698B659B
893C7617BD86B952D23499280A457672BD7A7D39E62E32EF7BB6C8F2F209C4EF
0709A74171CD7DD1395D1830571D750E7ECFB5E982A14D98DB8FEFA5540D2846
F77E0B68B9440EDDD1843BCD7A6E1A0B71493E09B792BFD23C1EB13507DF4E19
FAB5191FDD69F30765870BE2EE2FA68B9FA99800ED975F30D8B9A559CF45558B
B416A92A2AD510F5B494B1F9CCBBAAD630AB3691AE8D2DB014D90190CDED36E0
52450F0FD3E7FC48ECF275387DC51672A47FEE74E6BC2A3C0A069F2B0A694AAE
6A14D5E1D0D9C1A47AD07936763CADABA640987F0DF7B27F32E8CFE92FF9A314
829CA3D96CC07946FDA2B32E5ACCB41982E3DF413DF26BF3810097D7BC453A5E
AB475CAE7AF868D5517E2FC0DC0EC20ABFEFBEA297F98A656C32D28E13641994
DF077586CB20F7EB780440DD18EC9DB206A64A9C3DB24AC2E23B67908B4C83B8
A7E32803A34E2F89497D77DD8988122979175E7EAD938E33A66A4A74C35B9B31
243D5290555BBB232C36BEB9D0B2BE46CC462F476DDF77DE7614CEA3EE395FD5
E43283958E46DA057792F3D1060A96BD14A374280F5596D1663A8FBC3037A36E
138A5A01072F08AAFB3580AD75CE238F80162C41BC02946E4D69FB87B8F08352
6681F8830B8A335FEF4B80059CB373963EC9E0499DCF35168DB56025C235E80E
3E6F8F6ACC8415B0BFAA5A06E164931EFA6C4E3589EDB306C0A99DF2F7165899
AEC26596AB50BC8A41BA029EC609D0B3DD6F907769F736B891588DE0627CA754
8FBADBA739D88BF42AAC04D3B98A48E4179309B8BC4C70E73E8078F2D8DD0F18
A5D29F2234145E08F3CEDB6AB6723076F5046EF55C45700C72A077EA3DFC977A
5F6659E2FD050A7F9C776BB9F735B56A11F976C2C94E40C4672C505BB4782394
7835E2469375ED743E334097C00CD5BCD349C8826D8F74D31E581C2D02800583
01186C26B803A53B2644D97DC70F0D22A034115F957A8D0B7917AF6F3C6DA129
50C815F2338994B5591E55C0C038C156BC3ADECED25DB31DCBD5506F96EE1A67
14A9A760EFC10BDC828D686EAA220D8AE74AECE622C40AD2D38BC3002229C512
AE374BDCDB9820B523DE09A4DF0F709F0AE78FAF8215E661BADD32AB5362C52B
2362156D628AA68CF90AFE030E2E827290558E3E5575F6EEDDAFA9BCB9A9AEF4
9C370F69F3B60A5FD943645B52410D48A48DDC9B3ED8C4095CAF9159E18DF67A
1DFB53E60E2B3F7AADAF5862E9A11C8F09127EB1675EB4FF8DED27876A16D90B
CDF1986E2FDA1E1234BDAF9932AA65B122508AAAEF1EBF21045DC09C95C91462
211F0900C56B560CDA45D98B471FB82EC5FCAA3EB37D57FAA0FABC47F116B43F
271680B13ECE5FD64AB98EE107B6BEBE0ADD6423EAC1F0ACC9772BF2FF59D195
A2C97C61B3EEEE8209BFC139C960428CA9DAB36F4111193908C92813F932E329
7BBB0A2245BD23E26CA3CF1C511C093A61041FDA90BC02ACDE8A8081ED5AC3CB
E0B4E6D4C996E675751C43D787AD0FB292A5D32A4D1660F1D02E636B00DF6620
5D505E6A3FACE2E440F27A113F1BE05A06710CF3F7A4452224F186AC6BA12D68
DD66674FC309902C8273E32A958DB55488E5AF25750490ECAAC2350B1A55AFA1
1FD58C920107A72B2507BC8E5B61C2532F22EF7EED5055D96FE8FBF9128E37B9
38D02AFEA6D78E8B668626B193FB0D3D09F8B11E419A75BD61C7E297689AECD8
BC4AF226C9A0C40B6DE9F369D37C93CB0621D193D382BEA7D2C04D614A6EF4A6
BC2E827F53E0BE49115A2958F7D5156ADF7C4A87CB1183996C8E559F1C9A0A37
3E288DE81B271CFB09DFCE7E62C6CFBA917B46AE41B088D3A64E9C232CC3A49A
6D03B5AC6FEC57D8A200E26E462E7C94C5B41555ADD1EF9540FDA7B4D195F002
640AA2271EF95790B6EA2889DFD0CAF278A51EA9A935EB9FA4DCB77650EF02F3
D50FDD34AED84815CFC383AD0E6CCA408E8926098915F3277ED9BC3E4D97C021
6EB39B56B94C2144018411D3D1990F9CBA00885FF40E3E771677B7840DA12115
DAB05C50C1E9A5E5F1FF274275F84ACF13BFF092442E9F4CD160E0D3C2FA0AB0
C8C0486257B26D7C2500E3DAA62B3F51C71C7175E2F09840815C8F98915897AC
54260FE2AFE6942C51717373AC9F39C98B6919D9C1710DE686822B0F72FA1E67
A4DDA0221EC39CA6D22B4132BDCD005409EEF1EE22C606267910EAF5F7FA3965
DEBB8D4B39276DBF8C6DC6C05E0C63DAAD7D6FB10C67510342209AFBA91622FB
552B568B6850F136AD8C48F3E47020961834D6A0BC86C1E5E5C4EA29F9D86139
D23DA6095E85675A816201024BF4538D68F949677D2AD13D09FD394249B8C7C9
3CF78F8F82640BB6F068C20CF9D9957EEB97ED9711B17B150A18C226321925EE
5AB3D5B35D23885A0A6887AC4ABD2D75B9E13559436E9588403E1A3E3C262B65
DF66488B4A9279BE8833516DD3052486461EF08387573DC402D5E5F2C1436411
36BAFE0BF07AF71AD3FFF9FECB376C3AE42846577F66B459ACEEB7507133095A
C0BF528A8FEB0F85684CB393C22A892695082F7B77FBF22F8B84263ED9867911
2814C257F407CB6D9063E0AB9E06D4EF141F3A4940DEBADD759E107FD35DC1E2
3824255A07CF85A906B1E6D5F0B3EA2589C2B4FBEEC8F41FE7B39F1DE4A0BE34
7A05FF0387DB66239E7F50F10FA2AB9C7DF807A1F008E791E9A9FDCF55A90BA0
F3BE9A1B400CCF518B9E0DA580DDEBC47B163E4B96EC9BE8C382F59868485B3A
BF4215AD14BD9BC3DAE72273B3FF23E603595A0936C653198B3B993DF8632C3A
96F1859BD0A48D23AB6C2B4DF2B9AB326D3CE63DA01FA2B2C92FDBE1F2193D5A
A942E4FFAAEEB06B1CEDB9260528EC8E69B486670FEFA6B2E1CD1005D31D65D4
F10E9FE93AD039BD7B283D802DAADEDF442C3E2AFBA3531DA1E468D90F87DE0C
4668D4F649E267FEE6D4D85FFD87F76CB2BB41A61CD2416FA1A3E9CC8D5F0040
54624443C4AA2D7A4658D0CF6E5D16920B14B023E3F4978CDB2BA04442591436
ABDF499DFFFC356DDE15221CB8609064FB8E9D2362E31F7DD250065F3ECA5CFF
C2E3F71A662C5F3559467B4DA8B88402D8DC4F146E2571E4747328B1279196ED
E003FF109F88188498AADB127137334DC81E4ECDFD21E29F2C2390BBD2A5C033
50CC65288697DFFAF0E54B14FEB28F17C597C8C6E0724AA872CCF23318D00158
B98F2E13A3C6B853C86320D7B176A6E2341680D7C7DBBC1BB37C71376C91E9C8
073D5D641E8C63699C260FCFBDE1FD5AC47AE219C1A05EE8405F5B9B50E1350B
14CEA1B69C495F3967C32953538306BB998004337248588FB3C281B275DC0A60
982617806704690B6B9FF9B939E79BB830A2F69AAD8D06197999D1A531D0069D
68E1ECA3CAA63042D30E48C5022A88357C779C5F21952B45EFA10A402767737B
887030273CE73AD46D4D90BE0CFCF0043E09AD17AA20FAD6404A58F7512F31C0
6906A66380D3C3DE389989A349FCF520021ACC5C2E0034A3AE563177AA1F6ECF
01B607F6375D362667380A7572B7BD071351772A03DDD8FCD0F8C10BAC3DB3F4
C7D352BE87D10572D452F0745683EFC6A9C74D19471CBCC777CD68F5386D3BF6
23B99E060507CF1462445137545CAC3B47351DA7608CF9EFAE45B74ACA861AAA
BDE1A74E6007A63B50E2776AC4ECE1808B907576F008637255D64C607FE42796
F79DD8DFB75203635A4B5DB9042C8400584B0DEDAAA99A43AA898FA7A12DF4A2
B33D52EC50D8D13B9F2A9AC3DB9CE87346F9C593535ED16F54E009515932488B
5FA3571A334AAB9FB8B7F35ED46DA6AD9ABF924105C0328C9C5102C3C050C163
87712368C4C2C7CBC3847B29FD4D47DBE8A84D5988A6E41CE10FC15D2345C788
9C0038E446C1266A0496D20D523DABEEF4BB9BFBA1D1AA0F68181D3F070DA59C
939A567960ABDE5D354550F5EEE48E8B96B7F3D3CDA61CCB3A657667C43A5754
D87C6809C54FAB1A062C6A8096DEAC6F1DADA15617985EFFB80FE51ED144BEFB
4C1784E5EE3D1E4BA70B023D8F38F8DAA45E8D91C6777B7A4AD1A36045074612
80F53CB3E527943769FA51BAB53C43AC4F83124147D087A1EF211E3405E04C92
5EC5DA570B55C74695ED7F67FC1F9D3BA26AC4AFB9C01F39573919BD5DFDE711
4FF8D77F9291C3B2D964D370A31EB062AF6B10614DA9D409B5E783B1A4C9D23A
5A6D00FD5932934355765F1E04D9B531E0F426ACC86C050AC6237BA92D7D9D3B
CB5942990C794F94910365F346CAD55B0BEF46A6C6758B80A9C3D161C320E9A0
DC684866F9A5DC5A99FDA1BC9579D7D503D6019DDDB8A37F411BC965A79B9C24
0B120D442EFA4DBBF9B252931E170C6E966841D974C657A1E4049172A0304CB0
4FA06C97BD175E29E547765678E317808E56B185E9D4AB5171F70D9F21D823C6
260A2FA48A1C98354F25536590D88B70AC1D374D933FC3EEC3A79D90F4D681BF
7B9AAB66E2B8B05DE3C18DA15486ED49AB21A5FE4A86AC39F9440DCE9EE89FA8
BF9317C7339D51AA09DC021369E7758239498E8A5651484019FC6B99C828437B
E1384C58BDBDB9309638C0E794FE0D1730CFA574BE9929F4C61F58AFF0504833
9B3E82C60BA1ED63FB647E30F87BA9CA9252A304837C9571AC78344A112B6FFD
8C6E959C04D04EC6CCC674C137E8B2F63D291E712482A831481AE26E489AB7F2
18DE672FF0ED0C7CCA91E3D360C697BAA8815358E4A8A0C924E200A598BDB3FF
DB8129F02F8DC6D0F087D63DEE4EE9D9EDC32DC4C2DFF03191DC49D4C5E8794F
99AEBBA4F4468619C99C50D6D51DA7DD6C6F007A7C156A25264AE948857B536C
23DB3052B8DCD553EC3007A04DF1F0DBB3869B747B1BB0EF2CC2A7ED14703ECC
5C3E26499CC2CBD0E9989D60A52A860E103BA8C415FF47FBD399554D81116881
3CE3B59CFA41E68B5B4E821BA78516FB6D2C5B483D62AB0B40FDC52BAE8F8E95
98CC4A276ED58FE880ED143607FEE9879E420B12F6D1001333D175CA14E67CA7
1EC389C08CF73364E0EE07147D970067178A7E5C9145475EF652444AEAEDE988
136850A9596C69E3C20FBA3E957CCED40BC94E7465C3C470E6C177C3444E5C95
7DE182D857989AC01D153CC4FE38DF1A7F7D20D2DD68F8320A74A02B63C66438
AA38B4DBA012F6088F5BF13ADEFCC1FA002595AF7E6E0C6B2EF777C2B82160A7
EC35B422DA4F5A803C4B423F249C77C4B4F97AFF2BE3726ED45E617D5E613D6E
EF28DC67A7E3EEAEBDD30F3239A8F1DD40F045BABEE73D0EA00E8771B79496D7
FA1D17AF56843FD2CD86D40C04C77BA2C3ADEAFDD9F742868CD78C3B21211125
CB73F0AB36718CAA8FA31DAE3EEFAC09A745D3983229CC9EB7C4AEE5190B0182
EB85607E5C9F6300B6AFDA3476E461B1360465FE5AB30A95B257C4893F8E0248
657BEC04FA4935C40730CFB259E34814E2AF4F78B00DED97FE5F80589FA576EE
93FA0C36EF9D99A47D5974B793FA4E50DA036B06F46E7BB8968FDDD7DC45FD66
C63E76278422FA81333976FAD15412999CD38A00C6DEE6121C8CBB9871476273
8C9CB567D253E8D1F554A3A2CA2EB87890216C44B8D0C2738DBAF170CBEADFD8
494EDE8C793300D75A298F288737BB64215A801410AE2638362070FB4409DAC6
E190246FA5C87AA300DC965DCE904104F6E8B85A30859A25726A920E678CF58E
B0137E99CA6A337E273CCEDBCFD2D0B91068927D62A6E61E1F70E6BDDFAC46F1
A48361A14E337BECCCF4896C518A858DD65A4A72B71E816E582C02DF054975E8
7930B7BEDE2FA733075EEEEF64BF0F22573FFBE4E8322CC31169FB7B156E9AA3
D3FC1B8C3078AC57271941A9B252C81C8D744A09833B81E69151C009DF445ABF
287023E1F664AB3ED68CEA134BF334CE2378DC4886C21C85DF505A1121B2C09C
52AB0C20A57E15EF28BBEC4ACC213E2C14B3F05262F58F8B9F9E0C9CFB65AFE0
5D7899A9BB01E3337C3B2A1121A54D1126B703540ECC50509BD6B67CB1D807CB
27E47BE497EC961B7ACDCBB40E33337B7D5C4DE5A1A2E28264A075D553A7EF09
D59E631FDD91099E026DE8F7962A672DE6FD1DAC083A1F2CE95E65B20F5BC7C0
CEC1D5FF4316351C00100E6B167EF3164D0819B1B4576B0D46EE15C45E2E31E6
0F7EADA2B5C37B9C7080697E5F2CAC02C8850E0AED1403D33CFC0B9975144FE4
D009D48796E401689F263712BA960F0BE6F2BEA3EE7DCC40DD5710F052443FC6
5A0499278053FE11818BD1D8256573679CBDDBE9869BDAC35B4302F079B68593
D70E99F8965CE85AB395AF4FD5CE34CCCF4CFC655D094592627AE2AD53D58AD9
D7570C68F428917F6B2D8562A934C913742C74E0B4CBDE21CB980F29EC2F8DC6
3C210D286640B4BF1AC9C4A2FF24B626918F2299A3C431C62B429BFB693DEF9A
FC207E532E3D583EC5BD45FFF50919EC23C6BCCE5BF1B081D3EFD3D8CF6466CC
84AFFC02FF140610BA6CA8772F081F5EA89AA609A69AAF10EBCE541CAC643629
9483FC021B195E88C12BEE0AC567FF798188D46221824643D271D168D9A87BB5
85D911C6DEF03A87BE5DA821608227CAC3ECE9FE9AEF0CB632ADE95B7D0D7A68
318C865D72EBB2707ECDD468FD2FF6C68C9210206DEAB71900AC3C96560B91C5
40D66378222B8AD92CE417847EF6BB3246C50C5A211E3318AE3385E3D1B0BA0A
B002D23CEDAF5B78742C7C4A2C7C52D09F61282180A013804FEF4AE9137A90CF
5E1B4360DDAFA32C6F93961877DAE382E9B323E1BFE8CAE6924B992E064D6A89
CD0FDCFF0CEEFCF2DDD187CCDED0122C6FA59F68430B2EB5DD6A2C0D3DB15F46
E7512BD416C3ED0B4843DD9B18159A793692855AA83D4449A1529385676FF385
9D58B69176CCD1830E60D0740DD59E388AE649F720F35555EE8BDFF64AABC4C2
B426F0A1A8CD96E7CE2C0CD8E1C425A0A0C25CF9817A71086A2D43D8A9ED0C04
71A2BB237622A66032EF35781C827B3157F85F70EB3BA5B398BA1DD624323903
DDC3EA7EEE5E00708D15589D54A1CD611C95A19ADAC7C9A248F2B7D68C2C137D
A798C8E65E6E889E23634332F1809154D7E79B3CA0096DBD514E95FA508DC954
FC0E20C0D9437211AD192E48FDD6EF200147757A4A6304B07108C50EFF8B5232
510B276F8A5D6D333DDE60F81390FBF46F7DF3438FFD1949B03D0F697AD71ECA
88C5EA9B5960191373BD9462D218CFC72676A09D30F5974AA2AE6D5933CB65B9
22B16A266590B09F0CCE7290B16A6D34794249458E6BBF670D6AFE574B0BEAB9
C5FF15E7650AED6DF0301176997A069284CA058EA61F649BCFD9AB3992A5DD17
CAEBA3DFA4F03782F0C3D699A328D11187073E9B0405B15A6CAA94920B30BAFE
FFD21E22DA4750F299DF87E7BCFB710034D6AA663ECBAD4041EBCE147B0B58CF
9925F4FAAA48CC209EA5D74721FA71E7B7DB6EE0FDA01A9A2E15C901E7B1B8C5
3FD1C88ABBFB2279E20A53A9C600E11966EB7C339BE8DE353653D6918C21B2DF
6073F68440D3E7AA1BD81F82CBE77C29FD07BDCD87DFC85B2E68269E7A717854
723800968E88B3B323E0DD7EFE47CBB6D74C8E58A8F534572D5FC1ADC75A9381
6A81B363D86DFBEBC6486CD3E93B9704F9A8EA1655BA37F818E3D4901BC379E9
993F11157CAC7E498BC6837BBB42C53E8F58B5E2B701EFEC274DEC065C3035BA
907BA9724C690942D34CFFBCA49A75E4F5CC850FEE2D969B9EFFE6E47A97CB95
9E1372CDC1EA07664EC24A410C1843CA2383E7C5F4DD7BE97CEF57BB28DBF2D3
D90393BC6431702E17B041360A6B7946B556A94F90C4E39A737D3089E54BCD48
360FB42676A5A0AB384A5B954CFD086E99FB02E3FD830ADF0856DB9DEE7D4E41
343A2D5CFBB0BAD1BD3829E0ED8A048F1C441F5A37B1490464394E4513658149
E27A1C03E1E52F691753100AE5BD30C7537670E64F81A6DEB648C34D61D1AD1B
4817680216AB4FA8925FD4D836477F78E46D58FBB16C8519BF8AA365C6180F9F
AEBDD0269BA93068BE7539DBDC4842179511F8A5F44EEF3AFD36A3395A13D8EC
1580461E0B5960997AB5A9E8A2D2EFF0EE5D22937EE0023DF5B543C49BFC961C
D710A3C71EAC9C7FE91374419E403B5463AB838C4A3B031259246963044D2FD3
2B86B26CE0FE804F28C4848633D3F092798658B4504C7EB385CEB1B225AD1CC5
8265DF13B86E57B54389C5E44E28A97CCB066F349D97F9DE33BDF170153B1450
5CA2E193F72FD1456C13E2BDBDF7FFB4049032E6039CADCC01F11DF8805DDEA9
E9D5DC26B3B7884D92F9B8DA8F8131EFD65EEA9B08384DCD92DB754E223599D7
FDBC8E95760B7CD21E534007B5179917898EDC1B5DE6F7F57BC58432C12D12B2
37B6AE10045C4921DA0425915846ADDF455BD6BC7C05C685710795C97607DFB1
7B17C3A01766E54B13AED5B7605496D08E35BFF9457D14B55C5B582765A2B591
3E16EB3A61E55AC419C00524B3B45903BCBCB3FA0C7ED7BE018999ED06F5639A
184EE84E4D0748EBA3BE3F4AB5CAB7882058946F083626EF6D3BA7EA7683824F
D6279EF1F58EE2C717E84B039E8F8DC22988EB2CD6845B783651784280E84BD5
6F33AED484628B586192F0C72878E76128411F6F62DA88CA07143589A56292A7
40B6ECF47B56E9B6F74514614F4426D968EE6E8553F03C26DA36AAE1A0E20C61
0D8D85C42B85F0DAE317F39E6CB777BE90F95559243ABAC3FC4CCD784A8CDB17
1FC1E33D763A16889CBA0A580084D1CDC22AC695C093F24F1986876D29D3BEF7
EBA62CB092DAF80BBE915942C1F4DE94CB85B5E21867086F349BB3332C55C039
49CAA44155BC6002B60EC5ECA354585D96791129BD8505AC16E98C9D59C97004
C44F5329467481D6742520D3895928D2B58B4C9299F6E4437CC977D188159B31
D6C85BF1837E1635FB1912A3A0A7C477AF51F5572C91C190CA70302E221C78D8
49FCBFAF8FD8742B45918E92CFC323D23F9CEDD9868CA12564583553884F397B
624BED92B84B280BC188F6743BBF4AF64F4D308793FCB17CD879D10CC1537C2A
0A92EC72D07508C53996CCD6DE7392E68EAEE499D0423633BF0887B1F116B019
79169659E87B9995632550114F0DE26808141AD2B3B228F2759185AD0FD1A2C1
DC0484A3E199A6B133DE2E06B2E309D9ECC25C49F26101649782848CA59998EE
B26CBD69005A8371DDECB87E0C0E494C226D72233CB7F740E50A423BA06E9055
62FA2AC38C029E5EA5B923C1C4A047E08D16217C35CBDB3F57C28DC9CC48CF13
79A67792A398E1AE9A4A27B172F3954E7C6A72FFA9AA19E923C0C626DD009266
CBBD4BFC154BEF754AE6DC585189C37129216217521B89B790CCAFD2C0FDFCD3
1A7029A1E4B3251B95B25B0F76BE700BD287C2B95B86A9DA81336229E8E17499
606AD2909E4634B6F0B01F779548339D956DC5ECD55D8960B41DB1BEA50C0115
9583
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /Delta put
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 34 /quotedblright put
dup 38 /ampersand put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 89 /Y put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70D89F53B1D72088642CD07D1DC4C7263A7EC
9785A2EBF8CA24D40E2C60CAF478FAFBEA8A27A55CE0320FE47E2512D88D1244
95CBCA87983B8795DBE8C15ECA68CDDBDEB167512E91930A7FB226994EE4487A
D1E69C7E7908AAA5D45BE3B0D1072BF1F36C6368AF31FC583EC20E6634FA5777
5ACA6512C5114593C89A9FA5772BD7C4C2FA987C6CF164C2564BD1502C3042FC
860D2A57D5DD11848588A0264C6A7AF607D175EBC791022DED8909929C00B48C
2CF4EC05B43963F1DD6EAAA0506953CF028F59D81B51256DFEE6967960E4D051
03EA65DA9A2CD6C3FCDF0035EEA5E1DDED3914331792901E33FAA564DD27DEB6
C3C1F3E5D6BFB2FD09F7CF7CA34DD96B23D1CCB82A4941404FB4F247E8CE3302
65D8E7EB5B27A24256A5F3210287BE3902AD16F5458B750A7C0B3985DEED5A0D
C238C3DACFCF77A57A20AF3A78C3558CD41BB20473514794714D6489821700E1
D255081FD1D1A34F576A44DBB85A11492B31B721659DE9F2544D7E271FFE8735
17E01D2B3D7780FFBF8BC0B7BF73F7DACE0B7638F09A272BD8EAA51D3E15034A
9F65FCAAABAC31825FCCEAABEBA65E94641620EEC545FABDFB485601AAFE0B6C
E462FB9452FACA9789E980F6C6F7937CEE9EC6A4305E4113CAEF8BCE071F8763
4F9EB24089C7893BCB768262AFDFD143BB629DDD8DADCFDE93E4DFFD87472BF7
F21A769FA21D5168F02AA89FB909880B99D9641EE64C5AC74B4B038D023E5A25
B316E2195BAEF894CC953C05616B028819F6308F5660DD73C49537D6A92A7463
5BA5ADEB710612E0C79FB25631EE33BD19C61CEE81671E3A75878ECDAE1CDC08
4AC6FE8FB4061D5B4EA30C490E20F4162E8FDC1938B4E9CFFA42253E60D08C65
99C93EB8F99526D5F71189337C2CAFB65C93CB35099A6CC72F4E973166C80CAD
B69758E1BC9C832A83E798F91B120FBE6DEB2EC9047D1C659D916796DE6FDC78
07C7C618C219B6E342029C0938F004AD63BD3314AB65D9BAE58B199E37DC8FBB
09A63F6E91823B4A4F4489659D50CDAA8F4A5CE6721D283594A25275EB0DF938
23D2B07946464C91B93E992A50F32F32B9407303408C002675B180B0B97EDBA8
CD4E4432B28BC90056728DBF0D10A8AD24E74A969187CF38067456BEEE0F3568
8406AAAC50CF436E915FBFD400A67DF0EEB63E3CA344E69A970B6AB6D4EA12E0
FE4243DE420B72F4DC9CB8D5107C9398C20F00302182A58037CC129D2C3C809F
A7FE9A922B914D1F7B812FEEB5E645B13C87EB3231C6A538F2089FA807C0B974
EBFF01805DDAB0D9E8D656565D49F013D1D0050D4DA1023CB8D2FF8889BB0662
7ED33DCE9D3FA90F953AB350741CD6BBB7F4E3BD667013F670F11633CC2EA14E
40D4D8E8C80D5DDE4FFE21EAEA13E571CD9AA20285C14ACA84914577462B9ADF
19900721C77B6A77CF6276700B40462DF858A3668E5B6DE95A7B9B8865023402
6EDB5AF1B59BE23CA01B56524A52971DC597D45FA5C735EDC975CEC4A4ADC106
7604133ABCC76374304177303E8F57E651865A84079FD34B951313B26753DD8D
EDC558A144583C692F06EE2D18E5CF9524B760E2C31D4FF7C1B175B77681D500
F72601CA3B8CF58A676A860B3762A59C6D0EBA497CA0EF8AE75BCD2427E1B900
7A78AD564DA582580792AE6131121FA692CDE5616D4BECB8F0D0D708067613CD
5FC004027F357E97A45064CC5C92B0E1F592BBB5FA37327FFADB7061AD8310A6
55994ACF56FF45C413AFCD68ED19CFD5E06958DE8ABA3C0742A2335CEC678377
60B7E4DAA3D373F206366AB2C8C48AFC78D868542273515D6156C36ABBC69013
CCC220DB2EAB227CB7C98F130B9F2908DB06BF151CCD6F99AC59DBA9E5D3811A
A9371C40C60284B1E05A90A5342C3E630BFE2B37F36CEF3C79AA9D6CABE71A86
794581667186E5E22A06E7735D6A91EA4598EB066A19198C2C539B717E86B18B
941EE945348ECA8DFBADCB905E1E22E99AE2FAE6B6BE41638016C2BF76269270
AE7A4AC5C139F66D22849770CDDD61B4360DBFEA7169957471AE7DB28CF4B04D
B4043DDC1D4172DA62B662FFFC5786E225BEC0104217E0AE498DA8E4C19EEF61
5CCFBFBE631FF930D911FFF6DFF94AAE71D4C9C50A50AC33B5D9E0362E12EE8F
46681A1FA9FDAD5F373A18FD2628DF04109746F3A418248F14AD5D5F8EA201B1
ADB304130A566A1D8AA0497F63ECE2A96F347804CA95F4AF2C811E0B3A136E0E
3726706D5D6CF944195484482D97472E9C2E9B8E9FB4B8CF8A12598D26B85AE6
998755A58C811B584FF9C246D57C15ECAC9527B2E0ADB873F1E4EF7667FF46E6
8822E7F30B84F354E7E28D1FA229BD3F2CE1BDFEB3DA382861EA078D1C051660
1FF35267A4D8174D6E3813334E9CEAC60DDBCBAC4BEACDF82A54C3EE8257A704
D6E28441AA9B187DFEB1CD6D39CED59AE00F682E06D5308B5DBDB98BFB9EC0BB
5F292DED80CF011CDFE0AFD4BDF57D65593E7DD7AE98A2FF60E2C354F380584F
098435D519AF7FB9591A811C1219E858E66FEA901758510DC7DC7AEE2414F3A6
9CABB7C2BC95D5D380E1722E455EBEE78A456BE8F4636042FB47E46ECEA75064
57EF7F9F65943A6E03A003E1BE9F8DE8FC38B170E431F316803C52BA20274E54
711A27C1A5C4132C5C8B60E2C4D128116063A0A462BB7B5DE3903641962AA03D
1F83FECCC525AC949220A3583641B0257BBAD9DA682659654C3E1FAB7D80A081
13D9B0BBE9C84B88598082EA64ED635FA7B7B4C6C5AEBDDD04FDEE6A620FB033
A1EAEDF9A16A6AB48462FD8DF13C36A6C1804C0CD0E024EC504A90BF9F7C4F6B
5D4E6F6FC275CF37F2B21DADD6A1D33F8952D428414591CD0C6AF9A89BF50EF8
68CD975AB519E9686543BA7B8910DF750F4840E83EEC5DC0F106180AEECE87B2
7898A45F20FFC850E64D86EC95C0C49DE1E8ADB084FBEB63D177EA61976A6AA9
9BF918283C2168CB706C370873B8A1DA9FEE74D0D2847844BE77E249546AEADF
2945D5501D5EF8B1EA919815D5A38ADD1F6A192FC28D9E508490E83053019F65
247EAB4EB75E8C9EA312549AE5A0105AB5F470DD0CCCCEA0398ADDBC6CBF897F
22D196339B7D9EB539F2FCFFD47712F6DC97B53F9CDD46EC7887A3F59BBC4F65
CFE03D79AA01F2D949DFFC755CDE12ED195668B570A5800B4FEDC4A95168798B
AB042EE85272B28981D7AC1434FFCCB5272C20CB8D7675A7DE3EFF5231853CE8
D8349A6B3A112416A558941011028F3574444D4B79A3A3895BBA9845C5EFC4A0
D51E9527B6765ADECBA7DF2C158FA9AE122AF71BD8C1BDB1F5125BED5BAF3D8D
D400CD4584BF76DA9B4996ED22C36FD17FBCBCC69DBAA5B983E2B6A7C4879920
DDCBD433D24B17732D70F63550849227D9FEE499D76719AA679AB65EEFEB44BA
D595AB596B08E65494BAE79C74FFE02D36CD2FB1AEFAA4CDA92A54FC00B466AD
5E788D24999E2EEDE6FA8F361EC07D1709DC5A5E256BC80F88943A5D20C4D436
4A7BC1BA9F2A3A2AACA988E4ABAF50F82A592353BB5DDD5AE7A53A9025485EAD
8FC9A775BD88631B3510128086E3A1282CD7297DA19656321D94CA708D5FB922
47FBEEF1DB920712D1C727E7E4E72080801CC0A0B762E463D87C0B554DB1A808
33D0831D926B34F5012A01C44EB37A3B32D6EF32EE755893B284EB82857E5283
81FF5C53419D660F929FB67086BB19DEC9279A662110DDDEF59FCFE907CC3282
90B3836ED1192798623B48701891DCD212C9FB0E27E08AFB9D2DC5A722F133EE
E742BECCD770A31924CE2D703D2DC1434997D1F4218D68756C8A3B9A0E6CF48B
BF2448CD0B73472C9AA454B11B7EBAA1D892C76695E394EBE950B38A57F06991
574662B0652A6345C6EC3C57EBD1B8E31BD5E77478EAE11BE9AC332E8E578626
63FEE2E9C20704F0554B5AD311AEEF1AE9C3A0DBB2A721FD5584430343147086
7E3747D69324F1C4CEBF5842420AD6DDFDCB544423D4129E8EE0FC379A770B6D
59056B546D7F5ADEC46B1ADEFD9803E618DE67E44A100E6F1C9F2B80B2F43F32
CE83C04103BB1C67A2B53F3005D86E96927DC826F8E9361A839F45D937D3E7BF
EABBD8FC2D0F930B92254C9ACFDA5D5DB7729FAAA30DDEAF66A6B8D48AEE3FBF
FD9251BA3A045D4ACC99DE3CBE82FB748AED299A4E825D29BF8C2ED6B7F5D12D
AF8908E9FFAF84903D5D00A69AC6139376D1BF014CF46A560247F03F19146468
5ED1FED612A1867CC8F161D40FCE48B9188314E8E17D1C6419C87D3FA968FA54
D4B2DFA4C790B0D324227FF3E45FB6D1A0B2B7815DF99929F8F193A69B413C5C
9B91127C1F19D89D14F71E469A9436BFEC5B8E8CD79E79A1BED2BC1AAE114259
B1EDCB9C8DEBBAA2C094A91314F60BA5E4FD00C0C91299E849A72E5371CF94C9
1584F11BFC3BA70A04BFFD9D0B7B17FD63F700BF45CF476864020C1F53823682
40A3BBC806A0D00CFB6A9D899FD5E63CEF137A2C1259C340FA80E6A0F2AB81AE
DA996E71642D04AB88C924F9FCC817648C4BC272DEE934FB334DDB96A18F9E1D
C3C9853E5674A6FC4024260ABD5ECEC43274388512B74C908928CF23248B0AB6
117D9CA5DAC3FCA85B44A3BE7DE09704CFDB397598357D3C3E69CE5AE258AB87
563C7A48042A0563EC8B9950930C51D4425B6C183B086B36891B0E6DA2FEF7E7
C666840B2CC22F871831822F19EEB5CDE4A62AD5E033E15AFCFD507DBD170338
9546183801999882C20E5365A1390BDC8BFF6A50B8762ADDDB1C9AE77B2B89B1
4D19EDC2D37EA9429477B085E791365C5E92088042E3F1061359F6CE333148C9
A2C29927857C2B7EE7678B1AABF95BAF3E15039CE3ED26549C3A5C695A51ADE7
AF17EBCABD2F0DEA12675FB4545C42B76F3A22088C38B74F491929608E8E70FB
71FED9F5DBA01EE3240549D65539FB3C0FCF10661A0F7C7B855FEAD0ED56DC29
03BD320CC915BE95C44679177078C90A41E3834A51BE3E1D2071131FFF47E453
8AE1359A377BD82F9A47291EC3C5B9EC7DCC96A18E069716D70E1DD712E419A2
89D5116DF95B090D12BA7D4AF3A5902A1A9A94571AC4529B1411CD3E13BE6C68
588C6EF25BA87FCC101146A4AF127846BBC8DA87034FE9B0F06849CBB75A6C89
077FACE59DF44354B3C1C0F5359868156F5920210D40EF8FAD3EE15352E06FDD
1742CBB9491F8DBB5B6F209BEEF80A1BE996AFE772135EC9109E1A087E1AD6CC
3C8625CABCDB5D4853D1F0E60E915483E28314E71001538D9A125565BFF01AC7
A96570F8F385898567BFEC702329CFC7F3BE8C6B579E72D61FD01568D751CEF0
791A79858399C245A419E32EF116E194BD36CCB4EF46ADD18933A334ECCAB073
28F25A581D55A1D07D60D63E8FED239A9410BF6EE3130261B73B36622A4B4C8C
2792EF56B0B9B14C24FA4F2F42F9BFD4B79AD79F572C92D919A3A6CEACD60191
DE08F3022EEAC7D9447E00F89533367D43745425D9C18CFE173DD568599C5FAB
CE1F9F50D6D4FDA9721A5E392FAA9F6B0C63A7A30FD060D3C1BF7D983864CAE1
E93C61D34A62A634DD45E0B2F277541D20F1B11F69919A3D376DD4C87B23358B
9AB1B53FC8829775CB7557F577E21AB9E643FA0D9A6BDC7DC727D850E8B66BEA
9823E2F210E034A97BEB44EB278C9A22CAF1BD75603496630EC8833A5FEE3DB9
53FBBF763F63F39960361DBDC8C0DDAAC776CB78253E2634DCB355054FA97765
037168FF4B887B3A92032B3A34BC2264C90E29854743183BCF022CF477396BFE
5409E5228EB921FEA19CE052AA68228A08A12E2F8D3A2F304631C933CB0B20E0
E5D63D238A3C78232184785E987B30E9E8E3500878BEBEF0C8DC565F0B428DB4
42AA4715D11A15C8337B0E25170E896044DC63FBD24890152308AEDD715688CD
DF135767E651E8063C04E5ACA80D8668B0F5DAEACDB7DB4001CF5235CF67B5DB
4201CE1D4E9C840069CB53376BAD70BEE7173A7AF24431CFF8A0F8B1112B0A53
77C0DF3E1D7EFEBBC73B3FEA9DC47620122389929F0DE739AE12DE3AD272EADF
9EDC4CAC1F478FEE8B3552C6F802B8E244E3182406609DF47D21EE90D5FBF74B
35C376164633B3D9C8CE0CB75E3F51D05C85B3C27D80D58D945461CDF0546BFD
6F0D9F6DA431BC3065D74A8FB14485AC27E254150890F93C2A0B997554FD7873
FB843EB31B35CA1564D91F3DA65283495547C68844BD8576E04819328489CFEC
AB2BF59BDA59915A971D78563D3BBE8D2800107F10479ECDF44477A8A189FAC5
6B303CD63ECD12035037345E3AEBC490EA6BBAD9643DF1176FCC450612053295
05D0BF716DDDCA66885FE50A7438AFCA4B6868AAD32DE7A14A2340056A079DC7
BDDA0B241E65B4A9C1D97966DD2C409D9E8DF848FEDAFA19AFA95EFE5A704300
63A0E77220CED0258CA344AEDC1B7850B4DBA24622D4DCE50EEE2815D17D5A65
6B1CE5110483976B459D8B55E88AB7AC4893DE4A68F9D02FDDDC616ADC7E9FD9
29042262C563906DAF36A2EA9A973E2CD5E37862DA5C46223A45FCF5B4003F78
1829D4D9C39E1055CC9E9D778B47FE78115980BDB4116B24D0246A7E40166DA3
19D9387744547651997012F2269A9B8EA0A1C0403A6F6ABC89FCE241880CBB6F
E64B5AC87EEA0299E3779DC87C04F80487A5836AD5948D267CEF80D8561ED3F3
A8F43D75E0DFDAE0D0C7ED7C855531C16F6C6EDC604ACA4772E71003E62C4557
4E546C1525E015661BF85EC206D95407502EA7335ECC55A364A261B04A7212F3
79A080D3E5C1DC0D44A917654519DDF48F367D80A01DD052E17C9C4666E9E1A6
20FC70727A83F85F880CDCE75602BBB5CE938CDB53E615DE6DDD9602C1F58008
9D151849E761FA1824171E3349874097B57F0DF053B0803A96DFE7131831C455
813E6F6345E1DAB027705DDE92F9BF39A96A1FB3594C843FE7E275877532CE05
FD10D5B33DE43D3F450E929E9093450960E9BFA8004CC26C1FE001177C02649E
54FE75B4720345DA70B481E3F94D3EB2DDB5A1222EF230D16752321CAA003E70
FA7F6FC6EB3931AEF9654E24DB27D9DB04DCE1698703AE9DE839D4C5D8301CF5
0FA2CFBCA3641F136B90F86E1AC1291DDE8034E5C40A19E28869502BC65B959D
C8B638C7787AE6804A38B03A11B425497B28DEE8FB5FF983C38E07FB5D85B5C6
DF148519711FAACC00E601522C62FA105255F0FCAA8F9A838D53DE794B945160
281F29E8346E4D4C34E767A7501D994E4BD0B8F9C6B3C631020CC612B0885135
3E527E201DEE24589E623DE246CE82730A68F2CBF934EE1426755E9626FCEB3B
9969BADBEBE02884C1E12A5FD79180A4EA3B40386246B2943270F0EF6ECA5281
607583CFF6EB99887EC64105164F62AA891D6282342B7125C7814D474FB70D93
ECA10B6084ABA95CF9EE3B9F59109E5ECF69D69C5C7893BE52D981B59608368B
5A81CF08A783DABC631B588DA5814F8DDCE8BEE6E9A2B9E42DAD6E6D2F33A78E
FB7699150A2F373E65F03FA1F7BA10DA7A8192C64EDBBBBCD1A6B610931689C3
056FF46AA3FF848A524E4563D4BE2EE6060C72D61B93025953C66BBBE4AB5C51
26679B8632FA6FD9B958DB8B389ED2741331EA642400F1A4809290D967B872B2
B570EC8F5766FA4F3557D073CCCE1682B987C0B934642EB6CF2890E42D60DED7
A44C02DF3E94D4658FA0D70B284ED7B66AA0164ADF54C6DA8AAFC4A06E7420FD
6F01AF4FE33A812D5466C53AE07BD5C401584F5FF1123E9A20F512F3CD94EEB8
E420AD03001F033E32FEF0D7871109DA3F18A92A48EF0CF52A23F428396676B7
F00373A8AD1BA49263CBC0CEBB775FC91FC32DE00DEAC5AE04528A4B235D903A
1E284F65D90ADF0DAB6415E5625541A953283E413DCE27C7AB6E1C583769BE74
24DBDA589D9CE9355524848878C5C3C411F618575C27806B1686A30739737DE5
E0C67255031ADF13F0184DD0A7679A0BDE8BD0D7655D952D12AA792FB9A1A74D
0DF71D673DD16AA707D17C6E4A636029540DCC358E82D0BDECFC029ED1CDC7B9
53748C1A7523DAAD03CF2CE9B5699CBD44882664A286B6DDD5AC83BBB0E1E2A3
624FE3B5454E024614D4620C9457E012B6EECCF5FEBB2E7E60DFA6BAD4C36B22
5724CFD222FBCB2010163BDEC8C38A41264C7AA5A6A54DD824B14C8AC082B6F6
EE598E9476E96C728DDBB768454A465A2FCB93B036F23596F35D0B45E7A824BD
C876BD14EAB12F7237A4F8D6D7E4FCF089AF007FCA4501460633035845EB0970
A2541039AE6C3663065D0B973163A7F9BE7B7FE5D1C6A9F1672E9B86BEF62AD0
7FC0347DCC825CEDFA9479FE3ECABEEE22D69836A1596D6933D6C5CA9F9B414E
E4853FE4C9F5854354197411624CC3D1711258A195B7D5E481CDA3CEB3FF7B45
2097FD23E7175751E93D1B5695386752C612AC7A6957B67BAF229C5DD0B228C8
8A561C18F5533CF3060775DA3B86B9759C1D07B4C0A5FA2F93086C76F774FB63
83AA7E355A396C9E0A3AA211613B5D5657C7FFCBDF5C81963DEFAC2129D997D7
E9C788459B3917333F3864F50CF24BE710EC8897B189691EFF424A4B5097AE63
014D0C8DB4ABFCB148C25B9FB453699A78FA14A98E8B50E687441AE3E9786B7D
32C46489356A8CE8F6C71488E098FFAC6A585DD6769CCAA081A2EEC999A330DA
0474040844E692D9730E6731BF882D682A64DC883A2E72B560FAB02C6BAB470F
0CF46510719EC27D034A004ADF788FAD62C7E544E4D890ED4D73D60728AA3005
1D2F70C3EB78666B84BC164518718E97131294B373EE5D9BA937995A04DB6379
7D716044C1505DD5A6EEF1F28731A0268386866BA5D5524BA830944F604FC89F
B94FAEB8025F2692876036391CB3CCF55F42D6C12630A943320D47A126D8583C
45BD1B901E07C50FE8D1D2DFF5671EEDE3CE9C176EA52F985B80F62421FFF918
8FA3D6A84C0123293B6255D90A9514E38394A5AF34C355B7FFB4EA868810964F
F5E53F259715DE13DDD5DC561A8A4975C1609E877DBD5A2598A26CA77E1DF513
5F562909743EDBF2A09BEBEDCF3AD1FBB785DECF78DE8AD867EFCB9F1809F48D
22814A563F8999D7B5D2B69ACA06714AD18C09787C94CF606FDD714F646830C5
1074E56E38EE19A48B68E2E66BBDC05DA374D7292EF07D5D29AE07BF3833CACF
8530760983F773E6670E32EFDF471E403DDF7B00EBC60C32027A7D53F4F190C1
6AD3B457D4BA108455787B21D5900558937806CCBC90270A894DABD2F1B3BA35
06321C4B8E6465562EEFB7E8301662595A80D5C30E9AE144F09C4FFDFFDDAD4F
10BAEAC695587C5453E8DF02400DB306D28C7307A5C1E687BE74D2854C9EE73E
AC00C896FCE5299A0C7DE58A5B7F7454519D6F0E3BAE899D067B9909070359FF
7919B1AE2DF2B5664139E153856D4793672263F72FB17BA9088B604D24CE3A91
4C22D14EB2C777A5D927B19EFAECFDBCB26B3BDAF9B7E73520C57BB476582A86
CC78DD6FBFCEE4715BB0990C181484CFD0AAB99D9C9C0A5A5652139F4884979D
611382D9D48570478C19CCB6D61F681DF615C880340705F33F099F92576EB68C
2D0575BB8803609B18ABF46CD969A776A12C7AFE576656446B1F4C2ECF342D85
AFAB06D807763E85667F96DB47FFFDA26D8DF870D4FE86A64FA6A62DB7BA1336
80352146C55410CD13CB9E0A50366B58050509BA0842823206C3AD286D5A3332
210192732D916781E089706E92332D4979CE24E980C8F23D776373A71D6A00DA
F88C4E2613C1D2653E0D6295278B856E57E14F1BFE54FC14EFF0CD999A3F4A22
8FCD219E44227EB8097EFAABBC9098242F053CA72EC21909401240C332F6A4AF
2C58BEBB65F14CAF87ED639CA9D67B298E2A1A5A09591E1295C4444BCBEB2728
7A50B3C5A1607EA7CE5DA7FAFB1DD1F56AB333FBCAEF4F5E022385CE3B6883D3
77219DAFD0E416EE56599BF18A048B910AA09DAEE2AF0F193C3A39663E5DA53A
6DFD6379573F013B4DB634CC30974A9478ADB7D4D2D862B19E1CDFF28577D27C
CC68F641EEBD3B181844A57D3F5771F085374AD7A28CDB51F9F13C69361F8D76
946C93D259358A144FDFADF016C2C30E48FEA0CA3E59B8E6B2184C790A1B7324
0B9B3899F8FDE7E2C93A40264C304740B5EBFD26FE889F9D3D2977123FA41DF2
0ABD048F58378BE5B330D5640E351CBD65F32DE0A9EDD72C53194C07D8AF1E62
1BDD7205CBC10AC0D1AF3E70C2EF4F9A4AFE2B2EA29204DA560F2A8198E203D9
FCB23EF981B2FF10DFB325DE87656DD080CDC5729CBCB0119A6CD2BCE236E05E
88CD54BD9325EF6028745F2FC731DFEE196D12A212E43456FF0676CDAEDDB411
ED185A3543074AC9BBEDFEBF27DCE3BA9D839F381A8E37B46BA0A40361B13438
594D78F34E7F724D18ACB079756D87411A2EE770DF1D2F003F4AEA32CF37120D
B26FEF5ED2E701341D544EBCDBEC3CF87EC412BF5A138DBA1AA160E201CD96D1
A7C673C258C2FEEB3B5876F9FA7B0BF1F1726D9E7DEF83532B88E85662248E2C
C3E4E9EEED66ABC8BA28E3505C96F21F763FDDD7CF195E3B97E5AD6ADF11A474
301C6E43F5F4A3F42C57043297CE125DC002FA39A939E422113C9714CE55CBD4
C1A57F76758F7951BBE82BC3E333863F6EDE20C72B1F544A447B594D35C39A97
C77E49833652EEC8F4375E641532FF5D08E2C7D1D173DD5EDCC3EF1F47B40D1A
BDA4B9B286DC087B69F2789EB79BC3AEA7818F3A036E0425EDAB8B87E76737E0
7E6E927CB15854B0B4A3FA9BDCFF0415DACAE3CF7EE822F93221392869D645EA
813E3486C89902932D5ECDD68D81B7E7024B90A01DC52DB226D59E4931270051
C2101680219C49F208E1A7F9FD16735E076B23D571EF958527CC1D3CD6A6A0A7
FE1CB767BA46EFB0FCE15A0D6D58CA820D77E79021C0EFAAD749E1F76563C9F7
41BF8349829F26A04CC4266ABAE3C7173278C5436330F3F01FB64099D2B32E32
FB477058B6A6BE2D9D44C71BA1C0923A5098666390500C1EDDAF9DC6F6060ACC
C9D25DDE57F10289549024ABCCD87A609DF87D9F51FEC0C3DAD38E59656A2200
3EB3F325BDAFD67DA7732E5D6DDD9A5D8EA7D0BD9154D271E5D5C4B2CC79CFD8
95E808DD8685EBDF721914275B2AE00951B76673B7DF34B93C7521A61AB5C46F
B0DD1E45F354DFA10EA9EE57EE45E70BB82136962B4BC1D353A2D225A666B2D9
368EFD88EE969E0663C4D0C5B8489DD2CC9CAB2140FF19EF9714700E8480B808
D0B75FCE1FB4E967DE0A2BD3DD650A2F5A45609D7F2F39D55270F187952B3139
04DB5C84713B0C372E981410C5681F223AE7020E582CCFE3B90C42E69258350D
3B02E1286A5A6A24B041ED6E41541A517C65B432A48BCD819629909EF66DD7B9
46F93EF61010857F95EE75CF171660AB03FF16147A859B82A497CD816AFC76BA
C2C353E70B248F17B80E732136E2DB845CA556038B00AB0C7988E894D325F1EC
C72C48BB7EDB128D7368BBFB5C9C5B9128234DFDB4BC649C4B824DD5E0D2E683
AC0BEE00EF0DEF57DDA509F32FFA5755D81BD3564DCF66DBC9EC6ED04D0584B5
BDFA99F3A1B19CCB0806A6A80C55AB481CD78644A26D976204619EA472677A66
FB54B4548561701ED5951B172B30C01D13A5C6B059271C2839E3303AA2F6AA06
B0B425945DA77010C867AE972554575F7D781AAD97E0744018A1062A9DAC0FEC
368B86EE57587C8759C7A09BFA3A3CB4731D33C498D5B29F4963D51F08A7DB96
C80844A789CF418EBC1564325AA6EAE9C75E4BFD45792CB24C57230064E23FBC
0BE8ED382D40F635FE0CB42AAD67F1036B15A46CF4482FA1F675F7EFF8D5ED9F
21456EBABC46C225135294EA33DB746D72ACAD2332F65C6C04E086A42BC51E0C
426EEB21F60A2CF9EC1325BF4ED6E16AA7FAEB9C3FD4DE80BC48E1DCA03F4585
2FDB921B0F2FDB88C5BADFA783029C595207A0A3C1A9C74F3CE75C27E0DA3B37
E2F66E246889D3A270016DC1E12D8014F96490F3A1126EED5D4AF644C621CFA2
567C4190CAF0CDD288E4868DB75496FC665AAD44ECA3EACD1BCDD6DFB0EB2760
4C6D7676D37D2E58B677FD4D9B79159F631573F365439FCB3FB75B4AE3271A48
4FBE31AFD1909434F884CC945683C8EAD4A4658B426C20B5288AD034E7AEFAD8
9B8DA2D4B0CC5BD278B0DFE7FE831A10594AF77E7EA4A15A395B6F4B34696B36
FF14D1599155AE8BBE294106CA5366319C1605E9D2CA89EBE9B5093354A2F528
BD55CF9B579D35482E314B28FB1D01E077B7519AE776010A6D1CAF87D242F9D3
212DD65DD95FDE7FA250C92249E58F0E864183B002E42A9DF1F84E0D81486E27
B94482374AB6EE5DD27AD1013327622803E5ABC97099C82B5260E824826B2948
63219929847BFE8C4ABF9441A9DD594D5BE01181FD3EE39F45EAB5AF4FD1E84E
2C797878AC5CE95C1244494D5034C966FF97732B51883E996BBD7F997D7D8713
4A3FD93651EF5E3219BFC2D9DF34FE055EA6E9485F5486B57BA73B127E87A8EA
F823F0CB12B9B8886823A9EE114E100EA6452D81415CD6E06F3B3A6A7A5816B3
DF21C28E9C870C7F5F6046008D76FCD22FA0F5EDC389FB994131C0B4A3115E3D
F98D527FF4D0CFB5F9C44E2CF822A5F1401A1A34B8E9A8CE0EC9B1CE0EE7A5ED
3E707FE0F690EE2C43E0D633D96DC1CEC4D4962BE08D5793872BE0F7B62B33E7
D9023B3B8C47A424F8C6462AFDB36650B54EE57570563FF3E3CF5920CC59623B
3DF5D05D65510352A58A25AB8E818D21863498852FE8C606AE08D994FF27955F
031DE5E1F98B8DEF2DE8308F7110E3A009555E322D3E83B4CB48C3734FACE965
E900BC0334550662D73685BD3BE3F1BDD092380F316E9FC01F3E8C056FE977DD
70254E176468BDE1E751AB19F960FA74C5072735304BA1BA107AF1DEDFE97903
544893E60CB7872A8739599574D5351815A959AE07BB11553173A42435567715
C3D9ABB69D14B1BB4BDEBE6B33A124BCCF8BB8B192C9A9994EC9AFAA29866DD2
5026C7839CE2663F06C7C6CA0849C02A93334BFAE80748649D3C64B10A911479
9EA1630CE4483D4E403135642AD6333416B081688B78347B8309586D6355A190
CDCEBAF411D27829ED0FA111DEB5235BCFD28613B2B82D0538CDB962EA45E187
7958F62CB64109E985C9EC6C82EF2B7C000E53C80A34BD52D191C1A4CEB5A193
07F6F5DAE071AC061202CC0AA690BEEFD110AEC0F05A465307EB0D873E7068A2
704184F67BFFB0EF8155A04BB1F1ED6C586F6CF9BA17E533C3DBC12AF951018C
B8D9946944F3F9F532CFDCAC2BAE4F4A9E7DC42CD0CC83CE4FE080F8113C2166
2CD21C199544E95F92442D4BA4B3BDE36647DE662726800D4EA1B61DEC3F7F5D
DA623A63395A55BD2337AE7BFB1B0026D42A2BC3E1C96D53CA76CCB69808B776
F54D5410AE2D45DAE7514FEB6E7DD0C8D047449934ADC1885C861DDA0DBE2EB7
031AD05B1731C1CD9C9FB57EC7D5E8501224CF7CAE002897C18976FFD05BC23E
D895AADF24519BFCEE2828D29A93997685DA3E6A54CF30DD77FEFF20D50D96B4
172705696F3E42BFDF400CCE39541812306760EE98E145C9A118FFC988E46761
AFAC67E0E3316F8AEC67C6D092EA895277C2E626666E340C2AB01D2CA7B6B63E
93E4FEA5AF61EED3DDC04019F8B10B419E5524CC3517551C92884B6B3BB0FA83
F38E5E8D47AA7BC74F131CD03CEC202AAE34EC3B592833B02365A1B2AEB8ACA5
BAD2A05D1944688BAC7A39B521842DFEEC8CD678B320535FF2EFCE918A7DCF82
5A026912E7B3A4A0A1727E057600F56CAED7330E6F8035225842620B59B275DE
B49EF6863BA95AC94BBF2213AFCE1131E8FD9C6327C75E409E2709A6E386472F
206CFA709B57C818F0496DDE7E9A7450237148FC4BDFB74F7021DCFECF18F262
FE6084E82B9B0AA45657DB93028ECF50F787CBCB7F84C61B734F45ABAF377F3D
45364D9C8E8A7E042A0E8EFDEF8EFD66A60212C4E6CF3537E0BFC1232E4A5C0C
030A647C2C6B573B38F503E926EA73D762162F2B2CA44D5A3F721D9268FA3E04
1CBF69566C6EB2BF62CDDC574684E46CC32A0CB70438045F593C5B8B4842D356
A4100EDF30A5D23DBBA14F0C58E1E0E4C950E83123EF3FDD541ECEAA0C8B4A3B
9CF8347B8C991119F0C066636DE39F8AEE012FD4CA1498368A4F37C757E5523C
21BFE1BFC3C11A66B6F943A921ECC8E35901691B48A5B3C958DC18356622FB95
4544B3CE10DACA3EA9A62DA338AA3F4A681E66B47B54CBA54A208CBAAE959CCA
967E5ECF753F8146823E1635FE4745352C1044CAE2E1BD923A05F79F93AF3025
D40EE5E86B52CBBA49ADE447C08D7FB8C462A60C48E7E0933F7256D18948A180
9D8D99D7558CA337EE056C8819FF4DB205829E8BDD66C7081730AA25AC357CE8
54B8299C455C0EBA9EC8008E5DB9C147AD5F3FCA215A25C4A95CF3720FAD39CA
491E8B8F79870DE911F3BC30FE213AAD3BA6F184778AD3FB1C5DD161E2068778
EAE41CFDC9AEBBC1D2A425D3B7D04C032F7062863B168DEFDA79B57A46B34633
6F9F834C97CFBA972BFBDCD1A59F2F1B2F1466E7A73D5C595DF195E2C02642CB
2C7DF363DF4B5A74D03B12F0FCCAA9B48172CFCE738FA6D91F6716F58BC7FC68
6212DCB8FDFB35BAB9FC6EA99E8454FDD0DBB7E24EA8E92DCD33C7DD73FB0879
AA243AB35604577F4FA86DD45E14D84ABCF15C3AE7579B6F293CEA12F20EDFB4
0FF97A34A82C48101B0EFDDBFBB73F59ACEF9C4D42EEB4C1DAE206BD31AF9AF1
E1803316FC07580FCBD14F4E6004AAA670F807E032F34DCC268F0D657492E2E6
73BA670E9CED82766E9CF4A9DECF7D831F32366EFDC027C4A52BEC4A2073B2E3
1A124CDA5D574307F01B345DFD3F5D5B4B5BA183E86FDBDE633209B6EFB5716E
E24A06F0843B51E6107D545950B4C991FFFB58BD1829488889A0125089D99201
49C05E3A00142AAB5E628FE0C81BA0C30C3C8C25874F029DF3BB0EB676A6D2BB
B6DB992BD2D473AB37BEF825F9E7CD579015BDB378195597E115C0362257C18A
92BBD370CE2C07A4FE3CE5470C65293EBF84BB1CB0AFF9763C8A32B41E933368
5D0EA589B2F25D77D7C6EE5D69172A924CD97005A7115F796DACADAAD65535CE
76C4BCC8E6357123A15D1817DA8E991C8A090B215186C0F664B3806E00AF8BD0
E37C24A201E87B88BF19B455C35FB34CCECEEF9E5B4DA8087D8F5D89F35CF072
2F56C5B554B9471EFC3E043D0A8791D592D164C0132FBB91A65974A4F07E1EAF
3F5028989496E5B5793C5F10BE3E50494077525AA9AA94726A29E17A3939E4A4
A8C255B81E56897B8744125B49541C78A5E065658E5CC725802789139B50F6C9
121048FAB81A91483C4398F29AC34A9BCFF15B7AF78DDEDBF6C2A0AC7A61C62D
797B787C3BB2FBA15D02DDF099C0791B273DA0EB58D2C75A6385BF33B66A072E
2EB515EDAFAD4BC1DB4286D0E3A6370235EFB341584FECDD446FD5D7D2FEFA4A
3599A5CB9C1703056BE56E914EEAAD26F6397D8FCC03693562FBA06A73EDE783
7ADC9051A088630E271B56B90EEE4E864D205A4ED6A5B90EB70E8B9B0FD987C0
2214EC354B140FCA13861012F175A407D3D0B0B911B07FFC64A1C6661BC192A4
A80B486A38154781002B706DD92F10A83887721C3F2CDB8DA9D0147AF6B8F125
B7080B8224487527DF8262D6D7EAB0EE6BE692F2174DBAF34BA28BB2B986BA7B
E9622BD0ABA80213A7A413F54E1A6B605AD96523D67B7D7C6E828113249F1BF7
7670318BDB81AEBCADB86A684EBA9BB5398D586EF4E2EF476129CDF86C5DEADA
48A5C521BFF7BFEFD635EC0F80E5FE80317C3AC1B8A991E38E8418927301C666
C368400E33EA3D8B4E8EEAD98D8378A9B5CBE86C8D05E8F045594E2AC9E7027E
34BB878A86F1A61D184450804440268D8C8A9E8B0B92577D6A9D022E96DA4961
0E4F9C0376F6F662C44F99C8B7E4BF1E423644BF70B0186642D16D2BF0FCEE1B
23C263DBFA9024AAC0B8B6A023287CE4B5AD6BF7AFC9826C00441C061E5D732E
558AFD6ACD5B90734DBEF052558CA38B47BBA3A92C403E38A11A739ECCFC74AB
267DE16197B24297CF713A8F80B9E11F4A4145FD4F7851AFCAC76FEF907D7458
A16BEECAD62C963C932E94B4866D3910C00C4557CBAB049ED2673D4586678E9F
47C3D79BC9A1D4E76EF55B04E8588308C4FAA4087F64B69D5B625290C96AA7C0
C158D3523FD7B4A1F651CCCB554A8C911421EE3ECDE62367C3A2DD0C59BE745B
63143130E23488E3E677871564ABA03219975D031D8975BA28837E986CD1D60B
17DA2A733E0A440A8012DF2679CC1C7C2DDE41B6F6014E04A12DB6F59AC5AC50
DAFF1A7DCCD90B1492D27CEF5F947287E90852B0EA12CFCA115A8148BAF8961F
9C4F5B09890F53D53CA401BFE32B7186724B5AE98BED4072310BE35477EF3C93
0FE2494D582C2CD89366E5CBC2FA9209658A6DE1A5C5273EFD598614E042ED5D
C586D69EEA4B6603E088D27DB7F0925D3FF6EBECB5E84CACE954C255CCA2CAFA
35AF5A4CFDDBFC8F728A47ED37A1F9D1837E1995DF59E00EF51E05B8D3498F7A
4767751C45430518B663F812DB7BFA7457F1367759ADA00287AB58249F9AB4D9
8ED85690759FFE68EAF8B7D7531B30B5A8C9DCDFD0B5739A8CCC423C65108011
554CA05D11C284081467386B9DF645005833089C6CF20B2FCE973AA2C3BCD62B
71EC6E34242F6A47F774B6C50A0F28FB29367AA1CEDBCE1599A82D2A23AE39AF
5DC7E3775FEA36BCB784B51270EE4484319B558D219A4BBC7B1FAE6056D05B24
00981BC3525DD182D866D35EC7356CE60A10543BF6E0EF5DF245C4E1BF8779FF
AD3D155D697E3568F1079240AC9F11D230FFE88BD302D9A5422757BCABAAB995
C9E3ECD6EAA8CCED5B779BFA930682AFF0DF1D65B67509A96E1EB19207F2496D
B59A6C19C6B8E65E40DBA432A59936A9B12C1450C6C4E3082C40BCC23F103113
0C97AFEA24EC257776F29E7EA772AF6054C0167FCEFB23E40C67BA35C6FAFBFD
344703942CEF745CAC3D1B4200978910527E17DCECBB57570379ED7B38176C0D
3F9D5E2E543EBA83F769A7914A1ED35BE3154ECC80A9E54B103B21A5884A2748
8AE654444B99FBDEE3A03B045AA97AE30EA726CDC2847241C84C2B1AD942FE29
392435DDA960609E0E28F7298F65B9F318FD20F4A3FBAA952388ED19C201A531
6EB719CF0288E47E7AC09254897576F7488332B3281DCDC3067F6A959D1871BE
C575BBD3117F9AEE3893532D29B8DA36BCB02AE5AF5DF971E53F496E7E6971E5
34D23B63E3C72968C87612ABB5453DE3A7DD36BB790CFBFAB799BB257E8020F7
205954042FC35A72567DD124D5F7EF866E1FDBEF3684206C748495560743210E
7045F60082ADC9396D2D8E23A06A5CE3FBA96D67ACEC937E3794D4F97D7C34F8
4D4C8CF1DD71430A343E4AD88318FB5621847AD6EFF5BB11CB6010B64AB46C1D
C4355CDAD9723FF64BFD3809EAAC60727D6689096427FA80BD1F6A145D2A87E9
80122D9DED26BFE2D709C1CAEF06626838079548029D580958A278DF3DBE320F
75868795EC435315144510A90FA6C6DC21319EFD81C3A7CF141DA7D28865B4E2
5A045ABA961EA44EFA17C4C9F2C93FFA23D9F1244C10849165CC96577A89D215
0FD82E3029957788C1BCDD02A38C22899CB1E7D70F65AED2829D7D41E45B25FB
D3669D55DA5B4D0C5BA88B2F421B4EB732F229DA0EF8A365EF8CEE786B90AC50
34C9E78B45EE166C24C07655173DD57CEE30519D89FA5A1C533EF65FD6FB7369
0946012772D47E247947AEE88B04B0EE1F9CB72D39C245B41613A2E4B9516C45
DE89143B9B825698817C58FA600C8EE798C524370E78DDC93C40066A568462E9
AFEA1B654E4D363DBB7408A65B89DCB046FE0C0A22FA4ECD9880F8C055544C8A
4E7CEFE1702CAD7295C5511E9AFB6C9CD9C3BCE0FA3F2E01AA2192CFF9150851
FFC1D4367F546FCBF7D74BD1DC8A78BFD7FBC6A9C37FEB2C7EF3559D65EAF1E9
127C660782DC128A982106566142D1B604856C4784217BFF4BF577DF3ABD1097
E20B6823686FD9868BE346779B742BD88FA384A2A81625E0CA6A214129388089
2808F399A5C09D53A775F8185FE61F8ABC5D900495D50162CC8BF510203D7785
516C4E61CF223B5156CF780F1977F4985970AAB2AE31A829DFE654241F5C9656
EE21AB99D89799426E022883B5F41CAB2973C64F771B50877EDA4936A3DC09EC
2AEC87CA6C0F432B6116FF758F91A2A72200C23118187C64A7761C82DCFE92C9
B8D24C9CF3B832AD8A6B7CC65CDB06B5395ABE57BBF97BF2400D867B93F9FE83
B06BEA58D7B0BF23554A0AD51716F9629A10B8A73D39B09BE7F011BCD6E28F43
906C294F16BFFEB8058FA567EB19EF5F1DBD675FDFDAAEBD6473BA8933D7FDB6
F78F845B9B7A7DA070658A81F5E2DEEFFA21DECFD137F097A1818E9E196E83B1
0ED71A577444A2253DA67D5D2F17C1FAA016431FE752ACE2007519AB984F595F
AE16963F97C96D36A68547C0A308E6B452BEF28E7B6F54A287216D6F94C12F42
B28FEA5C49B00010E4FE9A0508AB7A47F7AE4FFE7C5F108697F00E10CFBAA9F1
DE9687ED9CD699ACF1B8FAB3915477EC81D54138B848B822982BEE35F3CB4F2D
25A8607C48176EB280F805CD3054BD50B922AB3D56FC3307939C3311055C33D2
F3181B354476355BFE85EC9244431801BB006C05B9EBEABBB77237FE8C451B9C
1DD171301211D58BEA048FE9D33E7788F2822A6FE66D9A98DA80F1D384BE677C
E2D6B35CA90D9AFFC4C00188FC0315F1E03B51C127E0F6D6261DA7895B99EB5A
43AC5C11ADF166DD3B9D810B819D7F29C27FB9860BCC8BDCFE6B80B4CE673AAD
1D2E0BD5A518D2D69365D625C6AD9858562B6E123A971C65C3C924A317B6C602
A2E921351E7CB09E4901540B69444DFC5AE211E9EBE1D50A363B2D238F03737D
9780BA369CF36628227D471E01410FDA3DB01C113AB2B947146C187AA38A1800
133272269EBFD8D6E177E28B8D5B6B48A64A9E48A9544DD3D168D9F735CCB73E
09B739A72D2741809432A7FA88FA8B82A3187457280C51EEEC8EE881A6C92AE8
5F7AAA5224DDBE38BCDB486E5ACCF3A5C5CBD51D976773458A61579AB83D0B0C
13A39C3215E03050BCC2CD90D22AE2F9EE72F4257C74B5BF81050642654DCA96
F940CBCA83D21FD77950096E4072B82A9A8D69F1C5233E3A61CD8941A837CFD8
2AFE4D00DC6F97B811975B1AEE8E73FA0C72379FCDEEB6E2601B4C235F39ADC6
80B7249470997D0E2025A1AE1D477CFC9885F7C8AEDA6EC91BBE6DCD977A91F5
29D5EE7369E9F0EDF83EAABD8FDAB55467B0369ED09828625F9B11D754A027B2
BADE0ABB843FFA8143E455ABF8A78F4E3D32C0245CDB566ADDEB73E854FAA7A1
2C5D25F04DBE481CB22EDFDA882850919AAAE0550F7F347A62674E34ECC44A67
3152560779BD6F810E6A72EB472984EB5E058F9695D222BBD42F9D117594049E
FFCE3766AEF63883AFB4AAF90C1236281A2E24EF4E4317892433D11B6A37D2AC
10DA6D104AF92926C6A8E66F0269DB52BB5C2FC197F3C97E49CFA8379985727B
B96CA6538492B747B0C26C222836AF299D0E8EE28A41E8243609A906B8912BBB
1CA9115BA50F7FEC4A43A71A4FDBCE040CEC354AF4F5F38C9749970511544824
39D61B64EA751B42A132F49C570315802B37397279FD3749156B669F9EECAEE8
FB296390E86A576D5D41C81F5A288CA5AFBEA6A172D9A42871F114D74BF2AA67
114FF476925663CFE76A309EB9E433093897
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 69 /E put
dup 78 /N put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D72541D4BF394075A099D0F0A77E47E0
0966D567604541C541E4E4808926B83D1377E1D5BCA5FE77B3C3D97DACAAA44E
003EB7CD4FED6A68052CCC8451C2F1E842A6AFED5B60BD4F9E38D477911F73B2
82E116CEC7C761A258AF3441B5F0A705B6894008A2947A688794AD21C2B1400C
8448265C92CBFEB7621926AE4DFFB7CEBFDA12B684CF05B2C8519538212ECB8F
903C670BC7F69F52AF044DB70E09909D128ACEBE7C1E3D1A1AA3B4C5C720C950
A34E76CA42E418A9BD319644B28AAA36E3418892F796966BE4BF0E835D9A2905
3EED631BF0DB2EBD37FBA8688109A20F7E91E6D3BBFEACD34FAD2C98592FDAD3
E08F0F18DD7A950F3803E93E376A8CF26BBFFD1EE80051F9FF265F494F9315E2
B902C07D64DDB71A9E49E9CABC44C43E687C2A19027ACDE534EA17B39BE96D9D
AE2169286E78E3269FD97D2A391A71908EAF7E6486D6405CBFE48D0E4B8864F0
2340B969C5BB80849B85FC7006B4D84F82C942DB2BF233251B98B19FD5478632
497A47ACD7AF3B01415C84E107DBA33396DFFF87BF8ED660121EFDA151E9A535
6B282A7E2BDD05C464933EC0E0641EF164F40307980F88C170A3043386DBF2DB
830FEA0084A30F43366C2810885AB080BD3EFAA7E1E787BF9FD5A08194388E73
632D5A5728B40B21479ABE6075C14CF126DEAF16122B9C1B23012A936C64E2A1
DA14FB7C18CD9A1CF3490DE2628D76E779B3B2EFF66901AF5A6702D5798C2957
482C77965891C2E5FD666F2A3766F6995ED96AC7E5F7DC8394149222779410AF
291A3E9C8D1F18AC8EE6ADE8ECA01B6964B9300EF22AF26E9A3395A393015F7D
E92D0C29A598D260CD7B15251EC2409DDDE6D4FBE867AC2E3DD50B51B3E00373
853A389DBCCDD28567C752C1764BAF708D71A3F43C7609A5D16A8FCE78439F3B
87304FA3A5FE39D3C3F0BF8E17C809CA54913EBB1A8DE59B7827277B2F735058
3C4E210F9D2333CBC3856FA2A355DE04FC94A0CB00A4E69838AFC87475C33BAC
314599EDEB48B8BDB7575528F784C8A7294057D574BB1F650FDE3BE163CE5FCB
3C8AC46467D116562D063879547D400E166BF617D005A1B66901FCCB6A59564A
D89EE4C8C0E827D123C97E5A50E2893F38AE75FF33C1E15672196590143C6B25
AD9213CD83BE5DF31B4B761593282E52685DEFD2077F250FECDDAF21B2D8B1C2
41AB1F7DB0F5399D095DD477CF48A227ABF3F12CB6760D8BAAED9629A23BE1D0
7D059F87E49A1B63901A803A864A675CC3D4475DF3CDC3A6CBBE7E9D4FC5D0DD
EAABFA1B393188E3B86AF94562EDEF86759F5E45C647311F47C50A99F058DE70
A35E5F991D832B69EDC1ADF6A44C14253A2DD62956E7E62A9945EC42C3BA235A
987A4FDEC7EB89B397A2A573ED133592379C69EF6891CE613DC1F2A9F11CD308
70F7219E2A0293D95CA5506E7A4024E7FE0615A7424634903D605DF0B4173F42
F3EA152CB1E8939A01C04C8C967F0E6FA4B868F257A2FFBABD7081157D8204D8
F00DB74476F7688F1F0A77FD022E68D605DCA05BC892EB1F3AC62EC62C007019
C11154A03322380FDCF0414DA9371874E0C9D01247E2B1E01DEA57177634158E
CC146C5FFADF727CF46E01DAF1F09895318112BDDA0F6B147CA166198CB1F46B
A15909EC209CFF6FFFA58528C1D7C6CA41C7B3810786DA790B96FAE44FA416DE
16BF51B8ABDD3142A6A95712A6FF87BA046F358E90C9913BFED28655FA2CE599
EE8435411894C82D676651CA6F1CCB5EA8185D048CB3D47CDB2055A655089910
B4B77C20CD572711047FA79D378932CAC1A1EB4E05F2FA6F10D2BB4C014F0639
CD8FE48318D951F3CFA40C1AB3C2C93E0444D8F04A928CA7BCC627E5382BC673
CA71C71AABDEE5461126E48729554CF75D9DD13AA9FCC44FF9047FE12E60B88B
A1B66FD1FF1CB457B90E50DCC32FDC6717F2CE8C46DF6BD900CED67B280CBECE
82C1EE12DBF9E5688735C1DCBB99D47E47F3CEC020EA215517A59111FFA0BE51
0C50EC6965C87D64AA3D87C1F064FD4755278D4BE10C0AE0443A4BC9355CD598
70B862192ABD8F9DDBEA546102BED748A25BEFBF57CE9BDED915FDD905D1F792
16DF9589665741AFD789B7207F09C66BE395DD3886B474EC455E236FC2AF3A35
7F297C76929E41135FF2651B16C545D78E4B0EE4200A9A3B3E9AD301180E4CB6
016BC3BF39C5166A101125668E2EA412AA9D267EBCF55E5F8DB319549AE1121B
A0F33335CEA66C0E2A14CDF709DD6ED93D942C5B203387BFE7A3C17FF1F2A10F
8F4451FBD465D0C084D89D41F4E868E2219C9F998591A43B78AE202A917596DE
68ED083B1E94EE4E08A9E371DA6D5393924B42A31E883A8B70E76C416444D4E1
4FCF01E45E0DC875D992EAC518796784D68A3B532EDE6A678292F8723B679F66
85EB6861257E116FB07DB076ED86E1467125B7EB3C9E4519A7BBB649AF76B58C
80A7A0411294A9580D4F600B1DCA5CCA5CAF12EE959E2EE44FDC56D33C5F1F41
26E0F5B54EE949C2EDFC62BF87E4D69C968CD9703B8C9B2470A6F092C8D1A075
7FC7DFBE3471A5D129B10E5E5A9516E3C6709F807289ADF9F0088E0A2747CA7F
B272C8E6D44CAD33F047A131779A9A7199F25A09A874B3EB897D56DE202E989B
5FA8A549B8B8EE0EF20774C077797556599150C81708EA8F49CD697F159D058E
F14AE9FE9C130E7C8191C89E6C889473300EE38C1EC71BB0E95D02DC323D5074
08CBC8ABB949D95BA0B1CBB3472EFB35F3320A1E84B446417368505BBB3356AD
55AB100822D1BD47994B749D3EADDAC42C5E4BBC29164FED47ADA48D2F9101AF
24B043B0A192423B126579AF5FE414F9470CBE339E7DA6D8B4AF7DFBB845D102
D8893EC2E33BFA96D9A986A1D30039A911577A46BD5CC74A00544B089A98F09F
1CC89C7588077F4403B265749508C54FAA4123D80D49F204BF6AE81F1B5A05A1
59A2E91728C428915F68F0B9DB2B1F19FDDBB1BCA214D3A4438B4B895284FFFB
EF43E8CEF7ED92E317CC1E913DF303984336752336538269844F89E9AEC029A7
1A1BF2130166371E60A53F599FDA0CBCD7B9A7BDE038DB422FCECCC4B5F61AEF
9F913F5ACB8354E6596A25E03775CEE0B939301E368AAA66A0D10E8DFBE4098B
7C7C3804853A248FF205891AE1C245D8AA9CC3D44DDE38391000FD07B6BF02CE
7F548595EDD01C87C96DB4F055201900E40F502B2963E6FF261F40A7F3BE0849
7B6952FB582FEC9E0DE1720F0E4481D5CF8898238BD645514FED34571907A928
A68A5A72BF3574751B685CA5557BD08B6FC3D6E5DF02E130FEB89893E94B815E
46EC382125BCDFE4604158EEB98A2861029C9FB50CE54B4FA36ADDB59FBC7BC0
91EE85496A728BD3E74696A4E85914F5733052C01C0E1ADDB14968C961B9676A
81F71225A8680B31F6E6DD15952DDF5D7D336622AD330368D614F2BD6EE5E6F1
25B965FF9BBFB68671142FE946ED0D2A4F143D425D9B2AAC69A2EAE61FA31C91
A0C4DA03BC342FE90B7B3D7CAC53C888D415792BE85D646C9E44D0856328EEF5
33C2A0752F6B8E16116F83B5173B3722D03B3F411445CD4DC1C3457B93719661
DA567DC700E384917F638DED53048E4BE554507DC7D9B762DDFDD6A0BD6B5759
B6E26DAC518FCDFF72F2C67509719799F396C25CF320137752A678CC0942F22F
29E6DEAA4A6ED01C5BFD6E7A9ECEA4ED7CAB61EE1B47C5708A6748794C5151F4
22833949822B87255831E54F4F760204A78F3D7A610BEACD5ACE16DBE056E9C9
8A839BD262702A9F8FBB62C25D890CADA50F854130681EA586EDA3476A21CA5C
2D3855ADB3BC25C404517D01B4B9599F20480D1F0F87026CE3DE5DDBF5B3900B
AEB2AA27813CB8DEB4091EB0C3E41107FC17ECF20C0E2877E91F63194FE4DF5B
7484149D9BE85207A607D462DFBAA120496AA359E5A2DDA9C21246B2D33F8046
D859DFCCBB84587260AD3C0016B3CA08FB194D9B79B9C2FCD7823209BC12A294
E80D744233CCAC18B369DD9512E7CD009AA2C7F46EDB4DF599588A78EC0FF0E2
D83E513124D6C8B194257481D8091136EE8F5799E9E160DB12AF7656EE0A7257
A4F1A7B695BA0042457A4E764E2012647F762DA19AEF2602BE64068FEED2C012
1C0B316D1EEF3886CDBAAB7523B6AACAB26FBC0967D081FF973865535B6C740D
D8368E0137455756C98E51B8CDD3A680BD06FED1DC58DEDA6A4B29B6CD68891F
6EBD80D69BFADD458699B713E8EADE071B1A1BC645FD5F3CA0243E2B9C786D61
FFC3A96217FE8069CC1EAD6166F244289458036778516E285F944E2342D281FA
A5536D3412BD36F18046C2056F19F21F1171BBB85CEF99ACDC022158991DC370
02B3987200BA488ECD5DA6D1103227B699735E0CBDB1602FCC8114E9F312311C
9E93D9DEBF3B1708342415BDD144C2E7F644EAB8BB7EF226F862C9EC24855D12
F9D786B77B160E7370E8DDAB295A641F76FB07898080FB0714C474AF4D45324F
CE23F2FEBB935EE097E94AC42556DFF7E9CB1A775F6983E76CD7882FA036E25B
7C1FA5FFD890CDA2BA9FFDF9FA656DD780741373C54D90F3A941662D034451C4
29AA55D05F5E101048CD99B080B68FB9751A7A4FFE887AAC4ADC529310AF077D
0B058E86DDDDE1E9D8BA2BEBEC44FBB464841A920A7F56BD1D611F255305D605
0F671AFA8D596B3F299C8B28083D38EE8D7219709EE84B4B483290922C75CF97
61D7779EEDD1B1500B7068541E089572BAB368E1D5D243E319ED60DD4B04308A
969E7C6A86F132885D507A183B7328293E1E289D0AC688D8E1D225CB8F2F07FD
48F63031F4B42E084B0816749BB55C82542FD21DEC33DE4F19BA05AFA109697D
941EEEB5141523942A90405F3E30375660856BB09FA3E89FBAAC7967539364C6
85F76C61CE98ACE7F8A4CB9C0654D35E0037EC43070940CB481DEBE7BC9EC93F
2DA3DECD0AF7310661EC0C5089B52EE449C958822A2578E6199B11A28841CF39
E531940D8E17492572AF92E80737ED35411F4E065B5B334CFCC8100DC5EF265F
2886EBFAB8CA8D614D9B04BB3255C6A37231114041D4AC8D13FF5531E17BD767
044FFD9EB8E8C9BA2850EE514328FC7356E296108420F6AEFEB3C59B6E2679F1
46633C3A5E09A7D4D6CAA626D3F02FFC4F4EF8AC22FD861C7CADFF667BA36C2A
2685BA3A3DECEAB6B1DB8633748E57815D07E0C85BF8C394C3766F20A4967ACC
1C1A62B200D021D4D5648883BD979801BB94F9A9920628161BCD560869102FB3
19F968D1BE4A317524212794457A4052750774224BC8A9400A95E6C97FC0CD3D
8DB9D182BDF5E1B57A4CBDA7B5BEE4C2B8BA85005FF4EE48407DB84A55A64B61
F148D1A37C17C8E0AB9C810040085A669F016EF7147669C5DB0D0753BAA7AA98
D4B1F064ADF56D9CF8D4A03D96FEB71C6859E831E9521700635ED9D412BBD2AE
F606D01D2BC7F4C1DC1C3E985DB3F2652C482305DD0B8B60E562303F77546FEB
ABA2EF25EAA16EB37549EEA052AEA3AA8E8887098AC5B5C803CE5B186BD2F130
76297A0E272819182F032E14E4D0B018A0D298CD90EBD4327C5DBED7263027BA
95CC4FA9E87517BC9DB61DF296F77B3FE9913DD78037CD464E1683807E1CE831
A2561D42C83A993DD90E03CEC83DA6B26D69BCEBF79980C48CC5FF5A245A3250
57E2ACECF984F0B7BC858C77DB085DA686BA3AF939CD7C4F013415EACFF1A043
B0099099B17FE910AB3FEB37E78106CA940F4CC9DF11F28F9F653B3DED5A306D
8520E8E3BB7211FC427905D0177626B7264AD982E5A38E16B8344E4113550824
67DD70DF2656E7CB2AACF083B4F98A8EFC174A8FC3BADAE285ACB7DDBB408C31
E1E3E2D237B9BD72D0FFE7668C054C8298D2B7669655694CE6554DA290E162AF
051A317CB0FB1AAB87ACF7787F3DAA3ADD717721ED97B790AED87BDEAEDEB8EC
76DBE86FC4F8526AA367DBDDE76A8BA12DEC7EA144C677C24680C25F68CEF9BE
0280C183E882889013170F2F59BF5B4962E7728EDE5A8A2E08D01F17573362BD
6795F743898E50252B7803E5217FBC590B33BA23CB20EAFCDA4D5B5AD848FB5A
DC3973F105C06BCAC56BD4C52F57C919188462110CE487426CDF9373F416D154
3B7E8ED53A23EA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (yuhowNote.dvi)
@start /Fa 135[44 3[44 44 44 1[44 44 44 44 44 2[44 1[44
44 44 2[44 44 97[{}15 83.022 /t1xbtt rf /Fb 133[44 44
44 44 44 44 44 44 44 44 44 44 44 44 44 1[44 44 44 44
44 44 44 44 44 44 3[44 1[44 6[44 44 7[44 9[44 3[44 1[44
44 3[44 44 44 44 44 44 44 44 44 1[44 44 1[44 44 44 1[44
2[44 44 33[{}51 83.022 /t1xtt rf /Fc 135[35 1[31 5[32
1[38 54 2[25 106[{}6 49.8132 /CMMI6 rf /Fd 249[48 2[32
3[{}2 49.8132 /CMSY6 rf /Fe 173[47 9[47 16[66 66 66 66
66 66 50[{}8 99.6264 /CMEX10 rf /Ff 134[44 1[60 44 46
32 33 33 1[46 42 46 69 23 44 1[23 46 42 25 37 46 37 46
42 9[85 2[60 46 2[57 6[30 2[54 2[60 8[23 5[42 42 42 42
2[23 28 23 44[{}37 83.022 /CMR10 rf /Fg 198[30 30 30
30 30 30 30 30 30 30 48[{}10 49.8132 /CMR6 rf /Fh 133[40
47 45 65 45 52 32 40 41 45 50 50 55 80 25 45 30 30 50
45 30 45 50 45 45 50 7[72 4[70 55 71 1[66 75 72 87 3[38
2[64 66 1[70 1[72 3[75 1[30 30 50 50 50 50 50 50 50 50
50 50 50 30 35 30 75 1[40 40 30 3[80 22[55 60 11[{}63
99.6264 /CMTI12 rf /Fi 135[40 2[41 25 1[32 1[36 1[43
62 21 37 29 3[34 2[31 1[37 9[67 3[43 2[45 10[52 1[50
53 53 37 2[35 1[20 20 25[46 8[35 42 8[36 1[45 11[{}29
66.4176 /CMMI8 rf /Fj 153[22 31 39 43[35 3[35 35 35 35
35 4[55 1[27 27 38[59 1[{}13 66.4176 /CMR8 rf /Fk 145[50
3[28 2[50 50 51[66 8[100 16[77 2[77 77 2[77 3[100 6[77
2[50 1[28 77{}15 99.6264 /CMSY10 rf /Fl 207[19 40[55
55 2[35 1[20 55{}6 66.4176 /CMSY8 rf /Fm 233[70 10[74
11[{}2 119.552 /CMMI12 rf /Fn 134[71 2[71 75 52 53 55
1[75 67 75 112 37 71 1[37 75 1[41 61 75 60 75 65 15[101
92 101 9[88 3[102 12[67 1[67 67 2[37 45 6[105 38[{}31
119.552 /CMBX12 rf /Fo 129[49 5[55 2[56 35 46 2[49 1[58
85 1[51 40 3[48 1[51 2[51 9[92 3[60 2[63 75 8[63 72 1[70
74 73 51 1[76 49 76 27 27 25[63 5[50 1[43 48 59 8[51
1[62 11[{}35 99.6264 /CMMI12 rf /Fp 131[98 49 43 51 51
70 51 54 38 38 38 51 54 49 54 81 27 51 30 27 54 49 30
43 54 43 54 49 3[27 1[27 1[73 1[100 1[73 70 54 72 76
66 76 73 89 61 1[50 35 73 1[64 66 75 70 69 73 1[46 1[76
1[27 27 49 49 49 49 49 49 49 49 49 49 49 27 33 27 76
1[38 38 27 76 3[49 19[81 54 54 57 9[81 1[{}80 99.6264
/CMR12 rf /Fq 134[59 1[81 59 62 44 44 46 1[62 56 62 93
31 2[31 62 56 1[51 62 50 1[54 12[78 62 2[77 6[42 88 1[70
74 1[81 11[56 56 56 56 56 56 56 2[31 46[{}35 99.6264
/CMBX12 rf /Fr 134[85 1[117 85 90 63 64 66 1[90 81 90
134 45 2[45 1[81 49 74 90 72 1[78 13[90 120 1[110 6[60
126 1[101 106 1[117 13[81 81 81 81 81 49[{}32 143.462
/CMBX12 rf /Fs 138[65 5[59 65 5[65 59 5[59 7[88 16[88
4[85 13[59 2[59 59 59 1[33 39 45[{}15 119.552 /CMR12
rf /Ft 137[83 88 61 62 61 2[79 88 133 43 83 1[43 88 79
47 70 88 2[79 9[164 2[115 88 4[119 8[108 1[115 67[{}23
172.188 /CMR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269
a
SDict begin H.S end
 -78 -269 a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -78 -269
a -70 46 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -70 46 a -70 46 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -70 46 a -70 46 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -70 46
a -70 46 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -70 46 a -70 46 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Introduction) /OUT
pdfmark end
 -70 46 a -70 46 a
SDict begin [/Count -2/Dest (section.2) cvn/Title (Paper survey) /OUT
pdfmark end
 -70 46
a -70 46 a
SDict begin [/Count -0/Dest (subsection.2.1) cvn/Title (Q\046A in the section of the \040 scheme)
/OUT pdfmark end
 -70 46 a -70 46 a
SDict begin [/Count -0/Dest (subsection.2.2) cvn/Title (Q\046A in the section of the Euler solver)
/OUT pdfmark end
 -70 46 a -70 46 a
SDict begin [/Count -0/Dest (section.3) cvn/Title (Formula derivation)
/OUT pdfmark end
 -70 46
a -70 46 a
SDict begin [/Count -2/Dest (section.4) cvn/Title (How to develop our own CESE solver)
/OUT pdfmark end
 -70 46 a -70 46 a
SDict begin [/Count -3/Dest (subsection.4.1) cvn/Title (One-dimensional shock tube problem)
/OUT pdfmark end
 -70 46 a -70 46 a
SDict begin [/Count -0/Dest (subsubsection.4.1.1) cvn/Title (First step)
/OUT pdfmark end
 -70 46
a -70 46 a
SDict begin [/Count -0/Dest (subsubsection.4.1.2) cvn/Title (Second step)
/OUT pdfmark end
 -70 46 a -70 46 a
SDict begin [/Count -0/Dest (subsubsection.4.1.3) cvn/Title (Third step)
/OUT pdfmark end
 -70 46 a -70 46 a
SDict begin [/Count -0/Dest (subsection.4.2) cvn/Title (Python code)
/OUT pdfmark end
 -70 46
a -70 46 a
SDict begin [/Count -0/Dest (section.5) cvn/Title (Progress report)
/OUT pdfmark end
 -70 46 a -70 46 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -70 46 a -70 46 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -70 46
a -70 46 a
SDict begin H.S end
 -70 46 a -70 46 a
SDict begin 18.85004 H.A end
 -70 46 a -70 46 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -70 46
a 207 611 a Ft(W)-13 b(orking)52 b(Note)g(of)h(The)e(Conserv)-9
b(ation)53 b(Elemen)l(t)e(and)1050 881 y(Solution)h(Elemen)l(t)f(Solv)l
(er)1472 1221 y Fs(Y)-10 b(ou-Hao)38 b(Chang)1643 1475
y(2015.12.1)-70 1971 y
SDict begin H.S end
 -70 1971 a -70 1971 a
SDict begin 28.60007 H.A end
 -70 1971
a -70 1971 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -70 1971 a Fr(Con)l(ten)l(ts)-70 2226 y
SDict begin H.S end

-70 2226 a Fq(1)91 b(In)m(tro)s(duction)694 2226 y
SDict begin 18.85004 H.L end
 694
2226 a 694 2226 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 694 2226 a 3080 w Fq(2)-70 2480 y
SDict begin H.S end
 -70
2480 a Fq(2)g(P)m(ap)s(er)37 b(surv)m(ey)722 2480 y
SDict begin 18.85004 H.L end
 722
2480 a 722 2480 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 722 2480 a 3052 w Fq(2)77 2637 y
SDict begin H.S end
 77
2637 a Fp(2.1)99 b(Q&A)32 b(in)h(the)g(section)h(of)e(the)h
Fo(\013)q Fp(-)p Fo(\026)e Fp(sc)m(heme)1930 2637 y
SDict begin 18.85004 H.L end
 1930
2637 a 1930 2637 a
SDict begin [/Subtype /Link/Dest (subsection.2.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1930 2637 a 102 w Fp(.)50 b(.)g(.)g(.)f(.)h(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)185
b(2)77 2793 y
SDict begin H.S end
 77 2793 a Fp(2.2)99 b(Q&A)32 b(in)h(the)g(section)h(of)e
(the)h(Euler)g(solv)m(er)1949 2793 y
SDict begin 18.85004 H.L end
 1949 2793 a 1949
2793 a
SDict begin [/Subtype /Link/Dest (subsection.2.2) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1949 2793 a 83 w Fp(.)50 b(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)185 b(3)-70
3047 y
SDict begin H.S end
 -70 3047 a Fq(3)91 b(F)-9 b(orm)m(ula)38 b(deriv)-6
b(ation)1005 3047 y
SDict begin 18.85004 H.L end
 1005 3047 a 1005 3047 a
SDict begin [/Subtype /Link/Dest (section.3) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1005 3047
a 2769 w Fq(3)-70 3301 y
SDict begin H.S end
 -70 3301 a Fq(4)91 b(Ho)m(w)37
b(to)f(dev)m(elop)j(our)e(o)m(wn)h(CESE)f(solv)m(er)1927
3301 y
SDict begin 18.85004 H.L end
 1927 3301 a 1927 3301 a
SDict begin [/Subtype /Link/Dest (section.4) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1927 3301 a 1847 w Fq(6)77
3458 y
SDict begin H.S end
 77 3458 a Fp(4.1)99 b(One-dimensional)34 b(sho)s(c)m(k)g(tub)s
(e)f(problem)1884 3458 y
SDict begin 18.85004 H.L end
 1884 3458 a 1884 3458 a
SDict begin [/Subtype /Link/Dest (subsection.4.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1884
3458 a 71 w Fp(.)50 b(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)185 b(7)301 3614 y
SDict begin H.S end

301 3614 a Fp(4.1.1)111 b(First)33 b(step)1024 3614 y
SDict begin 18.85004 H.L end

1024 3614 a 1024 3614 a
SDict begin [/Subtype /Link/Dest (subsubsection.4.1.1) cvn/H /I/Border
[0 0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1024 3614 a 85 w Fp(.)50 b(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)185 b(9)301 3771
y
SDict begin H.S end
 301 3771 a Fp(4.1.2)111 b(Second)34 b(step)1117 3771
y
SDict begin 18.85004 H.L end
 1117 3771 a 1117 3771 a
SDict begin [/Subtype /Link/Dest (subsubsection.4.1.2) cvn/H /I/Border
[0 0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1117 3771 a 69 w Fp(.)50 b(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)136 b(11)301 3927
y
SDict begin H.S end
 301 3927 a Fp(4.1.3)111 b(Third)34 b(step)1063 3927
y
SDict begin 18.85004 H.L end
 1063 3927 a 1063 3927 a
SDict begin [/Subtype /Link/Dest (subsubsection.4.1.3) cvn/H /I/Border
[0 0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1063 3927 a 46 w Fp(.)50 b(.)g(.)g(.)g(.)f(.)
h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)136 b(12)77 4084
y
SDict begin H.S end
 77 4084 a Fp(4.2)99 b(Python)33 b(co)s(de)838 4084
y
SDict begin 18.85004 H.L end
 838 4084 a 838 4084 a
SDict begin [/Subtype /Link/Dest (subsection.4.2) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 838 4084 a 40 w Fp(.)50 b(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)136 b(12)-70
4338 y
SDict begin H.S end
 -70 4338 a Fq(5)91 b(Progress)37 b(rep)s(ort)842
4338 y
SDict begin 18.85004 H.L end
 842 4338 a 842 4338 a
SDict begin [/Subtype /Link/Dest (section.5) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 842 4338 a 2876 w Fq(17)1856
5695 y Fp(1)p eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -78 -269 a -70 46
a
SDict begin H.S end
 -70 46 a -70 46 a
SDict begin 18.85004 H.A end
 -70 46 a -70 46 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -70 46 a 100 x
Fr(1)161 b(In)l(tro)t(duction)-70 401 y Fp(The)39 b(conserv)-5
b(ation)38 b(elemen)m(t)i(and)d(solution)h(elemen)m(t)i(\(CESE\))f
(metho)s(d)e(is)i(established)g(b)m(y)g(Prof.)58 b(S.)-70
558 y(C.)48 b(Chang)g(for)f(solving)h(computational)g(\015uid)g
(problems.)90 b(This)49 b(new)f(n)m(umerical)h(framew)m(ork)g(for)-70
714 y(solving)30 b(conserv)-5 b(ation)30 b(la)m(ws)f(di\013ers)h
(substan)m(tially)h(from)d(those)i(w)m(ell-established)h(metho)s(d,)f
(i.e.,)h(\014nite)-70 871 y(di\013erence,)k(\014nite)e(v)m(olume,)h
(\014nite)f(elemen)m(t)i(and)d(sp)s(ectral)i(metho)s(ds)f([)2592
871 y
SDict begin H.S end
 2592 871 a Fp(1)2641 806 y
SDict begin H.R end
 2641 806 a 2641 871
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 2641 871 a Fp(].)-70 1046 y
SDict begin H.S end
 -70 1046 a -70 1046 a
SDict begin 18.85004 H.A end
 -70
1046 a -70 1046 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -70 1046 a 212 x Fr(2)161 b(P)l(ap)t(er)54
b(surv)l(ey)-70 1513 y Fp(This)26 b(section)f(con)m(tains)g(some)g
(questions)h(that)e(Y)-8 b(ou-Hao)23 b(encoun)m(tered)j(in)e(Prof.)41
b(S.)24 b(C.)h(Chang's)g(CESE)-70 1670 y(pap)s(er)d([)220
1670 y
SDict begin H.S end
 220 1670 a Fp(1)269 1606 y
SDict begin H.R end
 269 1606 a 269 1670
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 269 1670 a Fp(].)40 b(Relativ)m(e)23 b(discussion)h(can)e(b)s(e)g
(found)1732 1695 y
SDict begin H.S end
 1732 1695 a -25 x Fp(here)33 b(h)m(ttps://gith)m
(ub.com/solv)m(con/cesenote/issues)q(/3)3908 1595 y
SDict begin H.R end
 3908
1595 a 3908 1670 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://github.com/solvcon/cesenote/issues/3)>>/Subtype
/Link H.B /ANN pdfmark end
 3908 1670 a Fp(.)-70 1834 y
SDict begin H.S end
 -70 1834
a -70 1834 a
SDict begin 18.85004 H.A end
 -70 1834 a -70 1834 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.1) cvn /DEST pdfmark
end
 -70 1834 a 169 x Fn(2.1)136
b(Q&A)44 b(in)h(the)g(section)g(of)h(the)f Fm(\013)q
Fn(-)p Fm(\026)g Fn(sc)l(heme)-70 2050 y
SDict begin H.S end
 -70 2050 a -70
2050 a
SDict begin 18.85004 H.A end
 -70 2050 a -70 2050 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -70 2050 a 50 2224 a Fp(1.)j(Wh)m(y)34
b(do)s(es)f(Eq.\(2.4\))g(imply)h(Eq.\(2.5\).)44 b(?)-70
2291 y
SDict begin H.S end
 -70 2291 a -70 2291 a
SDict begin 18.85004 H.A end
 -70 2291 a -70 2291 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -70
2291 a 50 2464 a Fp(2.)k(Wh)m(y)28 b(can)e(Eq.\(2.19\))h(b)s(e)f(pro)m
(v)m(ed)i(using)f(the)g(fact)f(that)g(the)h(total)f(\015ux)h(of)f
Fq(h)2978 2428 y Fl(\003)3043 2464 y Fp(lea)m(ving)i(the)f(b)s(ound-)
174 2620 y(ary)40 b(of)f(an)m(y)i(space-time)g(region)e(that)h(is)g
(the)g(union)g(of)f(an)m(y)i(com)m(bination)f(of)g(CEs)h(v)-5
b(anishes?)174 2777 y(Can't)33 b(\014gure)g(it)g(out.)-70
2838 y
SDict begin H.S end
 -70 2838 a -70 2838 a
SDict begin 18.85004 H.A end
 -70 2838 a -70 2838 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -70
2838 a 50 3016 a Fp(3.)48 b(\(In)33 b(page)g(301\))e(What's)j(the)f
(\014nite-di\013erence)h(appro)m(ximation?)-70 3083 y
SDict begin H.S end

-70 3083 a -70 3083 a
SDict begin 18.85004 H.A end
 -70 3083 a -70 3083 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -70 3083
a 50 3256 a Fp(4.)48 b(\(In)37 b(page)f(301\))g(What's)h(the)g(meaning)
g(of)f("the)g Fo(\013)q Fp(-)p Fo(\026)f Fp(sc)m(heme)k(uses)f(a)e
(mesh)i(that)e(is)h(staggered)174 3412 y(in)c(time"?)-70
3454 y
SDict begin H.S end
 -70 3454 a -70 3454 a
SDict begin 18.85004 H.A end
 -70 3454 a -70 3454 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -70
3454 a 50 3652 a Fp(5.)48 b(\(In)33 b(page)g(301\))e(What's)j(the)f
(Lax)f(sc)m(heme?)-70 3718 y
SDict begin H.S end
 -70 3718 a -70 3718 a
SDict begin 18.85004 H.A end
 -70
3718 a -70 3718 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -70 3718 a 50 3891 a Fp(6.)48 b(\(In)38
b(page)g(301\))f(What's)i(the)f(ampli\014cation)h(factors?)59
b(Also)38 b(what's)h(their)f(meaning/usage)h(in)174 4048
y(the)33 b(Leapfrog/DuF)-8 b(ort-F)g(rank)m(el)31 b(sc)m(heme?)-70
4114 y
SDict begin H.S end
 -70 4114 a -70 4114 a
SDict begin 18.85004 H.A end
 -70 4114 a -70 4114 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -70
4114 a 50 4287 a Fp(7.)48 b(\(In)33 b(page)g(301\))e(What's)j(the)f
(meaning)g(of)f("t)m(w)m(o-lev)m(el")i(and)f("three-lev)m(el")h(sc)m
(heme?)-70 4354 y
SDict begin H.S end
 -70 4354 a -70 4354 a
SDict begin 18.85004 H.A end
 -70 4354 a -70
4354 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -70 4354 a 50 4527 a Fp(8.)48 b(Wh)m(y)36 b(do)s(es)g(not)f
(solutions)h(of)f(Eq.\(2.22\))g(dissipate)i(with)f(time?)51
b(Or)35 b(wh)m(y)i(is)e("no)g(dissipation")174 4683 y(equiv)-5
b(alen)m(t)35 b(to)d("neutrally)h(stable"?)-70 4744 y
SDict begin H.S end

-70 4744 a -70 4744 a
SDict begin 18.85004 H.A end
 -70 4744 a -70 4744 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -70 4744
a 50 4923 a Fp(9.)48 b(Wh)m(y)33 b(is)e(the)h(total)f(\015ux)h(lea)m
(ving)g(an)m(y)g(conserv)-5 b(ation)33 b(elemen)m(t)g(zero?)43
b(This)33 b(question)f(is)g(relev)-5 b(an)m(t)174 5079
y(to)32 b(the)h(de\014nition)h(of)e(Eq.\(2.28\).)-70
5146 y
SDict begin H.S end
 -70 5146 a -70 5146 a
SDict begin 18.85004 H.A end
 -70 5146 a -70 5146 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -70
5146 a 1 5319 a Fp(10.)48 b(Wh)m(y)34 b(do)s(es)f(the)g(term)g(")p
Fk(\000)p Fo(\026@)1272 5283 y Fj(2)1312 5319 y Fo(u)1368
5283 y Fl(\003)1407 5319 y Fp(\()p Fo(x;)17 b(t)p Fp(;)g
Fo(j;)g(n)p Fp(\))p Fo(=@)5 b(x)1963 5283 y Fj(2)2037
5319 y Fp(v)-5 b(anish)33 b("in)g(Eq.\(2.29\)?)1856 5695
y(2)p eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -78 -269 a -70 46
a
SDict begin H.S end
 -70 46 a -70 46 a
SDict begin 18.85004 H.A end
 -70 46 a -70 46 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -70 46 a 1 146
a Fp(11.)48 b(\(In)32 b(page)f(303\))f(Wh)m(y)j(is)f(the)f(condition)h
(that)f(Eq.\(2.30\))g(b)s(eing)h(v)-5 b(alid)31 b(uniformly)h(within)h
(an)e(SE)174 302 y(stronger)41 b(than)f(Eq.\(2.28\))h(for)f(a)g
(higher-order)g(expansion?)69 b(Are)40 b(they)i(the)e(same)h(thing)g
(but)174 459 y(just)33 b(in)g(di\013eren)m(t)h(form?)-70
514 y
SDict begin H.S end
 -70 514 a -70 514 a
SDict begin 18.85004 H.A end
 -70 514 a -70 514 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -70 514
a 1 687 a Fp(12.)48 b(Eq.\(2.33\))42 b(ma)m(yb)s(e)h(is)f(wrong.)72
b(The)43 b(partial)e(deriv)-5 b(ativ)m(e)44 b(in)e(the)g(left-hand)g
(side)h(of)e(Eq.\(2.33\))174 844 y(should)33 b(b)s(e)g(with)f(resp)s
(ect)i(to)e(x)g(instead)h(of)f(t.)43 b(Will)33 b(try)f(to)g(double)h(c)
m(hec)m(k)i(with)d(author)g(though)174 1000 y(email.)46
b(\(ST)-8 b(A)g(TUS:)34 b(Prof.)45 b(S.)33 b(C.)h(Chang)f(replied)i
(our)e(question)h(and)f(con\014rmed)i(that)d(it)i(w)m(as)g(a)174
1157 y(t)m(yp)s(o.\))-70 1217 y
SDict begin H.S end
 -70 1217 a -70 1217 a
SDict begin 18.85004 H.A end

-70 1217 a -70 1217 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -70 1217 a 1 1385 a Fp(13.)48 b(\(In)35
b(page)g(304\))f(Wh)m(y)h(is)h(the)f(lo)s(cal)f(con)m(v)m(ectiv)m(e)k
(motion)d(of)f(ph)m(ysical)i(v)-5 b(ariables)36 b(relativ)m(e)g(to)e
(the)174 1541 y(mo)m(ving)g(mesh)g(k)m(ept)h(to)d(a)h(minim)m(um)i(if)e
(the)g(space-time)h(mesh)h(is)e(allo)m(w)m(ed)h(to)f(ev)m(olv)m(e)i
(with)f(the)174 1698 y(ph)m(ysical)26 b(v)-5 b(ariables?)42
b(The)25 b(relev)-5 b(an)m(t)25 b(description)h(is)f(in)f(the)h(end)g
(of)f(bullet)h(\(a\))f(at)f(the)i(second-last)174 1854
y(paragraph)32 b(of)g(the)h(left)g(column)g(in)g(page)g(304.)-70
1910 y
SDict begin H.S end
 -70 1910 a -70 1910 a
SDict begin 18.85004 H.A end
 -70 1910 a -70 1910 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -70
1910 a 1 2083 a Fp(14.)48 b(\(In)28 b(page)h(304\))e(What's)h(the)h
(meaning)f(of)g("principal")g(and)h("spurious")f(ampli\014cation)h
(factors?)-70 2241 y
SDict begin H.S end
 -70 2241 a -70 2241 a
SDict begin 18.85004 H.A end
 -70 2241 a
-70 2241 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2) cvn /DEST pdfmark
end
 -70 2241 a 170 x Fn(2.2)136 b(Q&A)44 b(in)h(the)g(section)g
(of)h(the)f(Euler)g(solv)l(er)-70 2462 y
SDict begin H.S end
 -70 2462 a -70
2462 a
SDict begin 18.85004 H.A end
 -70 2462 a -70 2462 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -70 2462 a 50 2631 a Fp(1.)j(I)39
b(couldn't)g(\014gure)f(out)h(wh)m(y)g(the)g(last)g(paragraph)e(of)h
(the)h(left)f(column)i(in)e(the)h(page)f(310)g(said)174
2788 y(that)29 b(one)g(w)m(ould)h(exp)s(ect)g(that)f
Fk(j)p Fp(\()p Fo(u)1473 2803 y Fi(mx)p Fj(+)1634 2788
y Fp(\))1672 2752 y Fi(n)1672 2813 y(j)1718 2788 y Fk(j)f
Fo(>>)f Fk(j)p Fp(\()p Fo(u)2075 2803 y Fi(mx)p Fl(\000)2236
2788 y Fp(\))2274 2752 y Fi(n)2274 2813 y(j)2320 2788
y Fk(j)p Fp(.)42 b(Basically)-8 b(,)31 b(it)e(w)m(as)h(not)f(that)g
(easy)h(for)174 2944 y(me)j(to)g(catc)m(h)g(the)g(k)m(ey)h(p)s(oin)m(t)
f(of)f(this)h(paragraph.)-70 3000 y
SDict begin H.S end
 -70 3000 a -70 3000
a
SDict begin 18.85004 H.A end
 -70 3000 a -70 3000 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -70 3000 a 50 3173 a Fp(2.)48
b(The)g(paragraph,)j(whic)m(h)d(w)m(as)h(just)e(righ)m(t)g(after)g
(Eq.\(4.39\))h(in)f(page)g(310,)k(men)m(tioned)d(that:)174
3329 y Fh(F)-7 b(or)39 b Fo(\013)e(>)f Fp(0)p Fh(,)k(this)f(aver)-5
b(age)39 b(is)g(biase)-5 b(d)39 b(towar)-5 b(d)39 b(the)g(one)g(among)g
Fo(x)2691 3344 y Fj(+)2790 3329 y Fh(and)f Fo(x)3038
3344 y Fl(\000)3137 3329 y Fh(with)i(the)f(smal)5 b(ler)174
3486 y(magnitude.)72 b(F)-7 b(or)43 b(the)h(same)f(value)g(of)h
Fk(j)p Fo(x)1802 3501 y Fj(+)1861 3486 y Fk(j)g Fh(and)f
Fk(j)p Fo(x)2214 3501 y Fl(\000)2273 3486 y Fk(j)p Fh(,)j(the)e(bias)g
(incr)-5 b(e)g(ases)42 b(as)i Fo(\013)h Fh(incr)-5 b(e)g(ases.)174
3642 y(Thus,)29 b(we)f(should)g(always)g(cho)-5 b(ose)28
b Fo(\013)g Fk(\025)g Fp(0)p Fh(.)41 b Fp(After)26 b(few)g(hours)g(w)m
(ork,)i(I)d(still)i(couldn't)f(understand)174 3799 y(the)33
b(meaning)g(of)f(this)i(description.)-70 3854 y
SDict begin H.S end
 -70 3854
a -70 3854 a
SDict begin 18.85004 H.A end
 -70 3854 a -70 3854 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -70 3854 a 50 4027
a Fp(3.)48 b(A)32 b(description)h(in)e(the)h(second-last)h(paragraph)e
(of)g(the)h(righ)m(t)f(column)i(in)e(page)h(310)f(men)m(tioned)174
4183 y(that:)55 b(\()p Fo(u)529 4198 y Fi(mx)p Fl(\006)689
4183 y Fp(\))727 4147 y Fi(n)727 4208 y(j)814 4183 y
Fh(ar)-5 b(e)40 b(c)-5 b(onstructe)g(d)40 b(using)g(only)g(the)g(data)g
(asso)-5 b(ciate)g(d)39 b(with)h(the)g(mesh)f(p)-5 b(oints)40
b(\(j)174 4340 y(-)f(1/2,)h(n)f(-)g(1/2\))g(and)g(\(j)g(+)g(1/2,)g(n)g
(-)g(1/2\),)h(the)f(e\013e)-5 b(ct)39 b(of)g(this)g(mo)-5
b(di\014c)g(ation)38 b(is)h(highly)g(lo)-5 b(c)g(al;)174
4496 y(i.e.,)45 b(it)e(gener)-5 b(al)5 b(ly)42 b(wil)5
b(l)43 b(not)g(c)-5 b(ause)42 b(the)h(sme)-5 b(aring)42
b(of)h(sho)-5 b(ck)42 b(disc)-5 b(ontinuities.)69 b Fp(I)41
b(didn't)h(quite)174 4653 y(understand)33 b(this)e(mo)s(di\014cation)h
(is)g(highly)g('lo)s(cal')f(and)g(will)h(not)f(cause)h(the)f(smearing)h
(of)f(sho)s(c)m(k)174 4809 y(discon)m(tin)m(uities.)-70
4954 y
SDict begin H.S end
 -70 4954 a -70 4954 a
SDict begin 18.85004 H.A end
 -70 4954 a -70 4954 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 -70
4954 a 237 x Fr(3)161 b(F)-13 b(orm)l(ula)54 b(deriv)-9
b(ation)-70 5446 y Fp(Noting)26 b(some)h(imp)s(ortan)m(t)g(deriv)-5
b(ations)27 b(of)f(equations)h(listed)g(in)g(Prof.)41
b(S.)27 b(C.)f(Chang's)h(CESE)h(pap)s(er)e([)3754 5446
y
SDict begin H.S end
 3754 5446 a Fp(1)3803 5382 y
SDict begin H.R end
 3803 5382 a 3803 5446
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 3803 5446 a Fp(])1856 5695 y(3)p eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -78 -269 a -70 46
a
SDict begin H.S end
 -70 46 a -70 46 a
SDict begin 18.85004 H.A end
 -70 46 a -70 46 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -70 46 a 50 146
a Fp(1.)48 b(Deriv)-5 b(ation)32 b(of)h(Eq.\(2.5\))g(\()p
Fo(u)1236 161 y Fi(t)1265 146 y Fp(\))1303 110 y Fi(n)1303
171 y(j)1377 146 y Fp(=)28 b Fk(\000)p Fo(a)p Fp(\()p
Fo(u)1703 161 y Fi(x)1747 146 y Fp(\))1785 110 y Fi(n)1785
171 y(j)1832 146 y Fp(:)269 344 y(Substituting)33 b(Eq.\(2.3\))g(in)m
(to)g(Eq.\(2.1\),)g(then)h(y)m(ou)f(can)g(get)f(Eq.\(2.5\).)-70
410 y
SDict begin H.S end
 -70 410 a -70 410 a
SDict begin 18.85004 H.A end
 -70 410 a -70 410 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -70 410
a 50 583 a Fp(2.)48 b(Deriv)-5 b(ation)32 b(of)h(Eq.\(2.12\))261
700 y Fj(4)p 184 716 189 4 v 184 773 a(\(\001)p Fi(x)p
Fj(\))337 754 y Fg(2)382 739 y Fo(F)445 754 y Fl(\006)504
739 y Fp(\()p Fo(j;)17 b(n)p Fp(\))31 b(=)f Fk(\006)p
Fp(\()984 700 y Fj(1)p 984 716 36 4 v 984 773 a(2)1030
739 y Fp(\)[\(1)23 b Fk(\000)h Fo(\027)1360 703 y Fj(2)1423
739 y Fp(+)f Fo(\030)5 b Fp(\)\()p Fo(u)1702 754 y Fi(x)1745
739 y Fp(\))1783 703 y Fi(n)1783 764 y(j)1853 739 y Fp(+)23
b(\(1)g Fk(\000)h Fo(\027)2217 703 y Fj(2)2280 739 y
Fk(\000)g Fo(\030)5 b Fp(\)\()p Fo(u)2561 754 y Fi(x)2603
739 y Fp(\))2641 688 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p
Fj(2)2641 770 y Fi(j)t Fl(\006)p Fj(1)p Fi(=)p Fj(2)2849
739 y Fp(])23 b(+)3008 692 y Fj(2\(1)p Fl(\007)p Fi(\027)t
Fj(\))p 3008 716 220 4 v 3069 773 a(\001)p Fi(x)3238
739 y Fp(\()p Fo(u)3332 703 y Fi(n)3332 764 y(j)3401
739 y Fk(\000)h Fo(u)3558 688 y Fi(n)p Fl(\000)p Fj(1)p
Fi(=)p Fj(2)3558 770 y Fi(j)t Fl(\006)p Fj(1)p Fi(=)p
Fj(2)3765 739 y Fp(\),)174 896 y(where)34 b Fo(\027)g
Fk(\021)653 856 y Fi(a)p Fj(\001)p Fi(t)p 653 873 122
4 v 665 930 a Fj(\001)p Fi(x)818 896 y Fp(and)e Fo(\030)g
Fk(\021)1210 852 y Fj(4)p Fi(\026)p Fj(\001)p Fi(t)p
1197 873 189 4 v 1197 930 a Fj(\(\001)p Fi(x)p Fj(\))1350
911 y Fg(2)1395 896 y Fp(:)-70 1001 y
SDict begin H.S end
 -70 1001 a -70
1001 a
SDict begin 14.5 H.A end
 -70 1001 a -70 1001 a
SDict begin [/View [/XYZ H.V]/Dest (figure.caption.2) cvn /DEST pdfmark
end
 -70 1001 a 320 3518 a @beginspecial
0 @llx 0 @lly 720 @urx 567 @ury 3744 @rwi @setspecial
%%BeginDocument: diagram/mesh_and_ce_se_v1.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: mesh_and_ce_se_v1.pdf
%%Creator: (Adobe Acrobat 15.10.0)
%%For: ntuhep520
%%CreationDate: 2016/1/20, 下午5:25
%%BoundingBox: 0 0 720 567
%%HiResBoundingBox: 0 0 720 567
%%CropBox: 0 0 720 567
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 605 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-01-14T07:19:39Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2016-01-14T07:19:39Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11.1 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -567 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 567 li
720 567 li
720 0 li
cp
clp
gsave
0 567.164 mo
719.673 567.164 li
719.673 0 li
0 0 li
0 567.164 li
clp
0 .000180163 mo
719.673 .000180163 li
719.673 567.048 li
0 567.048 li
0 .000180163 li
false sop
0 0 0 0 cmyk
ef
127.881 67.4637 mo
592.874 67.4638 li
.750271 .679713 .654902 .901945 cmyk
25400 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[7.87043e-05 0 0 7.86947e-05 127.881 67.4637 ]ct
@
grestore newpath
127.52 137.871 mo
592.513 137.871 li
gsave
[7.87043e-05 0 0 7.86947e-05 127.52 137.871 ]ct
@
grestore newpath
127.52 208.651 mo
592.513 208.651 li
gsave
[7.87043e-05 0 0 7.86947e-05 127.52 208.651 ]ct
@
grestore newpath
127.16 277.879 mo
592.153 277.879 li
gsave
[7.87043e-05 0 0 7.86947e-05 127.16 277.879 ]ct
@
grestore newpath
126.799 349.469 mo
591.792 349.469 li
gsave
[7.87043e-05 0 0 7.86947e-05 126.799 349.469 ]ct
@
grestore newpath
126.996 66.2845 mo
126.996 136.692 li
gsave
[7.87043e-05 0 0 7.86947e-05 126.996 66.2845 ]ct
@
grestore newpath
360.377 275.64 mo
360.377 348.289 li
gsave
[7.87043e-05 0 0 7.86947e-05 360.377 275.64 ]ct
@
grestore newpath
592.256 66.2845 mo
592.256 136.692 li
gsave
[7.87043e-05 0 0 7.86947e-05 592.256 66.2845 ]ct
@
grestore newpath
591.989 203.934 mo
591.989 274.341 li
gsave
[7.87043e-05 0 0 7.86947e-05 591.989 203.934 ]ct
@
grestore newpath
591.792 133.33 mo
591.792 203.737 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 591.792 133.329 ]ct
@
grestore newpath
591.791 279.061 mo
591.791 349.469 li
gsave
[7.87043e-05 0 0 7.86947e-05 591.791 279.061 ]ct
@
grestore newpath
127.623 137.871 mo
127.623 208.278 li
gsave
[7.87043e-05 0 0 7.86947e-05 127.623 137.871 ]ct
@
grestore newpath
127.622 277.882 mo
127.622 348.289 li
gsave
[7.87043e-05 0 0 7.86947e-05 127.622 277.882 ]ct
@
grestore newpath
127.953 201.692 mo
127.953 274.342 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 127.953 201.692 ]ct
@
grestore newpath
360.377 136.692 mo
360.377 209.341 li
gsave
[7.87043e-05 0 0 7.86947e-05 360.377 136.692 ]ct
@
grestore newpath
360.377 67.4637 mo
360.377 137.871 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 360.377 67.4637 ]ct
@
grestore newpath
360.377 203.737 mo
360.377 274.144 li
gsave
[7.87043e-05 0 0 7.86947e-05 360.377 203.737 ]ct
@
grestore newpath
284.053 66.2845 mo
284.053 136.692 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 284.053 66.2845 ]ct
@
grestore newpath
204.312 66.2845 mo
204.312 136.692 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 204.312 66.2845 ]ct
@
grestore newpath
284.053 209.341 mo
284.053 279.748 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 284.053 209.341 ]ct
@
grestore newpath
204.312 209.341 mo
204.312 279.748 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 204.312 209.341 ]ct
@
grestore newpath
516.294 138.244 mo
516.295 208.651 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 516.294 138.244 ]ct
@
grestore newpath
436.553 138.244 mo
436.554 208.651 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 436.553 138.244 ]ct
@
grestore newpath
516.294 279.058 mo
516.295 349.465 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 516.294 279.058 ]ct
@
grestore newpath
436.553 279.058 mo
436.554 349.465 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 436.553 279.058 ]ct
@
grestore newpath
204.312 138.934 mo
204.312 209.341 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 204.312 138.934 ]ct
@
grestore newpath
284.053 136.692 mo
284.053 207.099 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 284.053 136.692 ]ct
@
grestore newpath
204.312 276.819 mo
204.312 347.226 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 204.312 276.819 ]ct
@
grestore newpath
284.053 275.756 mo
284.053 346.163 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 284.053 275.756 ]ct
@
grestore newpath
436.553 68.5268 mo
436.554 138.934 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 436.553 68.5268 ]ct
@
grestore newpath
516.294 66.2845 mo
516.295 136.692 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 516.294 66.2845 ]ct
@
grestore newpath
436.553 205.233 mo
436.554 275.64 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 436.553 205.233 ]ct
@
grestore newpath
516.294 202.991 mo
516.295 273.398 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 516.294 202.991 ]ct
@
grestore newpath
66.8031 327.19 mo
66.8031 395.62 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 66.8031 325.191 ]ct
@
grestore newpath
63.8044 331.188 mo
66.8031 325.191 li
69.8017 331.188 li
cp
ef
65.9185 395.598 mo
116.727 395.598 li
gsave
[0 -7.86947e-05 7.87043e-05 0 65.9186 395.598 ]ct
@
grestore newpath
112.729 392.6 mo
118.726 395.598 li
112.729 398.597 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: KAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000051c6670
676d00000000000005d80000091a676c796600000000000033ec00000bba
686561640000000000000ef400000036686865610000000000000f2c0000
0024686d74780000000000000f50000000306c6f63610000000000000f80
0000001a6d6178700000000000000f9c000000206e616d65000000000000
0fbc00000020707265700000000000000fdc000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d00000001000000059eb88df7cb11
5f0f3cf50019080000000000bbeb7ccc00000000c787a88bfbfafd8b09ec
07b600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec00010000000000000000000000000000000c040e000004a10023045a
00ac0444006104ec00ac03e800ac042200ac0562006302ae002103770029
0273004503fc0046000000a1012f01e5026202cf034b03c4045f04db056b
058e05dd000000010000000c0120001000c3000700020010002f00650000
11900182000400010000000100120001000000000006000e00005a584143
47492b43616c69627269b2090320b80284b40918014a20b80283b4091801
4a20b80282b40918014a20b80281b40918014a20b80280b40918014a20b8
027fb40918014a20b8027eb40918014a20b8027db40918014a20b8027cb4
0918014a20b8027bb40918014a20b8027ab40918014a20b80279b4091801
4a20b80278b40918014a20b80277b40918014a20b80276b40918014a20b8
0275b40918014a20b80274b40918014a20b80273b40918014a20b80271b4
0918014a20b80270b40918014a20b8026fb40918014a20b8026eb4091801
4a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a20b8
026ab40918014a20b80269b40918014a20b80268b40918014a20b80267b4
0918014a20b80266b40918014a20b80265b40918014a20b80264b4091801
4a20b80263b40918014a20b80262b40918014a20b80261b40918014a20b8
0260b40918014a20b8025fb40918014a20b8025eb40918014a20b8025db4
0918014a20b8025cb40918014a20b8025bb40918014a20b8025ab4091801
4a20b80259b40918014a20b80258b40918014a20b80257b40918014a20b8
0256b40918014a20b80255b40918014a20b80254b40918014a20b80253b4
0918014a20b80252b40918014a20b80251b40918014a20b80250b4091801
4a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a20b8
024cb40918014a20b8024bb40918014a20b8024ab40918014a20b80249b4
0918014a20b80248b40918014a20b80247b40918014a20b80246b4091801
4a20b80245b40918014a20b80244b40918014a20b80243b40918014a20b8
0242b40918014a20b80241b40918014a20b80240b40918014a20b8023fb4
0918014a20b8023eb40918014a20b8023db40918014a20b8023cb4091801
4a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a20b8
0238b40918014a20b80237b40918014a20b80236b40918014a20b80235b4
0918014a20b80234b40918014a20b80233b40918014a20b80232b4091801
4a20b80231b40918014a20b80230b40918014a20b8022fb40918014a20b8
022eb40918014a20b8022db40918014a20b8022cb40918014a20b8022bb4
0918014a20b8022ab40918014a20b80229b40918014a20b80228b4091801
4a20b80227b40918014a20b80226b40918014a20b80225b40918014a20b8
0224b40918014a20b80223b40918014a20b80222b40918014a20b80221b4
0918014a20b80220b40918014a20b8021fb40918014a20b8021eb4091801
4a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a20b8
021ab40918014a20b80219b40918014a20b80218b40918014a20b80217b4
0918014a20b80216b40918014a20b80215b40918014a20b80214b4091801
4a20b80213b40918014a20b80212b40918014a20b80211b40918014a20b8
0210b40918014a20b8020fb40918014a20b8020eb40918014a20b8020db4
0918014a20b8020cb40918014a20b8020bb40918014a20b8020ab4091801
4a20b80209b40918014a20b80208b40918014a20b80207b40918014a20b8
0206b40918014a20b80205b40918014a20b80204b40918014a20b80203b4
0918014a20b80202b40918014a20b80201b40918014a20b80200b4091801
4a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a20b8
01fcb40918014a20b801fbb40918014a20b801fab40918014a20b801f9b4
0918014a20b801f8b40918014a20b801f7b40918014a20b801f6b4091801
4a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a20b8
01f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801efb4
0918014a20b801eeb40918014a20b801edb40918014a20b801ecb4091801
4a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a20b8
01e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801e5b4
0918014a20b801e4b40918014a20b801e3b40918014a20b801e2b4091801
4a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a20b8
01deb40918014a20b801ddb40918014a20b801dcb40918014a20b801dbb4
0918014a20b801dab40918014a20b801d9b40918014a20b801d8b4091801
4a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a20b8
01d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801d1b4
0918014a20b801d0b40918014a20b801cfb40918014a20b801ceb4091801
4a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a20b8
01cab40918014a20b801c9b40918014a20b801c8b40918014a20b801c7b4
0918014a20b801c6b40918014a20b801c5b40918014a20b801c4b4091801
4a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a20b8
01c0b40918014a20b801bfb40918014a20b801beb40918014a20b801bdb4
0918014a20b801bcb40918014a20b801bbb40918014a20b801bab4091801
4a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a20b8
01b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801b3b4
0918014a20b801b2b40918014a20b801b1b40918014a20b801b0b4091801
4a20b801afb40918014a20b801aeb40918014a20b801adb40918014a20b8
01acb40918014a20b801abb40918014a20b801aab40918014a20b801a9b4
0918014a20b801a8b40918014a20b801a7b40918014a20b801a6b4091801
4a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a20b8
01a2b40918014a20b801a1b40918014a20b801a0b40918014a20b8019fb4
0918014a20b8019eb40918014a20b8019db40918014a20b8019cb4091801
4a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a20b8
0198b40918014a20b80197b40918014a20b80196b40918014a20b80195b4
0918014a20b80194b40918014a20b80193b40918014a20b80192b4091801
4a20b80191b40918014a20b80190b40918014a20b8018fb40918014a20b8
018eb40918014a20b8018db40918014a20b8018cb40918014a20b8018bb4
0918014a20b8018ab40918014a20b80189b40918014a20b80188b4091801
4a20b80187b40918014a20b80186b40918014a20b80185b40918014a20b8
0184b40918014a20b80183b40918014a20b80182b40918014a20b80181b4
0918014a20b80180b40918014a20b8017fb40918014a20b8017eb4091801
4a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a20b8
017ab40918014a20b80179b40918014a20b80178b40918014a20b80177b4
0918014a20b80176b40918014a20b80175b40918014a20b80174b4091801
4a20b80173b40918014a20b80172b40918014a20b80171b40918014a20b8
0170b40918014a20b8016fb40918014a20b8016eb40918014a20b8016db4
0918014a20b8016cb40918014a20b8016bb40918014a20b8016ab4091801
4a20b80169b40918014a20b80168b40918014a20b80167b40918014a20b8
0166b40918014a20b80165b40918014a20b80164b40918014a20b80163b4
0918014a20b80162b40918014a20b80161b40918014a20b80160b4091801
4a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a20b8
015cb40918014a20b8015bb40918014a20b8015ab40918014a20b80159b4
0918014a20b80158b40918014a20b80157b40918014a20b80156b4091801
4a20b80155b40918014a20b80154b40918014a20b80153b40918014a20b8
0152b40918014a20b80150b40918014a20b8014fb40918014a20b8014eb4
0918014a20b8014cb40918014a20b8014bb40918014a20b8014ab4091801
4a20b80149b40918014a20b80148b40918014a20b80147b40918014a20b8
0146b40918014a20b80145b40918014a20b80144b40918014a20b80143b3
0918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281b21e
3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1f
b8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411fb802
78b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb80274b2
1d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b21d42
1fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d431fb8
026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb80267
b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263b21c
451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c451f
b8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451fb802
5ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb80256b2
1c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b21c45
1fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c451fb8
024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb80249
b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b
4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b491f
b80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb802
3cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b2
1b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b21b49
1fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8
022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022b
b21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b
491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1f
b80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb802
1eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab2
1a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e
1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb8
0211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020d
b21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a
4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219511f
b80204b219511fb80203b219501fb80202b219511fb80201b219511fb802
00b219511fb801ffb219511fb801feb219501fb801fdb219511fb801fcb2
19511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b21951
1fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b218531fb8
01f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb801ef
b218541fb801eeb218541fb801edb218541fb801ecb218531fb801ebb218
531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218541f
b801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541fb801
e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801deb2
18541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab21853
1fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b217561fb8
01d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb801d1
b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cdb217
571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217561f
b801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571fb801
c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801c0b2
17571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb21757
1fb801bbb217571fb801bab217571fb801b9b217571fb801b8b217561fb8
01b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb801b3
b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801afb216
5b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb2165b1f
b801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801
a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2
165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f
1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb8
0199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb80195
b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191b216
5b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1f
b8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1fb801
88b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb80184b2
15621fb80183b215661fb80182b215661fb80181b215551fb80180b21545
1fb8017fb215361fb8017eb215361fb8017db215611fb8017cb215621fb8
017bb215621fb8017ab215641fb80179b215661fb80178b215661fb80177
b215661fb80176b215661fb80175b215661fb80174b215661fb80173b215
451fb80172b215621fb80171b215621fb80170b215631fb8016fb215641f
b8016eb215661fb8016db215661fb8016cb215661fb8016bb215661fb801
6ab215661fb80169b215621fb80168b215621fb80167b215611fb80166b2
15641fb80165b215641fb80164b215661fb80163b215661fb80162b21566
1fb80161b215661fb80160b215661fb8015fb215661fb8015eb215551fb8
015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb80159
b215621fb80158b215621fb80157b215631fb80156b215641fb80155b215
661fb80154b215661fb80153b215661fb80152b215661fb80151b214401f
b80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1fb801
4cb214401fb8014bb214401fb8014ab214411fb80149b214401fb80148b2
14401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2147f
1fb80143b214801fb80142b212461fb80141b212461fb80140b212461fb8
013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8013b
b211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137b211
581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b2112c1f
b80132b211471fb80131b211551fb80130b211571fb8012fb211571fb801
2eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb8012ab2
115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2115b
1fb80125b211561fb80124b211561fb80123b211571fb80122b211581fb8
0121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8011d
b2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119b210
5d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b2105f1f
b80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1fb801
10b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2
105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2105f
1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f1fb8
0103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621fff0f
621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f641f
f70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641ff00f
641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f641f
e80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681fe10e
671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e681f
d90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d
6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1f
ca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261fc30d
311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c
721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c721f
b40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1fad0b
7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1f
a50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b
7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f
960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a
4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f82558055
81ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d401206
0a7c557a557bab7a557955775578ab7755ba028600660285403c5576ab75
5504751475747503f47501ab750144750130750102007510752075030c74
55725573ab7255007250728072b072043bb072e072020072010ab8ffc0b3
721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a03251f69
38675568ab67556638645565ab645563386255613860555f385d555eab5d
555c385a555bab5a55593858555703251f5638545555ab54555338515552
ab51554f384e554e03251f4d384b554cab4b554a38485549ab4855473846
554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b401b
e01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f197f19
8f19030f18cf18024018292c460f17cf17df17ef1704134017292e460016
101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546
b8ffc0404d162326460f15010f151f1502451f15010011e011f0110315bf
10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e0340
0e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054
460f0b1f0b02553f0b4f0b02400b3f4346400b2d30460003012001010001
100120010308b8ffc0b301151f46b80100b316010501b80190b154532b2b
4bb80800524bb008505bb00188b02553b00188b040515ab00688b000555a
5b58b101018e59b101024354b0144b515a58b101018e59858d8d00421d4b
b01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db116004259
2b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73742b
2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e73
2b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff
0284006402830064028200640281006402800064027f0064027e0064027d
0064027c0064027b0064027a006402790064027800640277006402760064
0275006402740064027300640271006402700064026f0064026e0064026d
0064026c0064026b0064026a006402690064026800640267006402660064
026500640264006402630064026200640261006402600064025f0064025e
0064025d0064025c0064025b0064025a0064025900640258006402570064
02560064025500640254006402530064025200640251006402500064024f
0064024e0064024d0064024c0064024b0064024a00640249006402480064
024700640246006402450064024400640243006402420064024100640240
0064023f0064023e0064023d0064023c0064023b0064023a006402390064
023800640237006402360064023500640234006402330064023200640231
006402300064022f0064022e0064022d0064022c0064022b0064022a0064
022900640228006402270064022600640225006402240064022300640222
00640221006402200064021f0064021e0064021d0064021c0064021b0064
021a00640219006402180064021700640216006402150064021400640213
0064021200640211006402100064020f0064020e0064020d0064020c0064
020b0064020a006402090064020800640207006402060064020500640204
41ff00640203006402020064020100640200006401ff006401fe006401fd
006401fc006401fb006401fa006401f9006401f8006401f7006401f60064
01f5006401f4006401f3006401f2006401f1006401f0006401ef006401ee
006401ed006401ec006401eb006401ea006401e9006401e8006401e70064
01e6006401e5006401e4006401e3006401e2006401e1006401e0006401df
006401de006401dd006401dc006401db006401da006401d9006401d80064
01d7006401d6006401d5006401d4006401d3006401d2006401d1006401d0
006401cf006401ce006401cd006401cc006401cb006401ca006401c90064
01c8006401c7006401c6006401c5006401c4006401c3006401c2006401c1
006401c0006401bf006401be006401bd006401bc006401bb006401ba0064
01b9006401b8006401b7006401b6006401b5006401b4006401b3006401b2
006401b1006401b0006401af006401ae006401ad006401ac006401ab0064
01aa006401a9006401a8006401a7006401a6006401a5006401a4006401a3
006401a2006401a1006401a00064019f0064019e0064019d0064019c0064
019b0064019a006401990064019800640197006401960064019500640194
006401930064019200640191006401900064018f0064018e0064018d0064
018c0064018b0064018a0064018900640188006401870064018600640185
006441800184006401830064018200640181006401800064017f0064017e
0064017d0064017c0064017b0064017a0064017900640178006401770064
01760064017500640174006401730064017200640171006401700064016f
0064016e0064016d0064016c0064016b0064016a00640169006401680064
016700640166006401650064016400640163006401620064016100640160
0064015f0064015e0064015d0064015c0064015b0064015a006401590064
015800640157006401560064015500640154006401530064015200640150
0064014f0064014e0064014c0064014b0064014a00640149006401480064
01470064014600640145006401440064014300642b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
5f5e00>
[3003 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 2238 8 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>KAAAAA+Calibri AddT42Char 
1 2486 9 <00010029fffa034b03bc002f0086b90031ffc040110b014d2f080b014d2e
100b014d3b2e0118b8fff0b60b014d34180117b8fff8b30b014d16b8fff0
b60b014d34160109b8fff0402a0b014d00080b014d3c0001382301360b01
0b2010014d0b200c014d0b0b31302949230b111d49114c054c003f3f3f12
39393f111201392f2b2b3130005d5d015d2b2b5d2b2b5d2b5d2b2b2b2516
14060623222e022703030e0323222626363701012626363633321e021713
133e033332161606070103430813271f1e23150b04d8d7040b15221c1d25
1101090118fef708011327201d23140a04cdd0040a111f1b1d25120209fe
f92c0e130c0503070b070165fe9b070b0703050c130e01b701a70e130d04
03060a07feb1014f060a0703040b140ffe5e>KAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>KAAAAA+Calibri AddT42Char 
KAAAAA+Calibri /CharStrings get begin
/g8 8 def
/g9 9 def
end
KAAAAA+Calibri /Encoding get
dup 33 /g8 put
dup 34 /g9 put
pop
end
%ADOEndSubsetFont
/ZHYQFG+Calibri /KAAAAA+Calibri findfont ct_VMDictPut
/ZHYQFG+Calibri*1 
[33{/.notdef}rp /g8 /g9 221{/.notdef}rp]
ZHYQFG+Calibri nf
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
51.4235 329.552 mo
(!)sh
%ADOBeginSubsetFont: LAAAAA+PMingLiU-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (LAAAAA+PMingLiU)
%%Title: (LAAAAA+PMingLiU Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /LAAAAA+PMingLiU def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -198 999 801} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 2 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE3100AAC671FFC18DDB3764E95ECE8020311F82848570B
1358F8FCDF8604B> |
1 <001C60D8A8C9B8666C32> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /LAAAAA+PMingLiU-Identity-H /Identity-H 0 [/LAAAAA+PMingLiU] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ZHYQFH+PMingLiU /LAAAAA+PMingLiU-Identity-H findfont ct_VMDictPut
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
57.4501 329.552 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
111.771 411.952 mo
(")sh
%ADOBeginSubsetFont: MAAAAA+TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /MAAAAA+TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000007966670
676d0000000000000854000005cd676c796600000000000019ec0000075c
686561640000000000000e2400000036686865610000000000000e5c0000
0024686d74780000000000000e80000000186c6f63610000000000000e98
0000000e6d6178700000000000000ea8000000206e616d65000000000000
0ec800000034707265700000000000000efc00000aed6764697200000000
0000000000000000058e0000054c001f054c001c037100180000ffe10000
ffe80000ffe8fe4afffc056b0023fe68ffe2033e00000095000000950000
000000000000002500a8008e010b007d00820045003200a400ca006b0070
005100af003c00f001d700470004002500770029004000fd001601610046
01370029008e0017ffca0025005bffe902e600020099008100f2007500d6
006300c60006009a01330024003800cc003dff67001305d8003600860095
ffdb0007043400a500d8ffdcfffe004800a200d8013c01530380053e0057
007a007c008c0117012a0138017c0026003c007800bd00c0021009b5000c
004d004e00540058006700b4040100020005005000af01d5034300240058
008b013501c0ffac002000250026002d00410136022bffba001e002a0034
003b003f00850094009800d7012e013d033104b900170040006100b9010e
0116012201bfff9c001f001f004d005c0086008c009600aa00cb00cb011f
0154022f036005a9fee8000e006f007c007d008b00d500f1010a01570178
02b803adfe3fff6affb3ffc4001f0037003f0044004a0078007d009700a2
00a700b600c000c100c600d8011d0150019701ee04740532fd81fed1fee0
ff16fff1000f002d00550068006e007f00890095009e00c200da00e400f8
01040108011101c2023002da030e049e0517ff00ff8700000020002f0041
0057007800870088008800b900c200c5012001280133017401d6020e020f
026c027e02ab02ec038903b103e304e7ff43ffa8ffc3ffdcffe900070023
0023002600520077007d0081008f009900ac00ae00b500b800c800ea00f0
00f40135016a018b01b101b501f7021402ad02d504fc05d805f0ff9dfffc
000b00240025002c0030003000330040004700490057006e009a00bd00c9
00cd00dc00fa00fa011b0139017e0187018a018e0195019601df01f60286
02cf02de039603a903b003c804010432046a058b05e006510761fe96fe9a
ff4bff870013002500340038003e004a0065006b0073007a009c00a200b2
00b700bf00f000f700fb0104011301200124013b01520178017c0181018f
01a001d90248026a026f02700301031d032303270388041f04ab04d104da
057a058bfe26fe59ff2e00010002000a003b003b004700580058005f0066
006b007a007a008b009900af00bc00c000c700cc00e900f200f500fb00fb
0102010a010b01150121012701450145015501570158015e01610168017d
01a301ab01da01ee021002180222028f029402a302d202e703710393039b
03b303d303fe04ff050b05320532054b0559058b05ab05f2065506890742
076207a708ccfd2afdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77
ffa1ffa7ffadffafffc00000000000030094001d001f002000200027002e
0048004b004c005e005f006b0071007c008a00900091009100a700af00b3
00b400c400c600d100d200de00df00df00e600e800ea00eb00f200f500f5
00fc010201180123013101330137015c016201660170017a017a017a0182
01980199019b01b001bf01c001ca01d301d701d801e001e001f601f701f8
02120213022f023702440247024f0252026302650270027f0298029b02a6
02b702ba02c502cf02d602d702e502fe031c031d03450348035d035e0371
0379038103a103b703d403d503d803e103f803fe0404041f042104230425
043a0467048304e00528054b0564056a059f059f05c2060b066a06af06b3
06cb06e8070607280748075007a607b207ff009500af0092009600000000
0000000000000000017e01a80129025b0212020301c302b4019301cd02b2
04ed020e0159017a0300022d042c00c8004d00e602890325013e0378011b
00f1018d00490203007c000e029d02470024000000000052004400330038
005405d3041501a7000002860168005000cf0002004b0024008800ba0025
ffd800110091ff6b00b5011700260065ff9900490080014b01c000f40167
027102ea04fc0310017c01e103d9015501e601ee0434019606cb005c022b
0099003d009f00160039002700de00790120022e005a0099038800940021
0019002a046c05e8000001f203b200aa0296028902b4ffc9020000ec0005
005a0447010004e00000052a001f01eb00ae016800ca02d3028901b50406
01a1014f014b011c0308005e00c70024029d006503750104028002f304d8
00d90239025a032c01f204310303005002e50283005901eb010800ac0196
02f8012100950180004400e501eb02e5007400f301ff02fd038f026801c8
01c70116022b0142033000fe02e101620200002400ee0517010802370066
0006010201e602aa0366019b00d305c203dc044d03b6000401be013702fc
03200244014d0338ffed002506f8030dfed5ff43004402ffff92040bfdef
0155017100d9ffc4032d0461044afbb5fbcf02170192036d0558fff2fe7d
0583023e006605e9073d00790243002500cf00fd00af002a01ef021a0026
001f0025003a000001170490fbfb0251001d02f001f50078018f005f0024
0044005400bf00af006701a8002600050006003f009800fa02ab00c2004d
0375004a00b600c401bf017c006f00130263000c006801520002012e0104
001f001f009a000000f1046900790080005000bd056b00ab0080001e05a5
fe4000ce006e0056004800db018b00b30048023904580053008200820022
0000404154403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c01182f2d2c20b0032545b019234445b01a23444565234520b0032560
6a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a
45208a54582321b03f1b235961441cb114008a5279b31940201945208a54
582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2c
b10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1
1011432343650b2d2c4b525845441b2121592d2c0120b003252349b04060
b0206320b000525823b002253823b002256538008a63381b212121212159
012d2c4bb06451584569b00943608a103a1b212121592d2c01b005251023
208af500b0016023edec2d2c01b005251023208af500b0016123edec2d2c
01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161011020
3c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c35
2d2c76b802ee23701020b802ee4520b0005058b00161593a2f182d2c2121
0c6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f
2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b002
602d2c0c6423648bb84000626023212d2cb4000100000015b00826b00826
b00826b008260f10161345683ab001162d2cb4000100000015b00826b008
26b00826b008260f1016134568653ab001162d2c4b53234b515a5820458a
60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a5838
1b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358
021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425
b00425060c6423646164b807085158b00425b00425012046b01060482046
b0106048590a21211b2121592d2cb012435c580cb00425b00425060c6423
646164b807085158b00425b00425012046b8fff060482046b8fff0604859
0a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b51
5a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c
0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c4623
46608a8a462320468a608a61b8ff8062232010238ab903b003b08a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1
23018851b1400188535a58b910000020885458b202010243604259b12401
885158b920000040885458b202020243604259b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b2021002436042595959592d0000000001000000050ccdc12f
8ef55f0f3cf50819080000000000a31fb8bd00000000c5b1f9c8fc05fd8c
0aaa0830000200090001000000000000000100000721fe4500570a3afc05
fa500aaa0018000700000000000000000000000000060639011c02000000
0239fea00400002702390054038dffb800000034003400f1020b02c103ae
000000010000000600f2003c0082000500020010002f0055000004d90258
000400020000000100120001000000000006001f00004c434b594f4a2b54
696d65734e6577526f6d616e50532d4974616c69634d54000000b1540041
0c03bc003003bc004003bc00a003bc00b003bc0005ffc003bbb345453240
b803bbb32b2e3240b803bbb2282932b9ffc003bbb31a263280411303bb00
9f03bb00af03bb00cf03bb0004000003bb001f03bb000203bb02af002700
1fffc003b9b2161b32b9ffc003b8b2424232b9ffc003b8b2363832b9ffc0
03b8b32a2d32df410a03b800ef03b8000203b803b90028001fffc003b9b3
282e32f0410f03b90001000003b7000103b700030800001f03be03bf002b
001fffc003bfb2242a32b903b60381b23a1f0f411703b3001003b2002003
b2005003b2007003b200e003b2000600cf03b300df03b300ef03b300ff03
b30004001203a8b2e2891fbe039f016b019a001f039800930801400c1f7f
047f05027f027f03025fbb02b00001ffc00117b2196632b8ffc0b3651a66
32b9ff800173b2196632bd038401170800001fffc002afb2313340b802af
b22e3340b802afb328293240b802afb326273240b802afb321253240b802
afb31c203240b802afb2233340b802afb21933a0bc02af00b002af00e002
afb5034003212932b8fff2b33a263d32bc038203820382003a0800b51f40
255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b2e3269be0381
0001008a03810001000e0381b32b2f3210b80381b3515b320cb80381b34e
513222b80381b3474d320eb80381b246330ab80381400926473212254358
320cb80381b2323310b80381b22a3312b80381b3373d3212bb0381003d00
33fff44015253d331825355b32102526343206252a330c252e33b8fffe40
24252d330c3a2f33329925aa25ba25c92504052536330c25323832193a29
3a383a03182517b80381b42825382504bc0381038103810025080040101f
0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc038003800380
001f080040151f375f07af07025f06af060222ac2b2e3209ac2f33b8ffdc
400aac1f223222232b52320eb8037fb229330eb8037fb2223314b8037fb2
1e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f3232262c33410a
ffee037f00390033fff8037f002b0033ffea037fb23a3320b8037fb33f46
321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d320eb8037fb226
3304b8037fb3494a3404b8037fb2463304b8037fb2213318b8037f400c1d
3322263032322226333832b8fff8400a262b2f3209261b21328abe037f00
01037f037f037f00260800402e1f371f062f063f06039f02af02bf02cf02
049f03af03bf03cf03046f037f038f03031f032f033f034f035f03050f41
3502ed0001005f02ed009f02ed00df02ed0003002f02ed003f02ed006f02
ed000300af02af0001004f02af009f02af0002002f02af003f02af000200
3f02b00001004f02af005f02af0002002f02af003f02af0002007003b200
0103b203b202ed02ed02b002b002af02af401a3701003001400102010100
090102000800171700000012110840410b027b02230034000d013d003400
0d01370034000d011b401a340d8f340d84340d68340d59340d54340d4834
0d2c340d28340d411002350020000d021b0020000d01fc0020000d01c300
20000d01500020000d012c401a200df0200dbe200d94200d79200d6a200d
61200d5f200d44200d410d013e0138000d003d0138000d00300138000d00
1d0138000d01fdb40f4d0f0009bf01fd004d000d03b1037f0015001f0215
b226341fb80214b2263f1fb80208b21ebb1f41190206001e0801001f0205
001f02ab001f0204001f02ab001f0203001f0401001f02010031019a001f
01fb00230156001f01aeb2262a1fb801adb2262a1fb801abb226341f4115
01a8002602ab001f01a5001e0125001f01a400ab02ab001f01a2003102ab
001f01a1003102ab001f019db2236c1fb8019cb2236c1f4109019b002304
01001f019a0033019a001f0176b2262e1fb8016cb231721f4111016b0023
019a001f016800240401001f014500260801001f013f00230401001f0123
b21e9e1fbc0121001e0201001f0100b426791ffd1fb80125b21ffa33b808
01b21ff924b802abb21fe826b80101b21fe51fb8019ab21fe431b8010140
0b1fe331e41fe231891fd226b80201b61fd026cd1fcd25b80401b21fb731
b8019ab21fae26b80801b21fac1eb80401400b1f9e315e1f97269e1f9333
b80801b21f8a24b8019ab21f831fb802ab40131f82236c1f7523e41f7026
cd1f6423721f5e25b80401b21f5d23b802abb21f55e6b80401b21f5324b8
0201b21f4f33b802abb21f4e26b8040140131f4731671f4626ab1f4331cd
1f3e235e1f3a1fb80401b61f3924e41f3723b80801b21f2e23b80401b21f
2a1eb80125400b1f2923ab1f2731ab1f5537bc01c60007018a0007012b40
2e077f077107690766074b074007380736072d0722072107140812081008
0e080c080a080808060804080208000814b8ffe0402b0000010014061000
000100060400000100041000000100100200000100020000000100000201
0802004a00b013034b024b5342b0372b4bb807ff52b0382b4bb009505b58
b101018e59014bb0c063004b6220b0f65323b8010a515ab005234201b012
4b004b544218b0382bb00288b801005458b801ffb101018e851bb0124358
b900010140858d1bb900010159858d59590016763f183f123e113946443e
113946443e113946443e113946443e11394660443e11394660442b2b2b2b
2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358
b0aa1d59b0324b5358b0ff1d594bb04753205c58b9027d027b4544b9027c
027b45445958b90146027d455258b9027d01464459594bb04753205c58b9
001e027c4544b90026027c45445958b9017f001e455258b9001e017f4459
594bb05e53205c58b9001f027d4544b90025027d45445958b901a8001f45
5258b9001f01a84459594bb8010153205c58b1ab1f4544b11f1f45445958
b9047000ab455258b900ab04704459594bb8012553205c58b1e61f4544b1
1f1f45445958b9051000e6455258b900e605104459594bb01753205c58b1
24244544b1312445445958b12224455258b124224459594bb05153205c58
b124244544b1232445445958b17d24455258b1247d4459594bb06e53205c
58b124244544b1332445445958b1aa24455258b124aa4459592b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b45695342014b5058b108004259435c58b10800
42591610703eb0124358b911b53d801bba011c03d9000b2b59b00a2342b0
0b2342003f3f182b103c012f5d060cb0062342b0072342b0124358b93b21
187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411b
ba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a8
0400000b2b59b0102342b0112342002b4bb02e5358b8016b45b02a60b801
6b2344590018456944456944184569444569447373737375757573737475
757575752b4bb026534bb03d515a58b1262645b0196044592b4518694474
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b004bb0
2a534bb03f515a58b1070745b04060445973732b2b451869442b2b752b2b
4518694475752b2b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b
2b2b2b2b451869442b002b732b2b2b2b2b2b2b2b2b012b2b2b007373732b
2b2b01435c58b8ffdeb31e1c3318b8037fb52b3318262b33b9fff00381b1
12332b2b2b2b590173742b2b2b002b73752b2b732b2b2b2b2b73752b2b2b
2b732b00000000>
[1885 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 104 2 <0002fea4fe46023e0515000b003000e7b61232400f103432b8ffc0b31b27
3432b8ffc0401d0d355f0d5f255b265b279330051a29013045265a282f30
304d0c007006b8039c40210c070c0d0c300d1f25261425252616b8222410
0f25400f39253128262510097003b8ffc0400e2a35900301400350030203
57320cb8032bb34f260126b8019fb5261ee4133a1ab80335400b26eb3125
1725310a3286182b2b103c2b10f6f6fded10e45ded10f45d712bed2b103c
2b10c02b003ffde4870e2e2b087d10c400183ff6ed10f5ed2bfc01f53130
01715d2b2b2b435c5840140d400f390e400f3925400f390c400f3926400f
392b2b2b2b2b590132161514062322263534361301060623222635343633
321716151407061517161633323637133635342623220706073501d92a3b
3b2a2a3b3b3afefd45f18c3f4131201d1612190e02030c0c51732de0212b
210d110d1905153b2a2a3b3b2a2a3bfe74fc81f0d43a281f2f130f131a13
0b07050404679a0300710c18260302042300>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 482 3 <00010027ffe803ad03890036018f400901180c392d180c390ab8ffde409c
13143e14221339082f16001b021b2f0451075209521e512079017b2d891e
a627a428ba02ba260b5c015c28bf01035a095a1e5a2003690669096a1e79
09791e7b2606562a51356c260352000114221935132219350101022a2b2b
00131436452d5a283530364d0001232c01002d9f2301233104040007070c
0c1f1b20141b1b20002b00362b1f2c2d142c2c2d2c2b0a180b1b3728201b
2d2c10148a13b80143b30c072520b80124b20c251bb8ffc0b25c351bb802
95b235c92dbc0124002b0203002cffc0b217392cb8ffc0b25c352cb8ffc0
b23a352cb8ffc0b32a34342cb8ffc0b32324342cb8ffc0b21c352cb8ffc0
4013191a34ef2c012c19371b172c171b370a3286182b2b103c2b2b4e10f4
5d2b2b2b2b2b2b2b4dede4e4f42bedf4ed10f6ed2b103c103c2b10c0003f
3f3c87052e2b087d10c4870e2e182b7d10c400183f3c10ed720111123900
11123910f5ed2bfc01f510c987100e7dc4083c3130012b2b5d5d5d4bb032
534bb036515a58b120223859015d005d015d712b2b2b2b01031236333216
151407030615141633323736371706070623222635343713363534262322
07060607060707231336353426232207072701c485bbc75c32411d7a1510
090c11353f1f5d533a2e252c2274161a131c274aa0592f1f3296b620231a
0c1e26060389fe390117b042353c64fe5b49100e130d2a56138539272d26
307501924b2a1419182dcfa15565a5027271171621040624>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 1410 5 <0001ffbcffe8038403890046010840630d40120b3f0700072a003d013e14
001601240023014a1b56018919a301a919aa2aa83daf3f10484010351017
63217321c919cb210509230c2a52230304191a1a022a2a2b3e403e3c4028
2122021a1a1f2840142828403e2a1904041135428a46c60011b80395401f
153a0a0a000735c639272e2e260b042a193e218a9f22cf220222c90d02e4
45ba014700400124b21a8228b8019f401d19e43e403b4b343e401d353e3e
47200d400d8f0daf0d040d1a48321947b80114b1de182b4e10e410e65d12
392f2b2b4dedf4edf4e6ed10f45ded11123939003f3c10fde43f3c10fde4
10f4ed11121739870e2e2b0e7d10c40110c90708103c083c870e10c4c431
30005d5d012b5d2b01161716173736363736333216151407062322272623
220706071316163332373637170607062322272603020706232227263534
363332171633323736363726272626232207350167311912295823642618
1d2b330f1c2415182f1018213e5652131a0d151c3727233f613726382115
429c5e3d392821182c2020241a0e0c132fa2193e05174a48171e03893434
2499843057100a2e21260e1909101c3495fea84f1f172e4a12764e2c3f27
0129fef14e321d1625212c20171026fc38f30e4136022400>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
MAAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/space 1 def
/j 2 def
/n 3 def
/x 5 def
end
MAAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 32 /space put
dup 106 /j put
dup 110 /n put
dup 120 /x put
pop
end
%ADOEndSubsetFont
/ZHYQFI+TimesNewRomanPS-ItalicMT /MAAAAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/ZHYQFI+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 73{/.notdef}rp /j 3{/.notdef}rp /n 9{/.notdef}rp /x 
135{/.notdef}rp]
ZHYQFI+TimesNewRomanPS-ItalicMT nf
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
357.283 40.6476 mo
(j)sh
%ADOBeginSubsetFont: NAAAAA+PMingLiU-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (NAAAAA+PMingLiU)
%%Title: (NAAAAA+PMingLiU Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /NAAAAA+PMingLiU def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -198 999 801} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 2 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE3100AAC671FFC18DDB3764E95ECE8020311F82848570B
1358F8FCDF8604B> |
1 <001C60D8A8C9B8666C32> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /NAAAAA+PMingLiU-Identity-H /Identity-H 0 [/NAAAAA+PMingLiU] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ZHYQFJ+PMingLiU /NAAAAA+PMingLiU-Identity-H findfont ct_VMDictPut
ZHYQFJ+PMingLiU [17.9918 0 4.49795 -17.9896 0 0 ]msf
362.282 40.6476 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
190.989 41.3093 mo
(j )
[4.99812 0 ]xsh
%ADOBeginSubsetFont: OAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /OAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000007da6670
676d000000000000089800000631676c79660000000000001f0800000880
686561640000000000000ecc00000036686865610000000000000f040000
0024686d74780000000000000f28000000306c6f63610000000000000f58
0000001a6d6178700000000000000f74000000206e616d65000000000000
0f940000002c707265700000000000000fc000000f456764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f000040425554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019234445b01a23444565234520b00325606a20b009234223688a6a6061
20b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b2359
61441cb114008a5279b31940201945208a54582321b03f1b235961442d2c
b110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d
432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b5258
45441b2121592d2c0120b003252349b04060b0206320b000525823b00225
3823b002256538008a63381b212121212159012d2c4bb06451584569b009
43608a103a1b212110592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d
2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802
b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2cb4000100000015b00826b00826b00826b008260f1016134568
3ab001162d2cb4000100000015b00826b00826b00826b008260f10161345
68653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b545820
458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b21
21592d2c014b53234b515ab00225b00425b006254923451869525a58b002
25b00225b00525462345696048592121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c462346608a8a462320468a608a61b8ff8062232010238ab9035803588a
70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2cb0024354584b53234b515a58381b2121591b21
212121592d0000000001000000050ccd571894305f0f3cf5081908000000
0000a2e31dc200000000c5b1f690fb74fd8c1000080e0000000900010000
00000000000100000721fe4500571000fb74fadf10000001000000000000
0000000000000000000c0639011c0200000002aa005402aa002e04830025
0200006e02aa005302390003040000f00400002c040000530400ffee0000
003b003b007d00be0126017501a201db024d033504240440000000010000
000c00f2003c009d000700020010002f00560000062504eb000500020000
00010012000100000000000600180000454e434c4e592b54696d65734e65
77526f6d616e50534d540000b9005403ecb3032a1f3f411503e4006003e9
009f03e500df03e50004001003e4001003e5003f03e5007003e400ff03e4
0005ffc003e1b345453240b803e1b32b2e3240b803e1b2282932b9ffc003
e1b21a1c32bd03e102ac0027001fffc003dfb2161b32b9ffc003deb24242
32b9ffc003deb2363832b9ffc003deb32a2d32df410a03de00ef03de0002
03de03df0028001fffc003dfb3282e32f0410d03df0001037e000f010100
1f00a003dd00b003dd0002004003dab32426329fbf03cc000103ca03c900
64001fffc003c9b20d1132410a03c703b70012001f03b603b50064001fff
c003b5b30e1132004173038d000100c0038d00d0038d00e0038d00f0038d
0004006f03a7007f03a7008f03a700af03a70004000f03a7001f03a7002f
03a7004f03a7000403ab03ab00ef03a50001000f03a5002f03a5006f03a5
008f03a50004005403aa0001006b03aa000103a8036a0022001f038c0394
0015001f038b03930015001f03a40393001a001f03a20394001e001f03a1
0393001e001f039f0394001e001f039b0394001a001f039a0393001e001f
039903940016001f039803940016001f03970393001b001f03960394001b
001f03950393001b001f03760375001a001f03740375001a001f03a00373
b21e1f10411e039300200393003003930003002003940030039400400394
00030000039400010383036c001e001f03b1036c0032001f036d036c0032
001fffc0037db2212332b9ffc0037db3171932a0410a037d00b0037d00c0
037d00d0037d0004ffc0037cb2212332b9ffc0037cb3171932a0412d037c
00b0037c00c0037c00d0037c000400300373004003730002000003730010
037300200373000300e0037300f00373000200b0037300c0037300d00373
0003008403730090037300a0037300030377036a0029001f0389036ab228
1f40b80367b33940323fbb0366000100400366b3191d328fbb0366000100
400366b3090a3240b80366b3090e3240b80366b3090f323fbb0365000100
400365b3090c3240b80365b31a1d3240b80365b3090e326b410e0363007b
036300020014036300240363003403630044036300040363b2242f1fba03
4e006d0800400e1f7f027f037f047f050430440112bf033200500800001f
0012032d003c080040291f5f3c0137600970098009031009200930094009
5009056f037f038f03031f032f033f034f035f0305b8ffc0b2073a33b8ff
c04047063a33900ba00bb00bc00bd00b05b006c006d006e006f006052006
3006400650066006700680069006a006099006900702600b700b800b0310
0b200b300b400b500b051f0701a041850362000100000362001003620070
036200900362000400f0035f00010020035e0020035f0030035f0040035e
00040000035e0000035f0010035f00d0035e00e0035f00050010030f0020
030f0030030f00d0030f00e0030f00050000030f0010030f0050030f0060
030f0070030f00d0030f00060000030f0010030f0020030f0030030f00e0
030f00f0030f0006030f00270000030e0030030e000200e0030e00f0030e
0002030e004a00e0030d00f0030d0002030d002700d002fc0001001002fc
002002fc005002fc000300d002fc00e002fc0002000002fc001002fc0020
02fc003002fc005002fc006002fc000600e002fc00f002fc0002002002fc
003002fc004002fc000302fc406127c02901b02901a02901902901403c3f
413240223f41321212125f235f255f285fa5046f236f256f286fa5044f23
4f254f284fa5043f233f253f283fa5042f232f252f282fa5041f231f251f
281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8
ffc0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02
af00df02af0003001f02af002f02af003f02af006f02af000402af02af00
1f02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02
ad001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad000200
0f02ad001f02ad003f02ad0003004002acb23a334f414a02ac005f02ac00
9f02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300
b002ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02
ac003f02ac0003000f035a0001000f035a001f035a003f035a005f035a00
70035a000500cf035700df03570002000f0357001f03570070035700af03
570004035a035a0357035702ad02ad02ac02ac032c400d31151f00161600
0000121108104110020c004a000d01a8004a000d0198004a000d0189004a
000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a0dbe022800
41000d01940041000d0121400b410db4410d4f410d29410d411002170021
000d02150021000d02060021000d01eb0021000d014e0021000d012c4014
210df9210df3210df1210d9d210d71210d3d210d4110021c001f000d0214
001f000d020b001f000d0196001f000d014a001f000d0126400b1f0dc61f
0d571f0d371f0d410d019e0141000d00420141000d001e0141000d001b01
41000d01f2b40f440f0009bb01f20044000d0201b23c291fb80200b23c29
1fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fab23c931fbc
01f9010f0101001f01f6b224e41f411501f401490401001f01f301490401
001f01f1014900ab001f01f001490067001f01a6003c0125001f01a4b23c
811f411501a3010f019a001f01a200220801001f01a100500401001f019f
0149019a001f019d01490067001f019cb22c621fb8019bb22c791fbc019a
002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c1fb8018fb2
259e1fb8016ab23c2a1f4111016700240201001f0163002502ab001f014c
010f019a001f01480149006c001f0147b22c891fb80145b22c9e1fb80144
b22c791fb80143b223311fb80127b23c811fbc012300500101001f011fb2
23e41f4115011d0023019a001f011c00230801001f011b00250801001f01
0e010f0401001f010d00220401001f0108b223811fb80106b425e41ff73c
bb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2ab1fd1b901
490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02cb80801b21f
bf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23b80801b21f
a523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812cbc0401001f
006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f403cb8012540
0a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f3025b802abb6
1f2a24e41f2623b80156b21f5537ba023500070175402c07740762075607
51073b0733072d0720071d071c071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b534201b0124b004b5442b0372b4bb807ff52b0382b4bb008505b58b101
018e59b0382bb00288b801005458b801ffb101018e851bb0124358b90001
012f858d1bb90001017c858d5959014bb0c063004b6220b0f65323b8010a
515ab0052342180016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d
594bb04753205c58b90271026f4544b90270026f45445958b9017a027145
5258b90271017a4459594bb04753205c58b9002202704544b9003c027045
445958b901b30022455258b9002201b34459594bb04c53205c58b9014900
224544b1222245445958b901c20149455258b9014901c24459594bb06753
205c58b9002402714544b90050027145445958b9021e0024455258b90024
021e4459594bb8020153205c58b9010f00224544b1222245445958b90c00
010f455258b9010f0c004459594bb01c53205c58b125254544b12c254544
5958b13725455258b125374459594bb0ab53205c58b125254544b1232545
445958b901590025455258b9002501594459594bb8010153205c58b12525
4544b1282545445958b902080025455258b9002502084459592b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b361
dc6463456523456023456560234560b08b766818b080622020b164dc4565
234520b003266062636820b003266165b0dc236544b064234420b1616345
65234520b003266062636820b003266165b063236544b0612344b1006345
5458b163406544b26140614523614459b3a67f434b456523456023456560
234560b089766818b080622020b1437f4565234520b003266062636820b0
03266165b07f236544b043234420b1a64b4565234520b003266062636820
b003266165b04b236544b0a62344b1004b455458b14b406544b2a640a645
236144594b5242014b5058b108004259435c58b108004259b3020b0a1243
58601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b0
0c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342
b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b01123
42002b0018456944456944456944456944737373747373737475752b7373
747475184569447373742b4bb021534bb046515a58b03cb03c45b0406044
59012b2b2b2b757575757575757543584010bf3ccf3c026f3c7f3c8f3c9f
3caf3c0575755943584012bf22cf22025f226f227f228f229f22af220675
7559435c58b6403c9f22ef220375592b2b01747474744544737374747575
454473454473744544737475737373737300757575737575752b2b757575
752b752b435841220063032d00010003032d0013032d0023032d0033032d
0053032d000500c3032d00d3032d00e3032d00f3032d00040083032d0093
032d00a3032d00b3032d0004032d032d4518694474747575592b4358b900
180332b330353238b80332b361663238b80332b3535a3238b80332b3454e
3238b80332b33c413218b80332b23f330a410f0332000100ba033200ca03
3200da033200ea033200fa03320005033203324518694474752b2b2b2b2b
2b597300732b012b7575002b2b2b74002b2b2b732b74012b002b2b017373
737474732b2b00732b2b002b2b2b017374732b012b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b00017375007373004569440073730173742b2b2b2b2b73
2b00732b752b2b732b2b2b2b2b2b2b2b2b73742b2b00000000>
[2177 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> OAAAAA+TimesNewRomanPSMT AddT42Char 
1 380 4 <00010025008d045b04c3000b009f401a2f022f0320082009042f00200520
062f0b6f006f0b0660060106410f035100070327000a0351000b00030327
0002035100000008032700090351b60b0b0060050105bd03510004000003
5100040327b70160080108bb060bb80327401a0560000100bb2002300240
027002d00205200201025c0c585e182b10f65d71f45d3cfd3ce45d002fed
e410e45d103c10f4ed10f4ed10f4fde45d3130005d015d25112135211133
11211521110217fe0e01f25001f4fe0c8d01f35201f1fe0f52fe0d00>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 746 6 <000100530180025802170003003f40200205801d64367f050101000200b0
030300021001500160019001a001d0010601b80134b5008004545a182b10
f6fd5d3c103c002fed3c103c3130015d2b13211521530205fdfb02179700
>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 836 7 <00010003ffe4023e058e0003005240090005cb1f6736000101b80327400d
02031402020303000002010b00b8011f40142003300360037003a003e003
0603bb01ad02cb04b8016fb1df182b10f6edf45ded003f3c3f3c87052e2b
7d10c431302b01012301023efe155001eb058efa5605aa00>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 950 8 <000100f000000306056800160097401440186018a018e018040018401802
76008600020e411301690141000901a00022000301690141000801a00023
000001f8000f016900160141000001f2400e010f0f020902010509080c02
0300ba01f70003014940120e0e0f401135300f7f0f900fa00f040f1917ba
022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c111239011139
00f5edfc01f52b2b3130005d01715d13253311141616171521353e023511
34272626232207f0014a21133c5cfe026038160a07251a254204c7a1fb87
72381e022525021d317a02dc942a201e1f00>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 1178 9 <0001002c000003ab0568001e0168408207180b3917181c3d3418401c3d34
19401c3d340f1e161629073c074907a9070640205b045a085b175a186b08
741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020f904f917
1515011d0419051b15191619171d180709170b180b1d3419471989178f20
0718190202171a190c19060d031902050618171615140713040db8016840
090940140c3f80090109b80333400c10051a8f19019f19af190219ba0333
0003018db301020c1eb8018d400d0006e24f135f136f137f130413b80107
4013400001001a002040208020036020a020022019bb01f90003000d0140
40145f026f027f028f02bf02cf02df02ef020802191fba018e010100182b
4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d713c3ffd
71b10602435458b78f0901bf09cf0902005d71592be41112173911123901
111239390210b10602435458b47d198d1902005d590e3c8710057dc40ec4
31300171725d005d012b2b2b002b01032135000035342623220607233636
33321615140706070207213236363703ab5ffce0016101209e6e649f2625
19cf9ba5dd304aa6f93e01626c57461a0105fefb2501420198a981a67571
b9c6d4906767a2b5fef03810312d>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 1642 10 <00010053ffe8035605680032014cb9000affe0b20c3909b8ffc0403c0c39
4109450a460b4b2204cf09012929382940346034cf34e034f70a07003401
41097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c490829b801
8cb328281000b802e4b3d0300130b80334b5030510160116b8019fb51d40
2b2f341db80143b3100d2928bb01680014000902e3400b50208020029020
a0200220b80333b3b00c010cb80190400b502d802d02902da02d022db803
33b55f077f070207b802e5400a403401a034c034023400b8013eb74013bf
1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d71f45ded
5d71e410f43c003fed2bed723fed5ded12392fed3130437940362e2f1e26
0a0f04062221232124212521040605250e26260a2062012f042d62011e0f
206201210b2762010a092e063062011f0d1d62002b2b103c2b012b2b2b2b
2b2a81818181005d01715d7200712b2b1336363332171615140716161514
070621222635343633321716161716333236353427262726262323353e02
353426232207683ab184a35742ba7d807092feeb89632f21191a11781725
2a6697231a1f2b964e204f9f4881609b68044a89956a4f5a949e31b67bb0
81a844271d2c08053f060b9e6c4f4b381d28411e0a5e844f677fa600>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 2120 11 <0001ffee01c50411020e0003001db900020327400a00001a050167044748
182b10e54e10f6002f4ded3130012135210411fbdd042301c549>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>OAAAAA+TimesNewRomanPSMT AddT42Char 
OAAAAA+TimesNewRomanPSMT /CharStrings get begin
/space 1 def
/plus 4 def
/hyphen 6 def
/slash 7 def
/one 8 def
/two 9 def
/three 10 def
/endash 11 def
end
OAAAAA+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 43 /plus put
dup 45 /hyphen put
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 208 /endash put
pop
end
%ADOEndSubsetFont
/ZHYQFK+TimesNewRomanPSMT /OAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/ZHYQFK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash 
/.notdef /one /two /three 156{/.notdef}rp /endash 47{/.notdef}rp]
ZHYQFK+TimesNewRomanPSMT nf
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
200.486 41.3093 mo
(- 1)
[5.99113 4.49796 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
219.971 41.3093 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
263.213 40.7918 mo
(j )
[4.99814 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
272.709 40.7918 mo
(- 1/2)
[5.99115 4.49796 8.99591 4.99814 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
306.189 40.7918 mo
(\000\001)sh
%ADOBeginSubsetFont: PAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000007da6670
676d000000000000089800000631676c79660000000000001ecc0000018e
686561640000000000000ecc00000036686865610000000000000f040000
0024686d74780000000000000f28000000086c6f63610000000000000f30
000000066d6178700000000000000f38000000206e616d65000000000000
0f580000002c707265700000000000000f8400000f456764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f000040425554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019234445b01a23444565234520b00325606a20b009234223688a6a6061
20b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b2359
61441cb114008a5279b31940201945208a54582321b03f1b235961442d2c
b110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d
432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b5258
45441b2121592d2c0120b003252349b04060b0206320b000525823b00225
3823b002256538008a63381b212121212159012d2c4bb06451584569b009
43608a103a1b212110592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d
2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802
b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2cb4000100000015b00826b00826b00826b008260f1016134568
3ab001162d2cb4000100000015b00826b00826b00826b008260f10161345
68653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b545820
458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b21
21592d2c014b53234b515ab00225b00425b006254923451869525a58b002
25b00225b00525462345696048592121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c462346608a8a462320468a608a61b8ff8062232010238ab9035803588a
70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2cb0024354584b53234b515a58381b2121591b21
212121592d0000000001000000050ccd571894305f0f3cf5081908000000
0000a2e31dc200000000c5b1f690fb74fd8c1000080e0000000900010000
00000000000100000721fe4500571000fb74fadf10000001000000000000
000000000000000000020639011c052500320000003b00c7000000010000
000200f2003c009d000700020010002f00560000062504eb000500020000
000100120001000000000006001800004c5a564557502b54696d65734e65
77526f6d616e50534d540000b9005403ecb3032a1f3f411503e4006003e9
009f03e500df03e50004001003e4001003e5003f03e5007003e400ff03e4
0005ffc003e1b345453240b803e1b32b2e3240b803e1b2282932b9ffc003
e1b21a1c32bd03e102ac0027001fffc003dfb2161b32b9ffc003deb24242
32b9ffc003deb2363832b9ffc003deb32a2d32df410a03de00ef03de0002
03de03df0028001fffc003dfb3282e32f0410d03df0001037e000f010100
1f00a003dd00b003dd0002004003dab32426329fbf03cc000103ca03c900
64001fffc003c9b20d1132410a03c703b70012001f03b603b50064001fff
c003b5b30e1132004173038d000100c0038d00d0038d00e0038d00f0038d
0004006f03a7007f03a7008f03a700af03a70004000f03a7001f03a7002f
03a7004f03a7000403ab03ab00ef03a50001000f03a5002f03a5006f03a5
008f03a50004005403aa0001006b03aa000103a8036a0022001f038c0394
0015001f038b03930015001f03a40393001a001f03a20394001e001f03a1
0393001e001f039f0394001e001f039b0394001a001f039a0393001e001f
039903940016001f039803940016001f03970393001b001f03960394001b
001f03950393001b001f03760375001a001f03740375001a001f03a00373
b21e1f10411e039300200393003003930003002003940030039400400394
00030000039400010383036c001e001f03b1036c0032001f036d036c0032
001fffc0037db2212332b9ffc0037db3171932a0410a037d00b0037d00c0
037d00d0037d0004ffc0037cb2212332b9ffc0037cb3171932a0412d037c
00b0037c00c0037c00d0037c000400300373004003730002000003730010
037300200373000300e0037300f00373000200b0037300c0037300d00373
0003008403730090037300a0037300030377036a0029001f0389036ab228
1f40b80367b33940323fbb0366000100400366b3191d328fbb0366000100
400366b3090a3240b80366b3090e3240b80366b3090f323fbb0365000100
400365b3090c3240b80365b31a1d3240b80365b3090e326b410e0363007b
036300020014036300240363003403630044036300040363b2242f1fba03
4e006d0800400e1f7f027f037f047f050430440112bf033200500800001f
0012032d003c080040291f5f3c0137600970098009031009200930094009
5009056f037f038f03031f032f033f034f035f0305b8ffc0b2073a33b8ff
c04047063a33900ba00bb00bc00bd00b05b006c006d006e006f006052006
3006400650066006700680069006a006099006900702600b700b800b0310
0b200b300b400b500b051f0701a041850362000100000362001003620070
036200900362000400f0035f00010020035e0020035f0030035f0040035e
00040000035e0000035f0010035f00d0035e00e0035f00050010030f0020
030f0030030f00d0030f00e0030f00050000030f0010030f0050030f0060
030f0070030f00d0030f00060000030f0010030f0020030f0030030f00e0
030f00f0030f0006030f00270000030e0030030e000200e0030e00f0030e
0002030e004a00e0030d00f0030d0002030d002700d002fc0001001002fc
002002fc005002fc000300d002fc00e002fc0002000002fc001002fc0020
02fc003002fc005002fc006002fc000600e002fc00f002fc0002002002fc
003002fc004002fc000302fc406127c02901b02901a02901902901403c3f
413240223f41321212125f235f255f285fa5046f236f256f286fa5044f23
4f254f284fa5043f233f253f283fa5042f232f252f282fa5041f231f251f
281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8
ffc0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02
af00df02af0003001f02af002f02af003f02af006f02af000402af02af00
1f02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02
ad001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad000200
0f02ad001f02ad003f02ad0003004002acb23a334f414a02ac005f02ac00
9f02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300
b002ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02
ac003f02ac0003000f035a0001000f035a001f035a003f035a005f035a00
70035a000500cf035700df03570002000f0357001f03570070035700af03
570004035a035a0357035702ad02ad02ac02ac032c400d31151f00161600
0000121108104110020c004a000d01a8004a000d0198004a000d0189004a
000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a0dbe022800
41000d01940041000d0121400b410db4410d4f410d29410d411002170021
000d02150021000d02060021000d01eb0021000d014e0021000d012c4014
210df9210df3210df1210d9d210d71210d3d210d4110021c001f000d0214
001f000d020b001f000d0196001f000d014a001f000d0126400b1f0dc61f
0d571f0d371f0d410d019e0141000d00420141000d001e0141000d001b01
41000d01f2b40f440f0009bb01f20044000d0201b23c291fb80200b23c29
1fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fab23c931fbc
01f9010f0101001f01f6b224e41f411501f401490401001f01f301490401
001f01f1014900ab001f01f001490067001f01a6003c0125001f01a4b23c
811f411501a3010f019a001f01a200220801001f01a100500401001f019f
0149019a001f019d01490067001f019cb22c621fb8019bb22c791fbc019a
002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c1fb8018fb2
259e1fb8016ab23c2a1f4111016700240201001f0163002502ab001f014c
010f019a001f01480149006c001f0147b22c891fb80145b22c9e1fb80144
b22c791fb80143b223311fb80127b23c811fbc012300500101001f011fb2
23e41f4115011d0023019a001f011c00230801001f011b00250801001f01
0e010f0401001f010d00220401001f0108b223811fb80106b425e41ff73c
bb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2ab1fd1b901
490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02cb80801b21f
bf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23b80801b21f
a523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812cbc0401001f
006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f403cb8012540
0a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f3025b802abb6
1f2a24e41f2623b80156b21f5537ba023500070175402c07740762075607
51073b0733072d0720071d071c071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b534201b0124b004b5442b0372b4bb807ff52b0382b4bb008505b58b101
018e59b0382bb00288b801005458b801ffb101018e851bb0124358b90001
012f858d1bb90001017c858d5959014bb0c063004b6220b0f65323b8010a
515ab0052342180016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d
594bb04753205c58b90271026f4544b90270026f45445958b9017a027145
5258b90271017a4459594bb04753205c58b9002202704544b9003c027045
445958b901b30022455258b9002201b34459594bb04c53205c58b9014900
224544b1222245445958b901c20149455258b9014901c24459594bb06753
205c58b9002402714544b90050027145445958b9021e0024455258b90024
021e4459594bb8020153205c58b9010f00224544b1222245445958b90c00
010f455258b9010f0c004459594bb01c53205c58b125254544b12c254544
5958b13725455258b125374459594bb0ab53205c58b125254544b1232545
445958b901590025455258b9002501594459594bb8010153205c58b12525
4544b1282545445958b902080025455258b9002502084459592b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b361
dc6463456523456023456560234560b08b766818b080622020b164dc4565
234520b003266062636820b003266165b0dc236544b064234420b1616345
65234520b003266062636820b003266165b063236544b0612344b1006345
5458b163406544b26140614523614459b3a67f434b456523456023456560
234560b089766818b080622020b1437f4565234520b003266062636820b0
03266165b07f236544b043234420b1a64b4565234520b003266062636820
b003266165b04b236544b0a62344b1004b455458b14b406544b2a640a645
236144594b5242014b5058b108004259435c58b108004259b3020b0a1243
58601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b0
0c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342
b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b01123
42002b0018456944456944456944456944737373747373737475752b7373
747475184569447373742b4bb021534bb046515a58b03cb03c45b0406044
59012b2b2b2b757575757575757543584010bf3ccf3c026f3c7f3c8f3c9f
3caf3c0575755943584012bf22cf22025f226f227f228f229f22af220675
7559435c58b6403c9f22ef220375592b2b01747474744544737374747575
454473454473744544737475737373737300757575737575752b2b757575
752b752b435841220063032d00010003032d0013032d0023032d0033032d
0053032d000500c3032d00d3032d00e3032d00f3032d00040083032d0093
032d00a3032d00b3032d0004032d032d4518694474747575592b4358b900
180332b330353238b80332b361663238b80332b3535a3238b80332b3454e
3238b80332b33c413218b80332b23f330a410f0332000100ba033200ca03
3200da033200ea033200fa03320005033203324518694474752b2b2b2b2b
2b597300732b012b7575002b2b2b74002b2b2b732b74012b002b2b017373
737474732b2b00732b2b002b2b2b017374732b012b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b00017375007373004569440073730173742b2b2b2b2b73
2b00732b752b2b732b2b2b2b2b2b2b2b2b73742b2b00000000>
[399 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 118 1 <00020032000004f2056b0003000600ec404348057a058a05990504051810
12340218101234032c0b1134042c091134250379068806f706040c021b02
020a011a017a018a01f801050b051b05580503050504010000b802c94016
06051406060505040506042203021403030204060306b802c9b2000805b8
0205401502010302010003a7200470048004030f0440040204b801b2400f
0500901f062f066f067f068f060506b802ec40151f05014f05af05df05ef
05048005af050205050807191112392f5d7172f45d18ed1910f45d5d18ed
113939003f3ced3fed3c103c87052e2b087d10c487052e182b87087dc431
30015d5d5d5d2b2b2b2b005d3301330127010132026022023eeffe6bfe4a
056bfa955503e4fc1c00>PAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>PAAAAA+TimesNewRomanPSMT AddT42Char 
PAAAAA+TimesNewRomanPSMT /CharStrings get begin
/Delta 1 def
end
PAAAAA+TimesNewRomanPSMT /Encoding get
dup 33 /Delta put
pop
end
%ADOEndSubsetFont
/ZHYQFL+TimesNewRomanPSMT /PAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/ZHYQFL+TimesNewRomanPSMT*1 
[33{/.notdef}rp /Delta 222{/.notdef}rp]
ZHYQFL+TimesNewRomanPSMT nf
ZHYQFL+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
301.09 411.283 mo
(!)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
312.66 411.283 mo
(x)sh
320.646 411.283 mo
( )sh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
325.144 411.283 mo
(/ 2)
[4.99814 4.49796 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
343.636 411.283 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
413.99 41.2958 mo
(j )
[4.99814 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
423.487 41.2958 mo
(+ 1/2)
[10.1473 4.49796 8.99591 4.99814 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
461.122 41.2958 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
500.208 40.7783 mo
(j )
[4.99811 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
509.705 40.7783 mo
(+ 1)
[10.1473 4.49799 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
533.346 40.7783 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
570.557 41.2958 mo
(j )
[4.99811 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
580.054 41.2958 mo
(+ 3/2)
[10.1473 4.49799 8.99591 4.99811 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
617.689 41.2958 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
628.538 208.129 mo
(n)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
637.534 208.129 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
608.517 276.554 mo
(n )
[8.99591 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
622.011 276.554 mo
(\320 1/)sh
649.499 276.554 mo
(2)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
658.495 276.554 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
615.125 346.792 mo
(n )
[8.99591 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
628.619 346.792 mo
(\320 1)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
651.109 346.792 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
608.437 135.441 mo
(n )
[8.99591 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
621.931 135.441 mo
(+ 1/2)
[10.1473 4.49799 8.99591 4.99811 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
659.566 135.441 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
615.93 68.8854 mo
(n )
[8.99591 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
629.423 68.8854 mo
(+ 1)
[10.1473 4.49799 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
653.064 68.8854 mo
(\000\001)sh
355.954 349.468 mo
355.954 346.212 358.048 343.572 360.632 343.572 cv
363.215 343.572 365.309 346.212 365.309 349.468 cv
365.309 352.725 363.215 355.365 360.632 355.365 cv
358.048 355.365 355.954 352.725 355.954 349.468 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
355.954 349.468 mo
355.954 346.212 358.049 343.572 360.632 343.572 cv
363.215 343.572 365.309 346.212 365.309 349.468 cv
365.309 352.725 363.215 355.364 360.632 355.364 cv
358.049 355.364 355.954 352.725 355.954 349.468 cv
cp
.686061 .353338 .0289006 0 cmyk
9525 lw
gsave
[7.87043e-05 0 0 7.86947e-05 355.954 343.572 ]ct
@
grestore newpath
355.941 67.3476 mo
355.941 64.0912 358.035 61.4515 360.618 61.4515 cv
363.201 61.4515 365.295 64.0912 365.295 67.3476 cv
365.295 70.6039 363.201 73.2436 360.618 73.2436 cv
358.035 73.2436 355.941 70.6039 355.941 67.3476 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
355.941 67.3476 mo
355.941 64.0913 358.035 61.4515 360.618 61.4515 cv
363.201 61.4515 365.295 64.0913 365.295 67.3476 cv
365.295 70.6039 363.201 73.2436 360.618 73.2436 cv
358.035 73.2436 355.941 70.6039 355.941 67.3476 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 355.941 61.4515 ]ct
@
grestore newpath
431.876 278.254 mo
431.876 274.998 433.97 272.358 436.553 272.358 cv
439.137 272.358 441.231 274.998 441.231 278.254 cv
441.231 281.51 439.137 284.15 436.553 284.15 cv
433.97 284.15 431.876 281.51 431.876 278.254 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
431.876 278.254 mo
431.876 274.998 433.97 272.358 436.553 272.358 cv
439.137 272.358 441.231 274.998 441.231 278.254 cv
441.231 281.51 439.137 284.15 436.553 284.15 cv
433.97 284.15 431.876 281.51 431.876 278.254 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 431.876 272.358 ]ct
@
grestore newpath
511.617 349.469 mo
511.617 346.212 513.711 343.573 516.294 343.573 cv
518.878 343.573 520.972 346.212 520.972 349.469 cv
520.972 352.725 518.878 355.365 516.294 355.365 cv
513.711 355.365 511.617 352.725 511.617 349.469 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
511.617 349.469 mo
511.617 346.212 513.711 343.573 516.295 343.573 cv
518.878 343.573 520.972 346.212 520.972 349.469 cv
520.972 352.725 518.878 355.365 516.295 355.365 cv
513.711 355.365 511.617 352.725 511.617 349.469 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 511.617 343.573 ]ct
@
grestore newpath
511.992 210.03 mo
511.992 206.774 514.086 204.134 516.67 204.134 cv
519.253 204.134 521.347 206.774 521.347 210.03 cv
521.347 213.286 519.253 215.926 516.67 215.926 cv
514.086 215.926 511.992 213.286 511.992 210.03 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
511.992 210.03 mo
511.992 206.774 514.087 204.134 516.67 204.134 cv
519.253 204.134 521.347 206.774 521.347 210.03 cv
521.347 213.286 519.253 215.926 516.67 215.926 cv
514.087 215.926 511.992 213.286 511.992 210.03 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 511.992 204.134 ]ct
@
grestore newpath
511.858 67.3476 mo
511.858 64.0912 513.952 61.4515 516.535 61.4515 cv
519.119 61.4515 521.213 64.0912 521.213 67.3476 cv
521.213 70.6039 519.119 73.2436 516.535 73.2436 cv
513.952 73.2436 511.858 70.6039 511.858 67.3476 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
511.858 67.3476 mo
511.858 64.0913 513.952 61.4515 516.535 61.4515 cv
519.118 61.4515 521.213 64.0913 521.213 67.3476 cv
521.213 70.6039 519.118 73.2436 516.535 73.2436 cv
513.952 73.2436 511.858 70.6039 511.858 67.3476 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 511.858 61.4515 ]ct
@
grestore newpath
431.876 136.691 mo
431.876 133.435 433.97 130.795 436.553 130.795 cv
439.137 130.795 441.231 133.435 441.231 136.691 cv
441.231 139.948 439.137 142.587 436.553 142.587 cv
433.97 142.587 431.876 139.948 431.876 136.691 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
431.876 136.691 mo
431.876 133.435 433.97 130.795 436.553 130.795 cv
439.137 130.795 441.231 133.435 441.231 136.691 cv
441.231 139.948 439.137 142.588 436.553 142.588 cv
433.97 142.588 431.876 139.948 431.876 136.691 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 431.876 130.795 ]ct
@
grestore newpath
587.232 277.531 mo
587.232 274.275 589.327 271.635 591.91 271.635 cv
594.493 271.635 596.587 274.275 596.587 277.531 cv
596.587 280.788 594.493 283.427 591.91 283.427 cv
589.327 283.427 587.232 280.788 587.232 277.531 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
587.232 277.531 mo
587.232 274.275 589.327 271.635 591.91 271.635 cv
594.493 271.635 596.587 274.275 596.587 277.531 cv
596.587 280.788 594.493 283.427 591.91 283.427 cv
589.327 283.427 587.232 280.788 587.232 277.531 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 587.232 271.635 ]ct
@
grestore newpath
587.057 137.871 mo
587.057 134.614 589.151 131.975 591.735 131.975 cv
594.318 131.975 596.412 134.614 596.412 137.871 cv
596.412 141.127 594.318 143.767 591.735 143.767 cv
589.151 143.767 587.057 141.127 587.057 137.871 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
587.057 137.871 mo
587.057 134.614 589.151 131.975 591.735 131.975 cv
594.318 131.975 596.412 134.614 596.412 137.871 cv
596.412 141.127 594.318 143.767 591.735 143.767 cv
589.151 143.767 587.057 141.127 587.057 137.871 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 587.057 131.975 ]ct
@
grestore newpath
279.616 278.281 mo
279.616 275.025 281.71 272.385 284.293 272.385 cv
286.877 272.385 288.971 275.025 288.971 278.281 cv
288.971 281.537 286.877 284.177 284.293 284.177 cv
281.71 284.177 279.616 281.537 279.616 278.281 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
279.616 278.281 mo
279.616 275.025 281.71 272.385 284.293 272.385 cv
286.877 272.385 288.971 275.025 288.971 278.281 cv
288.971 281.537 286.877 284.177 284.293 284.177 cv
281.71 284.177 279.616 281.537 279.616 278.281 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 279.616 272.385 ]ct
@
grestore newpath
279.375 137.871 mo
279.375 134.614 281.469 131.975 284.053 131.975 cv
286.636 131.975 288.73 134.614 288.73 137.871 cv
288.73 141.127 286.636 143.767 284.053 143.767 cv
281.469 143.767 279.375 141.127 279.375 137.871 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
279.375 137.871 mo
279.375 134.614 281.469 131.975 284.053 131.975 cv
286.636 131.975 288.73 134.614 288.73 137.871 cv
288.73 141.127 286.636 143.767 284.053 143.767 cv
281.469 143.767 279.375 141.127 279.375 137.871 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 279.375 131.975 ]ct
@
grestore newpath
199.634 350.042 mo
199.634 346.786 201.728 344.146 204.312 344.146 cv
206.895 344.146 208.989 346.786 208.989 350.042 cv
208.989 353.298 206.895 355.938 204.312 355.938 cv
201.728 355.938 199.634 353.298 199.634 350.042 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
199.634 350.042 mo
199.634 346.786 201.728 344.146 204.312 344.146 cv
206.895 344.146 208.989 346.786 208.989 350.042 cv
208.989 353.298 206.895 355.938 204.312 355.938 cv
201.728 355.938 199.634 353.298 199.634 350.042 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 199.634 344.146 ]ct
@
grestore newpath
199.875 208.767 mo
199.875 205.511 201.969 202.871 204.553 202.871 cv
207.136 202.871 209.23 205.511 209.23 208.767 cv
209.23 212.023 207.136 214.663 204.553 214.663 cv
201.969 214.663 199.875 212.023 199.875 208.767 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
199.875 208.767 mo
199.875 205.511 201.969 202.871 204.553 202.871 cv
207.136 202.871 209.23 205.511 209.23 208.767 cv
209.23 212.024 207.136 214.663 204.553 214.663 cv
201.969 214.663 199.875 212.024 199.875 208.767 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 199.875 202.871 ]ct
@
grestore newpath
199.875 67.3476 mo
199.875 64.0912 201.969 61.4515 204.553 61.4515 cv
207.136 61.4515 209.23 64.0912 209.23 67.3476 cv
209.23 70.6039 207.136 73.2436 204.553 73.2436 cv
201.969 73.2436 199.875 70.6039 199.875 67.3476 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
199.875 67.3476 mo
199.875 64.0913 201.969 61.4515 204.553 61.4515 cv
207.136 61.4515 209.23 64.0913 209.23 67.3476 cv
209.23 70.6039 207.136 73.2436 204.553 73.2436 cv
201.969 73.2436 199.875 70.6039 199.875 67.3476 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 199.875 61.4515 ]ct
@
grestore newpath
123.829 276.935 mo
123.829 273.679 125.923 271.039 128.507 271.039 cv
131.09 271.039 133.184 273.679 133.184 276.935 cv
133.184 280.192 131.09 282.831 128.507 282.831 cv
125.923 282.831 123.829 280.192 123.829 276.935 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
123.829 276.935 mo
123.829 273.679 125.923 271.039 128.507 271.039 cv
131.09 271.039 133.184 273.679 133.184 276.935 cv
133.184 280.192 131.09 282.831 128.507 282.831 cv
125.923 282.831 123.829 280.192 123.829 276.935 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 123.829 271.039 ]ct
@
grestore newpath
122.199 136.575 mo
122.199 133.319 124.293 130.679 126.876 130.679 cv
129.46 130.679 131.554 133.319 131.554 136.575 cv
131.554 139.832 129.46 142.471 126.876 142.471 cv
124.293 142.471 122.199 139.832 122.199 136.575 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
122.199 136.575 mo
122.199 133.319 124.293 130.679 126.876 130.679 cv
129.459 130.679 131.554 133.319 131.554 136.575 cv
131.554 139.832 129.459 142.471 126.876 142.471 cv
124.293 142.471 122.199 139.832 122.199 136.575 cv
cp
gsave
[7.87043e-05 0 0 7.86947e-05 122.199 130.679 ]ct
@
grestore newpath
288.327 409.745 mo
279.818 409.745 li
279.818 361.964 li
288.327 361.964 li
288.327 409.745 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 567 ]ct
[9.16363 0 0 48.4364 279.491 156.927 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 28 
/H 148 
/M[28 0 0 -148 0 148 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&_Z9K5m/Zq_m/Zq_!!)Eeq#Tpao`=R_o`=R_o`=XarrE$!qZ?`tnc8XirrW-$!!<*"o)Saj
rrW-$!!<*"o)SajrrW-$!!<*"o)Jmo!<N?*r<*6*!WiB'oDnjk!WiH,r<36*!s8H&o`4sl!WiH,r<36*
!s8H&o`4sl!WiH,r<36*!s8H&o`,-r!<N?+"oSW/"U"o/!<MlorW**&"9f&0#R1M="U"l-!VQNm!<WB*
"U=o1"U5,4!W`>q!<*!$!WrT1r<EK1"Tnf,!VQKt!<E6("U583$3geB"pG)1!VQL*!<E6)"pYJC$k*LN
#6b53!<Mop&HMn6!sJo9$4@4K#mUV9!W`>r!"f54!WrT2#mq%J$4-q@!s/K(pAbBu!WrT2#n6bB"q1eB
"Tnf,pAbBu!<WK1$4ZqF"q:nE"9SZ*pAb<s!<WK1$jd=P%hB-Y#mUS8!<Mop&HMn7"U>>B%M''[$OI%@
!s&Gs!"f55"9o/A&/,`l'+YKX"U"l-p](s.!<NB/$4RR]()@Pp%13:B!W`>t!#,G7!WrW5$kO$c'G:ob
#mCD4!<E2s!##A6!WrW5$kEsa'+k`_#mCD4!<Mur'*/.:"UGMJ'c7i-(DIAg#6b21!Vl^/!<E6)#7M.Y
(`=2.'G(WW"9JT)q#D'/!<NB/$P!gc(Ddi"%LNFD!W`>t!!`N*!X&`9%MK3b(Ddf!%LNFD!W`>t!##A7
!sJu@',_f4*uu13%LE:@!<Mur'*/+9"UPVO(`XS<)]'+r#R(;2!Vl^/!<E9+#Rh:\)&jM3'bCcY"Tnc+
q#D'/!<WK2$kX3l)]KV/&.8^H!s&H%!;lg1!<NB.$P4*p+XA<U*#9%l"p=u.q#D'/!WrW6%hop(+<V^C
'+P<Q!s&Gu!##A7!sJu@&f;T/*?,e-%1!+>!<Mur'*/.:"UPVN(E4A8)]'(q#R(;2!Vl^%!<WH0$kaC"
,ps!H,Tdg7$O6e9!Vl^/!<NB.$4msm+<i!P)\ikj"p=r-q#D'/!WrT4%MTd$+!2L?'+P<P!s&Gu!##A7
!sJu@',_f4*uu13%1*1?!<Mur'*/1=#7V=b+X\]f-Qj9>$jQq;!W2rs!##A7":#8F(*"MD,U"-C&./XF
!<Mur'*/.:"pkeS)BU+G*Z5Y%#mLJ4!Vl^/!<N?-#nI^f*ZuRH)&!Jd"p4l,q#D'/!sJr>'H85F.k<"k
)A<Mb"Te`#!"/f/":#;H(*+SF,pER6((^fX"9AQ!!##A7!sT)D'H/&:+WhU:%g`FB!<Mur'*/.:"ptkT
)BU+G*Z5V%#mLJ4!Vl^/!<WK2%M]p-.4d#!+rV.)#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ"!#,D6
!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=
!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#Cj)!WrW6&/?-,+sJ*I'Eo!R"p4l,q#D'/!WrW6%i$$++sJ*I
'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk
+<i!O)AE\g"p4l,q#CBq&cr.>$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7
":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^+!<N?-$4djj+<i!O)AE\g!sSi.
!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;
%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl]s!<WK:#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r
,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur&HMt;
#S%Rh,UtAt.3fcG%1!+<!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,
q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s"9AQ,#7D"R(EOeI,pF?F
&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK
/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-
$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur
"p"c-"ptnV$l^<5+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+
#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!#5M9!sT)D'cS8>+s.^;%g`FB!<E0#qZ%91!WrW6%i$$+
+sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-
$4mpk+<i!O)AE\g"p4l,q#C[$!WrW6%i$$+$6gZ9)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#
!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g
"p4l,r;ccr'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,
+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur$3:54#S%Rh,UtAt#Upu;'Fb<O!Wi)s'*/.;
#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu
!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi/u'`\47!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;
%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#Cg(!X&`9&JlK5
,pa`U"r7aW#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=
#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&H$
!;um2!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F
&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^&!<N?-$4djj+<i!8*uYh(#mLJ4!Vl^/!<WK2%M]s/
.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:
"ptkU)^$=K*uYh(#mLJ4!W)j3!!!$%"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7
!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!"8l1"UGSQ*$d!c/L_nK
)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj
+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:
"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#
!"K#2":#;H(EOeI,pF?F&-N=F"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(
#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!!**%&H`4E&/?-,
+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/
$P=0r,:+W[*>T1n#6Y&.q#Cs,!WrW6&/?-,+sJ*I'FtKS!WrH(q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu
!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g
"p4l,q#CKt!WrW;$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI
,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^.!<N?-$4djj+<i!O)AE\g"p4l+!Vl^/!<WK2
%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur
'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^!!<WK2%M]Em,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n
#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'EJ:>#S%Rh,UtAt
.3fcG%1!+=!<Drr'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6
%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s#6=l/#7D+[*Xa2=,pF?F&./XF!<Mur
'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e
"Te`#!##A7":#;H(EOeI,pF?F&./XF!<N0"qu@B2!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>
+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#C^%!WrW6
&/?-,+pfG8)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s
'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,quH]r'*/.:"ptkU)^$=K*uYh(
#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>
+s.^;%g`FB!<Mur$NU;2"ptkU)^$=K*sW\u%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/
$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<N#s
'EA.9"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g
"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!"Ar2"UGSQ*$d!c/L_n`"V_CO"Te`#!##A7":#;H(EOeI
,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?
'c\JK/M/Cr)\`_e"Te`#!!!$4!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur
'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#Cp+!X&`9&JlK5,pa`U((^fT
#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt
.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#CHs!Wru<$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6
%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^-
!<N?-$4mpk+<i!O)AE\g"p=l+q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O
!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#CNu!WrW6%M'9n+<i!O
)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV
)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7
":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,
q#CU"!sJr?'c[W-.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;
%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^1!<WK2%M]s/.P35$,9%=+#R(81!!)lr'*/.;#7D+[
*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8
"UGSQ*$d!c/L_n`'Fb<O!Wi)s#QXu0#7D+[*[;"<,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4
!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F
&./XF!<N-!r;[K3!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh
,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#Ca&!WrW6&/?-,+sI:7)AE\g"p4l,q#D'/
!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7
!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,qZ%?2!!*-'"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$
,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur$ipD3"ptkU
)^$=K*uY=t%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/
!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=
!W<#s!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O
)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!"&`.":#;H(EOeI,mY\8((^fX"9AQ!!##A7!sT)D
'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/
!X&`9&JlK5,pa`U((^fX"9AQ#!#5J6!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS
!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^(!<N?-$4mpk+<i!O
)?pld#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H
(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/
!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4
!Vl^*!<N?-$4djj+<i!O)AE\b#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U
((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl]r!<Wo;#S%Rh
,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7
!sT)C'cS8>+s.^;%g`FB!<Mur&-2k:#S%Rh,UtAt.3fcG%1!"=!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7
!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`
'Fb<O!Wi)s!s&H+#7h1S(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj
+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!"o;6":#;H(EOeI,pF?F&./XF!<</r!##A7
!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81
q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!!NB)!sT)D%2Bg)+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;
%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D*0!WrW6&/?-,
+sJ*I'FtKS!s&E&q>_00!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;
#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#CX#!WrW6%i$#k+<i!O)AE\g"p4l,
q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(
#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,rW)ir'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r
,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur#lt,3
#S%Rh,UtAP/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,
q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi3!rW!T4!X&`9&JlK5,pa`U
((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/
.P35$,9%=+#R(81q#Cd'!X&`9&JlK5,pa`?*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7
!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.
q>_30!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`
'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^)!<N?-$4mpk+<i!O)AE>c#mLJ4!Vl^/!<N?-$4djj
+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:
"ptnV)^$=K*uYh(#mLJ4!Vl]q!>5G9"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81
q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur%fl_6"ptkU)^$=K*uYh(
#m1A6!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,
+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur!W`B,&-ra\*$d!c/L_n`'Fb<O!Wi)s'*/.;
#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu
!"f56"UGSQ*$d!c/L_n`'Fb<O!<N;t!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(
#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!!E<(":#;E&JlK5
,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2
%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur
'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX
"9AQ!!!WH*!sT)D'au$(+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt
.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D-1!WrW6&/?-,+sJ*I'FtKS!s&E&!;ca0!<N?-
$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur
'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^$!<N?-$4djj+:9;:*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+
#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K
*uYh(#mLJ4!W<#s!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-
$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!"&`/"UGSQ*$d!c/I3dM)\`_e"Te`#
!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g
"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`%!#5J6!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,
+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^(!<NB/
$P=0r,:+W[*<m8j$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu
!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g
"p4l,r;ccr'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5
,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur$3:21"ptkU)^$=K#Tjs!%g`FB!<Mur'*/1=
#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu
!##A7!sT)C'cS8>+s.^;%g`FB!<N&t'`\47!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F
&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#Cg(!sJr?'c\JK
/M/Cr"re6c#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:
"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ!
!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+
#R(81q#Cm*!X&`9&JlK5,pa`U((^TU#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS!s&Gu!##A7!sT)C'cS8>
+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#CEr!YGM=
$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s
'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^,!<N?-$4mpk+<i!O)AE\g"p+l-!Vl^/!<N?-$4djj+<i!O)AE\g
"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K
*uYh(#mLJ4!Vl]t!<N?-%gig^)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$,9%=+#R(81q#D'/!X&`9
&JlK5,pa`U((^fX"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur&ci%9"ptkU)^$=K*uYh(#mLJ4!!2lq
'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6&/?-,+sJ*I'FtKS
!s&Gu!##A7!sT)C'cS8>+s.^;%g`FB!<Mur"T\]/#S%RY*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW
+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS!s&Gu!#,G9"UGSQ
*$d!c/L_n`'Fb<O!W`;t!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!Vl^/
!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e"Te`#!!`N+":#;H(ENr/,pa`U((^fX
"9AQ!!##A7!sT)D'cS8>+s.^;%g`FB!<Mur'*/.:"ptkU)^$=K*uYh(#mLJ4!Vl^/!<WK2%M]s/.P35$
,9%=+#R(81q#D'/!X&`9&JlK5,pa`U((^fX"9AQ&!;lg1!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6
%i$$++sJ*I'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^%
!<N?-$4mpk+<h+9*uYh(#mLJ4!Vl^/!<N?-$4djj+<i!O)AE\g"p4l,q#D'/!sJr?'c\JK/M/Cr)\`_e
"Te`#!##A7":#;H(EOeI,pF?F&./XF!<Mur'*/.:"ptnV)^$=K*uYh(#mLJ4!W2rs!##A7!sT)C'cS8>
+s.^;%g`FB!<Mur'*/1=#S%Rh,UtAt.3fcG%1!+=!Vl^/!<NB/$P=0r,:+W[*>T1n#6Y&.q#D'/!WrW6
&/?-,+sJ*I'FtKS!s&Gu!"/f/!sT)C'cS8>+s.%.'FtKS!s&Gu!##A8"UGSQ*$d!c/L_n`'Fb<O!Wi)s
'*/.;#7D+[*[;sW+rqF1$3p\7!Vl^/!<N?-$4mpk+<i!O)AE\g"p4l,q#D'/!WrW6%i$$++sJ*I'FtKS
!s&H!!#,D6!sJr?'c\JK/M/Cr)\`_e"Te`#!##A7":#;H(*+SF,pF<E&./XF!<Mur'*/.:"ptnU)BU+G
*uYh(#mLJ4!Vl^/!<N?-$4dgh+!DdK)&*Sf"p4l,q#Cj)!sJr?'cSAH/1`4o)[-ob#R(81q#D'/!X&`8
&/H91,U=NQ((^fX"9AQ!!##A7!sT&B'H/&:+W_O9%LE=A!<Mur'*/.:"pkeS)BL"D*Z5V$#mLJ4!Vl^/
!<WK2%29a+.4Zns+rV+(#R(81q#CBq&cr1?$4msm+X83S)\ink"p=r-q#D'/!WrT4%MTd%+<V[A'+P<P
!s&Gu!##A7!sJu@',_i6+<;:4%LE:@!<Mur'*/1=#7V=b+Xefi-Qj9?$jQq;!Vl^+!<N?-$4dgh+!DdK
)&!Jd!sSi.!Vl^/!<N?,#n@Rb*$-.?(D7/_"Tnc+q#D'/!WrT4%2'Hr*Zc7:&If!L!s&Gu!##A8":#>J
(a(+Q-mTlN&ISgH!Wi)s'*/+9"UPYP(`XS<*#B4s#R(;2!Vl]s!<E96"UGPL()e,2)&3\k#6b21!Vl^/
!<E9+#Rq@\)&jM4'bCcY"Tnc+q#D'/!X&]8&JlH3,U=NQ((^fW"9JW"!##A6!sAl<&/?'$)As8$$jQn;
!<Mur&HMn7":#;F',DE%()%/c#6Y//!Vl^/!<E9*#7D%U()Ic&'+PBT"9SZ*q#D'/!X&Z6%MTd%+<V^C
'+P<P"9AQ!!##A6!X&`8%2'Bk().>i$3gV7!<Mur'*/+8!sT&?&/,`l&eGHX"Tnf,!Vl]u!<E6("qCqJ
&/,`l&e>BW"Tnf,!Vl^/!<N?,#Rq=\)&jM3'bCcY"Tnc+p](m,!<WK2$P!^\&eGKZ#6b21!VZR+!<E9+
#7:nN&.f?\#mUV9!<Mop&ci"8"U>AD%hK9_$jd.B!s&E&p](m,!X&]7%M9Bj().;h#mLM6!VZR+!<E6)
"pbPE%1N^Q#R1D5!<Mop&HMn6!sJo9$OdFO#mUV9!W`>r!!WH)!WrT2$2k59#mUV9!W`>r!!NB)!sJo:
$OmRV%h9$U#6b22!VZTn!=Ju4"pYD?#m^b>"9SQ'pAk0n$NgM8#6tM?#6k>6!r`5p!<*!,!sAc4#7(S?
"pG)1rW2`n&HMn6"9f#:$4@4K#R1G7!W`?$!;QWo!=8i2"9eu6"U"r0rW2ZlrW*'&!sJQ+!X&T,rW2Zl
rW*'&!sJQ+!X&T,rW2Zl%fl\4"9er5#6tG:"Tnf,!V?Bk!<N<)!sA`0!s8W(!V6<j!<<2u!rrE%!V6<j
!<<2u!rrE%!V6:#!<E6("9\l3"9\f.!<M`kquQg!quQTnq#L<nrrW*!nGrIfrrW*!nGrRirW<*%rW<*#
n,W1`mf<4cr;l?epAs^_pAsU\r;l-_r;lKipAk-mklCY_X8mhPkl?;8TE'K~>

%%EndBinary
grestore
np
284.053 363.96 mo
284.053 404.659 li
.750271 .679713 .654902 .901945 cmyk
19050 lw
gsave
[7.87043e-05 0 0 7.86947e-05 284.053 363.96 ]ct
@
grestore newpath
364.909 409.418 mo
356.4 409.418 li
356.4 361.309 li
364.909 361.309 li
364.909 409.418 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 567 ]ct
[9.16363 0 0 48.7636 356.073 157.255 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 28 
/H 149 
/M[28 0 0 -149 0 149 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&_>sH6lN$e_lN$e_rrDEdqZ6*bp&XX_p&XX_p&X^arrDuur;us!nGrLgqZ?]so)S^iqZ?]s
o)S^iqZ?]so)SdkrrW'"!!<-#oDnjk!<NB$"9AT+r;lQkrW*!#rW<9+"9S`-r;lQkrW*!#rW<9+"9S`-
r;lQk"9AN)!sJN*"U"o/!W`>q!<*!$!WrQ0r<EK0"9S]+!VQNm!=])4"9eu7"pP56!s/K(p&P'm%0?V7
"U529"pG,3!W`>q!"]/3!WrQ/#7(VA#R1G8!s/Ms!!WH)!WrT2#lP)4#R:J7rW2`n"p"`+!sJl6r<WQ2
"p>&-!VZQu!<E6("U551#m1D:"9\W(pAbd+!<WH/#RUtL%1ERL"U"l-!VZR+!<E9*#7:kL%hB*W#mLM6
!<Mop"9AN*"9o8@$OmRU$jm7D"9JT)pAbBu!<WH/#n-_A#7LqF"U"l-!VZR+!<NB-#Rh1T&eY`c$O6h;
!Wi&r'*/+8"9o/A&/#Wi&e>BV"Tnf,!Vl^0!<E6("UGMH&/#Te%LWLF!s/K(!;Z[/!<E6("UGJG&.oKc
%1<CE!s/K(q#D'/!WrT2$P*md(Ddi"%LNCC!s&Gu!##A6!X&`9%hf]q(`!_o$3p\8!<Mur'*/+8":#8D
&el)s'G(]["p4o-!Vl^#!<E6)#7:nP$PX<j'+bTZ"p4o-!Vl^/!<N?,#n@Ra)]]q;((gr\"Tnc+q#D'/
!<WK3%2'Ep*#oh3&.AdH!s&Gu!##A6!sJr=&/5s")&Ett$O6e:!<Mur'*/+9"UGJI'GhW)(D@;e#6Y,0
!WE)s!##A7"9o5E()nA?+WhU:%LE:A!Wi)s'*/.:"pthS)''e@*#K=u#mCD3!Vl^/!<N?,#n7L`)B9_8
((gr\"Tnc+q#D'/!WrT4%2'Hq*#oh2&I\pK!s&Gu!!rZ.":#>I(`stL#ppi:(D$rY"9JW"!##A7":#8F
()n>>+s.[:%LN@A!<Mur'*/.:"pkbR(`XV>*#B4s#mCD3!Vl^/!<N?-#n@Uc*$-.?(D7/`"Tnc+q#D'/
!sJr>',hu?.4HPb(_I/\"9JW%!<)s3!<NB/$P4'n+X83T)\ikj"p=r-q#D'/!WrW6%hop'+<V^B'+P<P
!s&Gu!##A7!sT)C'H%r7+<D@5%1*1?!<Mur'*/1=#S%Of+t+oj-m0B?$jQq;!Vl^'!<NB/$kO3q+seNZ
#94Ki$3gV6!Vl^/!<N?.$P*sj+!DdL)&*Pe"Tnc+q#D'/!WrZ8%i$!)+X%mE'+G6O!s&Gu!##A8"UPYQ
*$Zm`/1D_\&e,'L!Wi)s'*/.;#7M1]*[2mV+rh@0$3gV6!Vud1!!*-'#7D(Y)]p4H*uYh'#mCD3!Vl^/
!<N?.$P*sk+!DdK)&*Pe"Tnc+q#D'/!sJu@'cePK/1`4o)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE
!<Mur%06M4#7D(Y)^$=K*uYgs%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$
+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur!!*]6!s]2E
'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/
!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!"T)3!s]2E'cS8>+s.[:%LE4@!s&Gu!##A8"UPYR*@**d/L_k_'+G0M
!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H
'FkEQ!s&Gu!!30'"V:tM'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y
)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D!-!sJu@'cePL/M/Cq)\WYc"T\Z*q#D'/
!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3
!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#CNu!X&`:%M9O!,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I
'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t
,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=
#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#CU"!WrZ8&/GZn+<i!O)AEYf"Tnc+
q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0
$3gV6!Vl^1!<N?.$P4'm+<i!O)AEYf"Tnc+!!)lr'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0
.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur#QXu/
#7D%W)^#J3+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-
q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<N-!r;[K3!sJu@'cePL/M/Cq
)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk
+<i!O)&*Pe"Tnc+q#Ca&!sJu@'cePL/M.5W+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7
!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0
qZ%?2!!*-(#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H
'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s$ipD4#7M1]*[;sW+rge&&./UE!<Mur'*/.:#7D(Y
)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!##A7
":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!W<#s!##A7!s]2E'cS8>+s.[:%LE:@
!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I
'FkEQ!s&Gu!"&`.!s]2E'cS8>+p]8.'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]
*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&H"!#5J6
!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@
!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^(!<WK3%M^!0.P35$+pJu"%0m%<!Vl^/!<NB/$kX<t,:+W[
*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j
,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7
!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^*!<NB/$kX<t,:+W[*#9(g$3gV6
!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_
'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl]r!<Ni8#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk
+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur&-2h7
#7D(Y)^$=K*uYh'#mCA4!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0
q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur!s&H*#7h1Q'cS8>+s.[:
%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-
+sJ*I'FkEQ!s&Gu!"o;6!s]2E'cS8>+s.[:%LE:@!<</r!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;
#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu
!!NB*"UPYR%36]D/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'
#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D*0!sJu@'cePL/M/Cq)\WYc"Te])q>_00!X&`:&JuQ6
,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3
%M^!0.P35$+r_1)#6b/0q#CX#!X&`:&JuPs,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu
!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m
"p=r-rW)ir'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL
/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur#lt)0#7D(Y)^$=2+s.^;%LE:@!<Mur'*/.:
#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!
!##A7!s]2F()nA?+s.^;%LE:@!<N)urW!T4!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_
'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#Cd'!WrZ8%i$$+
+sJ*6)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:
#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q>_30!<WK3%M^!0.P35$+r_1)#6b/0
q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&
#mCD3!Vl^)!<WK3%M^!0.P35$+r^\!%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-
+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl]q!>5G:
#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu
!##A8"UPYR*@**d/L_k_'+G0M!Wi)s%fl_7#7M1]*[;sW+rh@0$3LJ8!<Mur'*/.:#7D(Y)^$=K*uYh'
#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ
,pF<E&./UE!<Mur!W`?)&-iRS()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3
%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!"f55!s]2F()nA?+s.^;%LE:@rrMoq
'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW
"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur"9AQ+#7D"P'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt
.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E
'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/
!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur"p"f0#n@[j$m[;S/L_k_'+G0M
!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H
'FkEQ!s&Gu!#5M:"UPYR*@**d/L_k_'+G0M!W`9$qZ%91!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F
()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#C[$
!X&`:&JuQ6$7-uB*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@
!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-r;ccr'*/.:#7D(Y)^$=K
*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!##A7":#>I
(`jnJ,pF<E&./UE!<Mur$3:21#7D(Y)^$=K#Tjs!%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/
!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@
!<N&t'`\47!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW
+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#Cg(!WrZ8%i$$++sJ*H"r%OR"Tnc+q#D'/!sJu@
'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/
!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`'!;um2!<NB/$kX<t,:+W[*#9(m
"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt
.3]]E%0m%<!Vl^&!<NB/$kX<t,:+WA+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8
%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!W)j3
!!!$$!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)
#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!"8l0!s]2F()nA?+s.^-'FkEQ!s&Gu!##A7!s]2E'cS8>
+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8
&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/
!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!"K#2!s]2E'cS8>+s.[:%Km(A
!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O
)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!!**&&HrIN'cePL/M/Cq)\WYc"Te`#!##A7":#>I
(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#Cs,
!sJu@'cePL/M/Cq)\WYc!X/W+q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@
!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#CKt!X&`=$kX<t,:+W[
*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j
,UtAt.3]]E%0m%<!Vl^.!<NB/$kX<t,:+W[*#9(m"p=r,!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/
!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6
!Vl^!!<N?.$P3a_)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq
)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'EJ7;#7D(Y)^$=K*uYh'#mCD3!<Drr'*/.:#7D%W
)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7
!s]2F()nA?+s.^;%LE:@!<Mur#6=l.#7D%W)[dc4+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<
!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:
%LE:@!<N0"qu@B2!sJu@'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y
)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#C^%!sJu@'cePL/I=!X+r_1)#6b/0q#D'/
!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3
!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0quH]r'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O
)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s$NU;3#7M1]
*[;sW+pT)'&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/
!sJu@'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<N#s'EA.8!s]2F()nA?+s.^;%LE:@
!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T
((^fW"9AQ!!"Ar1!s]2F()nA?+s.^;"V(hB!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j
,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!!!$4
!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6
!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#Cp+!WrZ8%i$$++sJ*H'FkEO"Tnc+q#D'/!sJu@'cePL/M/Cq
)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk
+<i!O)&*Pe"Tnc+q#CHs!sK5B%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7
!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^-!<WK3%M^!0.P35$+r_1)#6b,0
!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:
%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl]u!<NB/$k<jd*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm
+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;
#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu
!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^"!<N?.$P4'^)^$=K*uYh'
#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ
,pF<E&./UE!<Mur'`e@<#7D(Y)^$=K*uYh'#mCD3!<<,s!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=
#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu
!!iT,!s]2E'cS8&+sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0
$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&H$!;um2!<WK3%M^!0
.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<Mur'*/.:
#7D%W)^$=K*uPb&#mCD3!Vl^&!<WK3%M^!0.P34X.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-
q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E
%0m%<!W)j3!!!$$":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk
+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!"8l0":#>I(`jnJ,pF<5((^fW"9AQ!!##A7
!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0
q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?+s.^;%LE:@!<N-!r;[K3!WrZ8%i$$++sJ*H
'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm
+<i!O)AEYf"Tnc+q#Ca&!WrZ8%i$$++sI:7)&*Pe"Tnc+q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#!##A7
":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+
qZ%?2!!*0*#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I
'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur$ipG6#n@[j,UtAt.3\s8'+G0M!Wi)s'*/.;#7M1]
*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8
"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf"Tnc+
q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s%KQV6#7M1]*[;sW+rh@0
":>>9!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL
/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur!<E66!s]2F()nA?+s.^;%LE:@!<Mur'*/.:
#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!
!"]/4!s]2F()nA?+s.^;%LE:?!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E
%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!!<6'!s]>E%i$$+
+sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW+rh@0$3gV6!Vl^/!<N?.
$P4'm+<i!O)AEYf"Tnc+q#D$.!WrZ8%i$$++sJ*H'FkEQ!s&B&q#D'/!sJu@'cePL/M/Cq)\WYc"Te`#
!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^/!<N?.$P*sk+<i!O)&*Pe
"Tnc+q#CR!!sJu@'b)0/.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!##A7!s]2F()nA?
+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^0!<WK3%M^!0.P35$+r_1)#6b/0!;Z[/!<NB/
$kX<t,:+W[*#9(m"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&Gu!##A7!s]2E'cS8>+s.[:%LE:@!<Mur
'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^#!<NB/$kX<t$R6rD+rh@0$3gV6!Vl^/!<N?.$P4'm+<i!O)AEYf
"Tnc+q#D'/!WrZ8%i$$++sJ*H'FkEQ!s&Gu!##A8"UPYR*@**d/L_k_'+G0M!Wi)s'*/.;#7M1]*[;sW
+rh@0$3gV6!WE)s!##A7!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vl^/!<WK3
%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!!!rZ-!s]2F()nA?#pLH0'FkEQ!s&Gu
!##A7!s]2E'cS8>+s.[:%LE:@!<Mur'*/1=#n@[j,UtAt.3]]E%0m%<!Vl^/!<NB/$kX<t,:+W[*#9(m
"p=r-q#D'/!WrZ8&/H3-+sJ*I'FkEQ!s&H#!<)s3!<N?.$P*sk+<i!O)&*Pe"Tnc+q#D'/!sJu@'cePL
/M/Cq)\WYc"Te`#!##A7":#>I(`jnJ,pF<E&./UE!<Mur'*/.:#7D(Y)^$=K*uYh'#mCD3!Vl^'!<N?.
$P*sk+<i!O#8n3c#mCD3!Vl^/!<WK3%M^!0.P35$+r_1)#6b/0q#D'/!X&`:&JuQ6,pa`T((^fW"9AQ!
!##A7!s]2F()nA?+s.^;%LE:@!<Mur'*/.:#7D%W)^$=K*uPb&#mCD3!Vud1!!*0*#n@[j,UtAt.3]]E
%0m%<!Vl^/!<NB/$kX<t+seNZ*#9(m"p=r-q#D'/!WrZ8&/H3,+X%pG'FkEQ!s&Gu!##A7!s]2E'cS5<
+W_L8%LE:@!<Mur%06P7#n@[j,Uk8q.3]]7'+G0M!Wi)s'*/.;#7M.[*?ldU+rh@/$3gV6!Vl^/!<N?.
$P*sj+!DdL)&*Pe"Tnc+q#D'/!WrZ8%i$!)+X%mE'+G6O!s&Gu!##A8"UPYQ*$Zm`/1D_\&e,'L!Wi)s
!!*]6":#;G(*"MC,9\!@%giLD!<Mur'*/.:"ptkT)BU(E*Z,P##mCD3!Vl^/!<N?-$4dgg*ZuRH(_[>b
"Tnc+q#D'/!sJr?'H85F.Olhh)%m>_"Te`#!"T)3":#8F()n>>+s.[:%LN:A!s&Gu!##A7!sT&A'Gqf3
*ul(0%1*1?!<Mur'*/.:"pkbQ(`XS<*#B4s#mCD3!Vl^/!<WK2%20X&-7LAj*uGRu"p=u.q#D'/!WrW6
%MTd$+!2L?'+G6O!s&Gu!!30&!tYVB%2'Hq*#ok4&I\pK!s&Gu!##A7!sJu?&f2H+*#]P($j["=!<Mur
'*/1<#7M1]+!W*Z,97R3$O-_8!Vl^/!<E9,#n7L_)B9_8((^l["9SZ*q#D!-!<WK2$kO*i)B'G,%grUF
"9/Dt!##A6!sJr<&/5ou)&Eqs$O6e:!<Mur'*/.;#7D%X)^$=K+;tq($3^P6!Vl^/!<E6)#7D(V()Rl(
&e56R"9JT)q#D'/!<NB/$4[[_()@Sq%1*4@!W`>t!!E<'!X&`<$4[X^'bqDo%1*4@!W`>t!##A7!sJu@
',MT.*?,b+%1!+>!<Mur#6=i,"9o/A&H3=K&e>BV"Tnf,!Vl^/!<E6("UGMH&J>]f%LWLF!s/K(q#CX#
!<N?,#R_.A&I8pW$O6h;!W`>t!!`N+!sJo;%hnpY#Sn$_$3gV8!<Mrq&HMn7":#8B%M''Z$OI"?!W`>r
!"f54!sAf7$OmRU$jm7D"9JT)pAbBu!<WH/#n-_A#7LqF"U"l-!VZQt!<NB-#Rh(N&J>]f%LWLF!s/Mt
!!WH)!X&Z3#lP)4#R:J7rW2`n"p"`+!sJl6r<WQ2"p>&-!VZQu!<E6("U551#m1D:"9\W(pAbd+!<WK0
#RUtL%1ERL"U"l-!WE)q!<*!$!WrQ0r<EK0"9S]+!VQNm!=])4"9eu7#6k>7!s/K(p&P'm%0?V7"U52:
"pG,3!W`>q!"]/3!WrQ/#7(VB#R1G8!s/Mr!<*!$!WrQ.rWE9)!Wr?%o`4sl!WiH+rWN6'rrW0#o`4sl
!WiH+rWN6'rrW0#o`,*q!<N?+qum6,!s8T*!V?Bj!W)rs!Vufm!;urq!rW/k!;urq!rW/k!<3*"!rE'"
!r`5k!;6H_!;Z`p!Up*_!Up*f!W<*!!U]sa!UKg_!V?Bf!;Z`_!;Z_u!.k48!.k3&!3ZBQ~>

%%EndBinary
grestore
np
360.62 363.442 mo
360.62 404.141 li
.750271 .679713 .654902 .901945 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 360.62 363.442 ]ct
@
grestore newpath
441.491 408.764 mo
432.982 408.764 li
432.982 360.982 li
441.491 360.982 li
441.491 408.764 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 567 ]ct
[9.16363 0 0 48.4364 432.655 157.909 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 28 
/H 148 
/M[28 0 0 -148 0 148 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 28 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcN(VrW23_rW2Kgq#LBpkQ(S_lN$Y[mf<(_mf<(_mf<(_n,W@errW*!nGrIfrrW*!nGrIfrrW*!
o)SdjrrN*#rr`9&rW2Tjr;d-)!s8Z/!s/Q'!V?Bj!<<3!"9/H%!V?Bj!<<3!"9/H%!V?Bk!=Jr2"9\l3
"9S`-!<MfmrW*<-"9\l4"pG,3!r`5n!<*!#!s8])"Tef/!r`5n!<*!#!s8])"Tef/!r`5n!"T)3!X&Z1
"pYA;"U"o/!<MlorW*B/"9o):#mgkB"U"o+!VZTn!=Ju4"U>8<#R:P;!s8H&pAk0n$NgM8#6tM?#6k>6
!r`5p!"f54!X&Z3#mq%J$4$h>!s/K(pAbd+!<NB.#RUtL%1ERK"U"l-!VZR+!<E6)"U>>A$k*LM#6b22
!<Mop"p"`+"9f#:r<if9#6b22!<Mop&HMq8"U>AD%M''[$jd+A!s&Gs!"f55"9o,>%M03a&.JsO"Tnc+
pAb<s!WrT2$jmFS&.f<[#mUV9!<Mop"p"c-"U>ADrXT5D$jd.B!s&Gs!"f56"U>AE&JPrp'+bTZ"p=u.
p](j+!<NB/$4[[`()@Sq%1*4ArW2fp&-2e5"9o/A&/,`l&e>BV"U"`)!!)iq&-2e5"9o/A&/,`l&e>?U
"U"`)q#D'/!WrT3%1s?n)]KV.%grUG!W`>t!##A6!sJr>&Jc6&)Aj/!$O6e9!<Mur'*/+9"U>GI'G_N&
((q)a#6Y)/!Vl^#!<E9+#7D%U$PjNp'bUr_#6Y)/!Vl^/!<NB.$4dji*ZuRG(_R;b"Tnc+q#D'/!<`T6
%MK^"*Zc7:&If!K!W`>t!##A6!sJu?&f)B))]0;$$jQn:!<Mur'*/+9"UPVM()\&1(_mPh#6Y)/!WE)s
!##A7"U>GJ(EObG,Tn'A%giIB!Wi)s'*/.;#7;"W)]p4H*Z5V##mCD3!Vl^/!<N?-#n@Uc*$-.?((gr\
"Tnc+q#D'/!WrW5%MKZu*Zc79&I\pK!s&Gu!!rZ."UGPN)'C4R#q.&?(D$rY"9JW"!##A7":#;G(*"JB
,9Ig<%giIB!<Mur'*/.;"ptkT)BL"D*#K:u#mCD3!Vl^/!<NB.$4dgg*ZuRF(D7/`"Tnc+q#D'/!sJr?
'H85E.Olbf(_R5]"9JW%!<)s3!<NB/$P=0r+s\EV*#/tk"p4l,q#D'/!X&`8&/?-++X%jD'+P<P!s&Gu
!##A7":#8E'cS2:+<;=5%1*1?!<Mur'*/1=#n@[i,Uk5o-Qs??$jQn:!Vl^'!<NB/$ka?t+seNY#94Kj
$3gS5!Vl^/!<NB/$P4$l+!DdK)&*Pe"Tnc+q#D'/!X&`9&/?-++X%mE'+P<P!s&Gu!##A8"UPYS*$csa
/1;Y['+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vud1!!*-(#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/
$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur
%06M5#7D(Y*$?FL*uYgs%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(
#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur!!*]6":#;G'cS8>
+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9
&/H6.+sJ*I'FkEQ!s&Gu!"T)3":#;G'cS8>+s%U8%LE4@!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s
'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P
!s&Gu!!30'"V:tM(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL
*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D!-!sJu@(*+\N/M/Cq)A<Pb"9AQ)q#D'/!X&`:
&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/
!<WK3%Mg'2.P35$+rV+(#6Y)/q#CNu!X&`:%MBU#,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ
!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[
*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k
,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#CU"!X&`9&/GZo+<i!O)AEYf"Tnc+q#D'/
!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5
!Vl^1!<NB/$P4'n+<i!O)AEYf"Tnc+!!)lr'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$
+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur#QXu0#7D(X
)^#J3+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/
!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<N-!r;[K3!sJu@(*+\N/M/Cq)A<Pb
"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N
)&!Jd"Tnc+q#Ca&!sJu@(*+\N/M.5W+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G
(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/qZ%?2
!!*-(#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P
!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s$ipD4#7M4^+!W'X+rge&&./UD!<Mur'*/.;#7D(Y*$?FL
*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J
(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!W<#s!##A7":#;G'cS8>+s%U8%LE:@!<Mur
'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ
!s&Gu!"&`.":#;G'cS8>+p]5-'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X
+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&H"!#5J6!<WK3
%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur
'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^(!<WK3%Mg'2.P35$+pJr!%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m
"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju
.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G
'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^*!<NB/$kaC!,:+W[*#9(g$3gS5!Vl^/
!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L
!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl]r!<Ni9#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N
)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur&-2h8#7D(Y
*$?FL*uYh'#mCA4!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/
!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur!s&H+#7h1R'cS8>+s%U8%LE:@
!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I
'FkEQ!s&Gu!"o;6":#;G'cS8>+s%U8%LE:@!<</r!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^
+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!!NB*
"UPYS%36`E/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3
!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D*0!sJu@(*+\N/M/Cq)A<Pb"9JT(q>_00!X&`:&f;]8,pa`T
((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2
.P35$+rV+(#6Y)/q#CX#!X&`:&f;\u,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7
":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,
rW)ir'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq
)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur#lt)1#7D(Y*$?F3+s.^;%LE:@!<Mur'*/.;#7D(X
)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7
":#;G(*"G@+s.^;%LE:@!<N)urW!T4!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L
!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#Cd'!X&`9&/?-,+sJ'5
)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y
*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q>_30!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/
!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3
!Vl^)!<WK3%Mg'2.P35$+rUUu%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I
'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl]q!>5G:#7M4^
+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8
"UPYS*@30e/L_k^'+G0L!Wi)s%fl_7#7M4^+!W'X+rh@0$3LJ7!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3
!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E
&./UD!<Mur!W`?*&-iRS(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2
.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!"f55":#;G(*"G@+s.^;%LE:@rrMoq'*/.;
#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu
!##A7":#;G(*"G@+s.^;%LE:@!<Mur"9AQ,#7D"Q'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD
%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>
+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9
&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur"p"f0#n@^k$mdAT/L_k^'+G0L!Wi)s
'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P
!s&Gu!#5M:"UPYS*@30e/L_k^'+G0L!W`9$qZ%91!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@
+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#C[$!X&`:
&f;]8$7-uB*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur
'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,r;ccr'*/.;#7D(Y*$?FL*uYh'
#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK
,pF<E&./UD!<Mur$3:22#7D(Y*$?FL#Tjs!%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3
%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<N&t
'`\47!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0
$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#Cg(!X&`9&/?-,+sJ'G"qqIQ"Tnc+q#D'/!sJu@(*+\N
/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/
$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW&!;um2!<NB/$kaC!,:+W[*#9(m"p4l,
q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD
%0m";!Vl^&!<NB/$kaC!,:+WA+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,
+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!W)j3!!!$$
":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/
q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!"8l0":#;G(*"G@+s.^-'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8
%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.
+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/
$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!"K#2":#;G'cS8>+s%U8%Km(A!s&Gu
!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf
"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!!**&&HrIN(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK
,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#Cs,!sJu@
(*+\N/M/Cq)A<Pb!X&Q*q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur
'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#CKt!X&`=$kaC!,:+W[*#9(m
"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju
.3]ZD%0m";!Vl^.!<NB/$kaC!,:+W[*#9(m"p4l+!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9
&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^!
!<NB/$P3a_*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb
"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'EJ7<#7D(Y*$?FL*uYh'#mCD3!<Drr'*/.;#7D(X)^$=K
*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G
(*"G@+s.^;%LE:@!<Mur#6=l/#7D(X)[dc4+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/
!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@
!<N0"qu@B2!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL
*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#C^%!sJu@(*+\N/I=!X+rV+(#6Y)/q#D'/!X&`:
&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/
!<WK3%Mg'2.P35$+rV+(#6Y)/quH]r'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf
"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s$NU;3#7M4^+!W'X
+pT)'&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@
(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<N#s'EA.8":#;G(*"G@+s.^;%LE:@!<Mur
'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW
!s&Gu!"Ar1":#;G(*"G@+s.^;"V(hB!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju
.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!!!$4!X&`9
&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/
!<NB/$P4'n+<i!O)AEYf"Tnc+q#Cp+!X&`9&/?-,+sJ'G'+P<N"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb
"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N
)&!Jd"Tnc+q#CHs!sK5B%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G
(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^-!<WK3%Mg'2.P35$+rV+(#6Y&/!Vl^/
!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@
!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl]u!<NB/$k<me+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O
)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^
+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8
"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^"!<NB/$P4'^*$?FL*uYh'#mCD3
!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J(`stK,pF<E
&./UD!<Mur'`e@=#7D(Y*$?FL*uYh'#mCD3!<<,s!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k
,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!!iT,
":#;G'cS8&+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5
!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&H$!;um2!<WK3%Mg'2.P35$
+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X
)^$=K*Z5V$#mCD3!Vl^&!<WK3%Mg'2.P34X.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/
!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";
!W)j3!!!$$":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N
)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!"8l0":#>J(`stK,pF<5((^fW!s&Gu!##A7":#;G
(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/
!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;%LE:@!<N-!r;[K3!X&`9&/?-,+sJ'G'+P<P
!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O
)AEYf"Tnc+q#Ca&!X&`9&/?-,+sI:6)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7":#>J
(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+qZ%?2
!!*0*#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ
!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur$ipG6#n@^k,q:Ju.3\s7'+G0L!Wi)s'*/.;#7M4^+!W'X
+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS
*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+q#D'/
!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s%KQV6#7M4^+!W'X+rh@0":>>8
!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq
)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur!<E66":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X
)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!"]/4
":#;G(*"G@+s.^;%LE:?!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";
!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!!<6'":#GF&/?-,+sJ'G
'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0$3gS5!Vl^/!<NB/$P4'n
+<i!O)AEYf"Tnc+q#D$.!X&`9&/?-,+sJ'G'+P<P!s&B&q#D'/!sJu@(*+\N/M/Cq)A<Pb"9JW"!##A7
":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^/!<NB/$P4$l+<i!N)&!Jd"Tnc+
q#CR!!sJu@((D91.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7":#;G(*"G@+s.^;
%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^0!<WK3%Mg'2.P35$+rV+(#6Y)/!;Z[/!<NB/$kaC!
,:+W[*#9(m"p4l,q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&Gu!##A7":#;G'cS8>+s%U8%LE:@!<Mur'*/1=
#n@^k,q:Ju.3]ZD%0m";!Vl^#!<NB/$kaC!$R6rD+rh@0$3gS5!Vl^/!<NB/$P4'n+<i!O)AEYf"Tnc+
q#D'/!X&`9&/?-,+sJ'G'+P<P!s&Gu!##A8"UPYS*@30e/L_k^'+G0L!Wi)s'*/.;#7M4^+!W'X+rh@0
$3gS5!WE)s!##A7":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vl^/!<WK3%Mg'2
.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!!rZ-":#;G(*"G@#pLH0'FkEQ!s&Gu!##A7
":#;G'cS8>+s%U8%LE:@!<Mur'*/1=#n@^k,q:Ju.3]ZD%0m";!Vl^/!<NB/$kaC!,:+W[*#9(m"p4l,
q#D'/!X&`9&/H6.+sJ*I'FkEQ!s&H#!<)s3!<NB/$P4$l+<i!N)&!Jd"Tnc+q#D'/!sJu@(*+\N/M/Cq
)A<Pb"9JW"!##A7":#>J(`stK,pF<E&./UD!<Mur'*/.;#7D(Y*$?FL*uYh'#mCD3!Vl^'!<NB/$P4$l
+<i!N#8n0b#mCD3!Vl^/!<WK3%Mg'2.P35$+rV+(#6Y)/q#D'/!X&`:&f;]8,pa`T((^fW!s&Gu!##A7
":#;G(*"G@+s.^;%LE:@!<Mur'*/.;#7D(X)^$=K*Z5V$#mCD3!Vud1!!*0*#n@^k,q:Ju.3]ZD%0m";
!Vl^/!<NB/$ka?t+seNY*#0"l"p4l,q#D'/!X&`9&/?-++X%mE'+P<P!s&Gu!##A7":#;G'cS5<+W_L7
%LE:@!<Mur%06P7#n@^j,Uk8q-m9H3'+G0L!Wi)s'*/.;#7D+[*?laS+<2+,$3gS5!Vl^/!<NB/$4mpj
+!DdJ)&!Jd"Tnc+q#D'/!X&`8%i$!(+<V[B'+G6O!s&Gu!##A8"UPYR*$Zm_.jlJX&e#!J!Wi)s!!*]6
":#;G(*"G@+s.^;%LN@A!<Mur'*/.;"ptkT)BBnA*#K:t#mCD3!Vl^/!<NB.$4dgg*?Q@C(D7/`"Tnc+
q#D'/!sJr?'H85D.4HSd(_I/\"9JW"!"T)3":#8F'cS5<+WVF6%1*+?!W`>t!##A7!sT&A',V]1*Z>e+
$j["<!<Mur'*/.:"pkbQ(`OM;)AWnn#R(81!Vl^/!<WK2%20U%,q(/d*Z#@q"p4o-q#D'/!<`T6%MK[!
*Zc79&If!K!W`>t!!30%!tYVB%1s?n)]KV.&.AdH!W`>t!##A6!sJu?&JZ0&)]08"$O6e9!<Mur'*/.<
#7M1\*?c[R+<)%+$3^M5!Vl^/!<E9+#Rq=[(`F;/'+YHU"9JT)q#D!-!<WK1$kF!e(`3u#%LNFD!ri;s
!##A6!sJo;%hfZo(DRMk$3p\8!<Mur'*/.;"ptkT)''hB*#B4t#mCD3!Vl^,!<E6)#7:nQ'G_Gt&.JpM
"TAGt!"]/3!X&]6$kO$c'G:ob#R(>0!Vl]u!<E6)"q(_G&/#Wi&J#6T"U"`)q#D'/!WrT3%1j9l)B'D+
%grUG!W`>s!"f55"9f&<%1j*`%h/jN"9SZ*pAbd+!WrT2#n.:T&.T*T"p>#/!VZR,!<N?,#71eK%hB*W
#mLM7!<E2q!"f56"U5;C&/,cn&e>BV"U"l-pAbd+!<NB.#RUqK%1<LJ"U"l-!VZR+!<E6("U>>@$k*IL
#6b22!<Mop&HMn6!sJo9$4@4K#mUV9!W`>r!!NB)!sJo:$OmRV%h9!S"pG)0!VZTn!<WE,"UG#4"pYA:
"9JT)p&P'm!s8W/#5nc1"pG)1!<MlorW**'!sJo-#6b;8!s/K(p&G9t!<NB-"pk28"pkP>"Tnf,r;cWn
rW*'%"9e]-!sA`/!r`5n!<*!#!WrT)"Tnl0!s8H&o`4sl!WiH,rWNB,!s8W(!VHEr!<E6("U4l0"pG/5
!s/K(o`4pk!WiE*rW<-%r;lNjr;lp"r<!$$r;lNjr;lp"r<!$$r;lNjrW*'%!sAK)"9S],!<M`ko`=jg
q#L'gnGr4_nGrOhqZ?`tn,W4amK!+brW2Eep]9d_p]8&.JcLB&kl?;8TE'K~>

%%EndBinary
grestore
np
437.187 362.925 mo
437.187 403.624 li
.750271 .679713 .654902 .901945 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 437.187 362.925 ]ct
@
grestore newpath
286.022 383.964 mo
357.993 384.438 li
25400 lw
gsave
[7.87043e-05 0 0 7.86947e-05 284.039 383.951 ]ct
@
grestore newpath
284.039 383.951 mo
291.545 379.639 li
292.023 379.364 292.634 379.529 292.909 380.008 cv
293.184 380.486 293.019 381.097 292.541 381.372 cv
288.006 383.977 li
292.506 386.642 li
292.981 386.923 293.138 387.536 292.857 388.011 cv
292.575 388.486 291.962 388.643 291.487 388.362 cv
cp
ef
359.976 384.451 mo
352.47 388.763 li
351.992 389.038 351.381 388.873 351.106 388.394 cv
350.831 387.916 350.996 387.305 351.474 387.03 cv
356.009 384.425 li
351.509 381.76 li
351.034 381.479 350.877 380.866 351.158 380.391 cv
351.44 379.916 352.053 379.759 352.528 380.041 cv
cp
ef
363.099 383.951 mo
434.819 383.951 li
gsave
[7.87043e-05 0 0 7.86947e-05 361.115 383.951 ]ct
@
grestore newpath
361.115 383.951 mo
368.593 379.59 li
369.069 379.312 369.682 379.473 369.96 379.949 cv
370.238 380.426 370.077 381.038 369.6 381.316 cv
365.083 383.951 li
369.6 386.586 li
370.077 386.864 370.238 387.476 369.96 387.953 cv
369.681 388.429 369.069 388.59 368.593 388.312 cv
cp
ef
436.803 383.951 mo
429.326 388.312 li
428.849 388.59 428.237 388.429 427.958 387.953 cv
427.68 387.476 427.841 386.864 428.318 386.586 cv
432.835 383.951 li
428.318 381.316 li
427.841 381.038 427.68 380.426 427.958 379.949 cv
428.237 379.473 428.849 379.312 429.326 379.59 cv
cp
ef
.750271 .679713 .654902 .901945 cmyk
ZHYQFL+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
379.426 410.765 mo
(!)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
390.996 410.765 mo
(x)sh
398.982 410.765 mo
( )sh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
403.48 410.765 mo
(/ 2)
[4.99814 4.49796 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
421.973 410.765 mo
(\000\001)sh
119.455 144.982 mo
81.8181 144.982 li
81.8181 136.145 li
119.455 136.145 li
119.455 144.982 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 567 ]ct
[38.2909 0 0 9.49091 81.4909 421.691 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 117 
/H 29 
/M[117 0 0 -29 0 29 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&Q2p:Q\cLsoirR(!k5a09c2m).cN2Z!l2\[%hZ<*E\,kgp
m/X9io)\4YquNf!!!3$!mf<7drW9/'rW;uur;cKjquQcuX98G'quQBhrrDrtrW9/'rW;uunGrOhrrW0%
X9AM)rrW0#nc8Xi!WiH+rWMs![KZX5!<WE%!V6<j!<<3#"9/Mk"i(9E"9\f/!rW/k!<*!!!r`<%"QK[.
"U"r2!s8W'!V69p!<E6("9e]-f`oq1rWNH.!s/N)!V?Bk!<rT-"9f#8#gWh7#mU_A#6k>7!s8H&o`4sl
"p+l0"U52:`<b]6rW`Q0"Tni.rW2ZlrW*3)!sAc3#7%jHo*G=#"9er2!s8H&qZ-Kn#lt&.!sAc3#RLj?
$OR4J#mUY<"9S]+!VQNm!<E6)"pG5<$4I@QXptdJ%1<LK"p>#0!<MlorW*9+!sJl7#n%.MrXH+A$4I=M
#mUV:!s/K(p&P'm#Qb)3"pbMC$OlY:]+#)U$OR1F"U"o/!<Mlo$NU80!sJl7$OmRV&F'kH&IK'[%L`[L
"U"o.!VQL&!<E6)"U>AD%hTHg'GTOAd1m!&'GD)j%LWRJ"9\W(pAbO$!<N?,#71eK&/"mSfG!!Q$5*s`
&.]3W#R1D6rW2`n%06J2!sJo9$OmUY&J>`%'BKl7&eYcf%h/jO"p>&-!VZR'!<E9+"pk\K&eu3!(`:1/
mhlQO(`*r%&Io0S"U"l-!VZR(!<E6)#7:nO',DE&)B0X-*;UWb)]K\5(DRSo$j[%?!W`>r!"/f.!X&]6
$kEsb()QreZl/i[$PsNk&Io0R"Tnf,!VZR(!<E6)"pk\K&JPrr(Dn!r)%7?!(Ddf"&If*Q"Tni+!VZR%
!<N?,#Rh7Y(E4A:rZJQkrZDRj*#TP*%LNFE!s/N!!"Ju/!<E9+#Rh7Y(`OJ;+L*(!+<M[F)&<kq$3p\8
!<Mop#6=i-"U>DF&d/se)B9d&*Xs,0*#]V-&If$N"9JT)pAbU&!<WK1$P!da(`FA7r#W9f%36E-)&Eu!
%1*4A!W`>r!"8l0"9o2C',V`4,:4f/.)75?-RL,`*uc".%1!+>!Wi&r%06J2"9o/A&f)B,+X/2q--@MC
,U4KT*#TG%$O6h;!<Mrq$ipA1!sJr=&/5s#*Zs2]dif,B*ul17&e56R"Tnc+p](a(!<N?,#Rh7Y(E4D;
+OhRk+UoP:*ZQ%5&e56R"Tnc+p](a(!WrT2$P4'm+=&?a/'9F,/.F*Z.4-5[(_[Ac"p=u.p](^'!<NB.
$4RXa)]p7Lr[#E.o-XG_$R6f8)&3\k#R(;2!VcX*!<E6("UPSL'Gqf3+X&$R\0Lqs%O*)?+<DF;'+YHU
"Tnc+p](a(!<N?,#n.C[(`OM=+g<-m+WqgE#T"-b$O6h;!<Mrq%fl_6"U>GI(E4JC.4Zr$/[R,@/M/M'
-mKfO'FkHS"9JT(q#LBp$NpY?%1s?n*?ZON,I/R(,9e9Q*#KA$$O6e:!<MrqrrEN/!sJr=&/5p!*?QCH
Z69Z"+!)C>((q)a#6Y,0!VcZo!=/c2#R_.V(E+:o*j6[p+!)@='bUu`#6Y,0!VcX)!<N<+#7D%W)BU1O
.4QhD/%I/>.Ocbl+WVC5%LE:A!Wi#q$NU81"U>DG',DH**UY#d*t022)]9A&%13=C!W`>r!"/f.!sJo:
%M9Bk)&hQUbT%$1)Aj5'&.AjL"9JT)pAbX'!<WK1$4RR](E",1)r)Fb*"<i+)Aj5'%h&aK"9JT)pAbX'
!X&]6%MBQs+!DjT-.4.!-4M7H,9S$F'bCcZ"Tnf,pAbR%!<NB.#n.=W'c%Y+)<r(J(`*r$&Io-R"U"l-
!VZR$!<E6)"UGJG&/,cW(;:UX(C_,q'bh8l%1*7C!s/K(quHWp%06J2"9f&=%1j0e'c%Rj(C_,p'b_/i
%1*7C!s/K(pAb<s!WrT2#R_+T()\&3*ZhU/%3?N0)Aa,#%13:C!s&Gs!<*!,!sAi8$OmUX&eYikZ4dTY
&J,H^$4$h=!W`>q!<*!*!sAf6$4ICT&.nLH]FbM_&.T0Y#mUV9!W`>q!<*!*!sAf6$4I@S&.n.>`XrRi
%h9$V#mUV9!W`>q!"8l/!X&Z4$P!^\'G_JC(XNs+()7Jq%h/jN"Tnf,p&P'm#Qb)2"pYGA$OkSqg'n;r
$k!CJ#6b54rW2]mrW*9+!sAc4#RLhGbREP@#R_"I#mU\=!sAN'p&P'm#6Fu1"U>;>$Gd,:$O-qE#6tD7
"9&>p!"/f.!WrQ/#71bI%M#uZp^d?6#Rh%H"pG,2!<MinrW*-'!sA`2r<KP4!!`]5#6k>7"9SQ'oDnjk
"Tec."9f"1#6b;8"U"o/rW2WkrW*0(!s8Z0#-.t4"pG/5!s8H&pAk0m#QXr-!sAc2#71;8YR1^D#m^b?
"U+u0!<Mclr;cp#!rrG%"9JZ,!r`5k!;uou!rW5t"LA71"9/H%!V-6h!<<3""7QH,"TAN'!r`5k!!WH)
!WiH,"QTa*"U,#2!s/K(nGrFeg&fV&qZ60dqZ5%Fg&h-Pn,W=d`WG3&qZ60drW3!"]E@R(rW<'"mJsBj
oE":YU]LGqli<^[q>g*eT`OW_p].>qiW&rZX9%;\p&VT&iW/<G^]D=QJcLB&JcLB&iW+Q1JcLB&JcLB&
JcLB&JcLB&JcP9?J,~>

%%EndBinary
grestore
np
85.3044 138.934 mo
115.83 138.934 li
.750271 .679713 .654902 .901945 cmyk
19050 lw
gsave
[0 -7.86947e-05 7.87043e-05 0 85.3045 138.934 ]ct
@
grestore newpath
119.455 213.709 mo
81.8181 213.709 li
81.8181 205.2 li
119.455 205.2 li
119.455 213.709 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 567 ]ct
[38.2909 0 0 9.16363 81.4909 352.964 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 117 
/H 28 
/M[117 0 0 -28 0 28 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&QN6@Q\H1ppiW6ptklB?:blR&/c2lMtli=j&hZ<-F[fP^o
mJs?io)\7Zr;ietr;l?er;lp"W<</%quQ`ro`4pkrrT/%rrW*!o)Sdjr;lp"W<</%quQ<frrN-$rr`9(
Ws&G)rrW0#nc8Xi"Tec/"9eu'#.Fg:"o\W*!s8H&o)Saj!s/Q,"R?6+"TS])!rrE%!V6<j!<WB*!sIQd
aTVYIrW<-%rW2Tj#QXr-!sAc2"pW`ceHc*YrWNE-!s/K(oDnjk"p+o2"pYD?cO/P:#71\A#6k;5!r`5n
!<*!'!WrT0#6tOR$0_a$#RCY>"U"o/rW2ZlrW*3)!sJi5#7.pJo*GX-#R:P;"9S`)!W)lo!!rZ,!WrT1
#71_Fr=$%BrX9,A$OI(D"U"o/!<MlorW*$$":,/9#n%1O%M')U&.B'[%LigR#mUS8!W`>q!<*!)!WrT2
#RUtK%K6jB%LNXR$OI(C"9S]+!VQNm!=&Z."U>;?$Om"Dp("bGrXB/B$OI(C"9S]+!VQL&!<E6("U58@
%M'*_&eaOE`tJjo&ePZb%1<FF"9S]+p&GL%!<NB-#RV"P&ebroi>0cU#o+-f&J#9W#6Y/.!VZR&!<E6(
"U>>B%M06c'A!rP'F>Ec&J,E[#mLM7rW2`n$NU80!sJo9$P!^['$M$L'*o3_%h/mQ"p>&-!VZR&!<N?,
"pteM',DB$)8dB\)@RK#(DRPm$j[">!W`>r!"/f.!sAi9%1s9j)&p(*p`'\])Aj5'&.AjL"9JT)pAbX'
!<WH/#n.@X'c.]))6t.])&N_u().>j$O?n<!W`>r!"/f.!sAf7$kEsc(Ds=n$5aQo'+k]^#R(;3rrMio
%06M5"UGPK'c7o4+<_o6+q5\<+<;@:'+PBT"Tnf,q#Cp*!!**&"UGMJ'Gqf2+!Df5+q5\<*uu78'+YET
"9JT)pAbF!!<WK1$P*jR()\&2*ZhU/%3?N0)Aj/#%LE=B!W`>r!"/f.!sJo;%h]Tp)]\_r[2o_s*#]V-
&If$N"9JT)pAbX'!X&]7%MTa#+XAB_..\n'.1I[Q-6jWP(D7/_"Tnf,p](a(!<NB.#n7L_)]p4J,j6Pr
,n)%C+<276&.8^H!s&Gt!"8l/!WrT3$kO*i*$-7%+lFQp,5r_n*uu78'+YET"Tnc+p](g*!<N?,#Rh7Y
(`OM=+<_oZ,2XRS+X%sM*>oV+%giOF!s&Gt!"T)2!sJo;&/H3-,q(5n/1f!skq*Ar/1W.s+s%U9%LE=B
!Wi&r$ipA1"9o2B',DN/+s[(5_C"k$%OEDH+s7mD'bCcY"Tnc+p](g*!<N?,#n.C[(`XV?+X&&>,Q/hs
+sA*O*?#_-%grUG!s&Gt!"K#1!WrT4$kX0j)]g+F+gN9p+WqjI)@.,m%grUG!s&Gt!"T)2!sJo<&/Q9.
,q1;p/1n4]%kT=_.46>^)&*Pe"p=u.!;QWo!=Ju6#n7I])&s_A+sO<;%3cu=*ZGq0%grUF!W`>s!<3'.
!<WK2$kO'g)B9e?+0m!u+!2LB(`!_o$3p\8!<MrqrW*9,"UGJH',MN+!ZiF*Z60Su*ZZ1:'bLl^#6Y)/
!VcX)!<E6)#7D%W)':%L-n-VA._.#<.4HVi+<;72%LE:@!Wi#q%KQS4"U>DG&f)?(*$$(AnK5[k%NZZ3
*#]V-&If'O"9JT)pAb[(!<WK1$4[U]()Rr.)]Rr[c5[<5)]BS2'bV&d#mCD4!<Mop$ipA2"U>AD&/,fr
)&h6Kef,#9)&F##%h&aJ!s/K(pAb[(!X&]6%MBNq*ZuXO,UChbi[#'[,U4HT*#KD%$jQq<!Wi#q$ipA1
"9o/@%M9?i()P".l50gD()7Jo%13=D"9&>q!"8l/!WrT3$OmX['GM:q(A&@K'bh;n%h&aL"U"`)quHWp
$NU80!sJr<%1a$a'Wr/V'GD&h$jd.B"9&>q!!E<(!sJo7$P!a`(E+54YT4,l)]9G+&.JpM"9JT)pAk0n
#Qk26#RV"N&.ngQZkE?M$4m^W$jm4C"9JT)p&P'm#Qk25#71eJ%M/1C]+>;[%L`^O#6b22!<MlorW*6+
"9f#:$OmUE&+'qL&H*+G%1EUN#6b22!<Mlo$NU80"9f#;%1a$a'`Jj-(=Eut'abWf&.T*T"pG)1!VHF#
!<E6("9o):$47.Kf*p@A#R_"I#m^b>"9SQ'o`,@#!<N?+"U>8=#mq$a$fh[$$47(F#6k>6!r`5n!"/f.
!WrQ/#6tPA$4=ZYmL':-$4-tC"pG)1rW2Zl#lt&/"9f#:$4IBQ%e^A=%1<LK"pG)1!<MfmrW*-("9\l4
X9Sq7"pP56!s8H&o)Saj"p4r1"U,)7Y6Y(3rWN?*!s8H&o)Saj"p4r1"U,)7Y6Y(3rWN?*!s8H&pAk-l
#lt)/"9er5#7(U=#mpqD#6tG:"9S]+!V6<i!WN3$"/uD)!s8W'!V-6h!WN5u"8rA2"T&9$!rW/j!;uru
!rE)k"Mb0;!rrE$!V-6i!<WB*!sIZg`WZPL"9S],!<MZiqZ5FQd/s.Fmf<4cd/r&(q>p$bqZ4_=jT>8Z
mf<=frW9b8mfWLirW2BdY6"7rlN!a^rW2<bU&k)jnc5Bbn,S%?JcLB&JcLB&JcLB&JcOd1JcLB&JcLB&
JcLB&a8g_~>

%%EndBinary
grestore
np
85.3045 207.932 mo
115.83 207.931 li
.750271 .679713 .654902 .901945 cmyk
gsave
[0 -7.86947e-05 7.87043e-05 0 85.3045 207.931 ]ct
@
grestore newpath
119.455 283.091 mo
81.8181 283.091 li
81.8181 274.255 li
119.455 274.255 li
119.455 283.091 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 567 ]ct
[38.2909 0 0 9.49091 81.4909 283.582 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 117 
/H 29 
/M[117 0 0 -29 0 29 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&Q2p:Q])h$oirR+"joF'8cN3/.cN2]"klAR$hZ<*E\,kgp
m/X9io)\4YquNi"rrN'!mf<7dr;s,(r;uouquHBiquQ`tXonV(r;lHhrrDrtr;s,(r;uoun,WFgrrW0%
!!BA,r<*'$rrMWirW*'%!X&E)pBA#0r<*-'!rW/k!<*$!!riB&"RQB/"oe`)!rrE$!V6<j!WN6$"9/Ma
"j7)L"TAK'!rW/k!!NB(!WrN-rWUsZeHYsU!X&T,rW2WkrW*6*!sAc4#7(U^$/c*s#RCY?"pG,3!W`>o
!<*!%!WrQ/#6"kI#jM]p#6tG:"Tni.!<MfmrW*-'!sAc3rWg(AoEbF$#6k>8!s8T*!Vufn!"&`-!WrQ/
"pbMB$EjgE$47(F#6k>7!s/Mr!<*!"!X&W0#7(YEr=-%BrXB&?$OR+C"9\W(p&P'm"p+l1"pYGAr<rZ8
ZOQmB"q(bE#6b54rW2]mrW*6*!sJl6#mq(>%/(.D%1*FO$O[:J#6b54rW2]m$3://!sJl7$4ICTrXeE.
`t8^k&.]6\$jd.B"9JT)p&GL%!<N?,#7:kL&/#Wii=sZRrY#MK&.K!R"p>&-!VZR%!<E6("U>>A%1a!^
ee6XK#S@UX$jm7D"9\W(pAbU&!<N?,#71bI%hK<bbnB+NrXfAG%L`[M"U"r,!VZR&!<E9*"pk\J&JPus
(W.*Y)#b<Y'b_,g$O6h<!W`>r!"/f.!X&`8%1j0g(`E;k],USc%N66')&F##%grXH"9JT)pAbR%!<NB.
#n.=W'G_Lg(]Y?[()7Jo%LNFE!s/K(pAbO$!<NB.#n%7U',CH^Zl&cY#o46h&.JsO"Tni+!VZR%!<N?,
#Rh4X(E+;9Y945q*ZQ%5&e56Q"Tnc+q#Cs+!!**&"UGMJ',MT.+!2UJZloo%+<MXE)&<hp$3p\8!<Mop
#6=i-"U>DF&dB'f)B9_;*OHjt*??+=)&Etu%1*4A!W`>r!"K#1!sJo;%M9Em)B0Y:*W@+h*Y'22*#fb3
'+bTZ"p=u.!VZR(!<NB.$4[^c*$?IP-7:25.)@;A-RU5d+WhU<&If!L!s/Mu!"K#1!X&]6%2'Ep*ZuXP
,j?Vt,mttC+s.dB'G(WW"U"`)q#Cg(!<N?,#Rh7Y(`OJ;h'(5j$6UE1)AWqq$3p_:rW2fp%KQS3!sJr=
&/,j!*?QCHeKNcm$QpQ5*#TM)%LNFE"9&>s!"K#1!sJo;&/H0,,UY#k/'BL-/.O0[.4-5[(_[Ac"p=u.
!Vl^(!<E6)"pteQ()n>>,lT+,-M&S`,mbe=*>oS'$j["=rW2fp%fl\4!sJu>&JQ'%+!DdO,.Jlr,7Gb?
+WqdD(D@;e#6b5/!Vl^)!<E6("UPSL'Gqc1+<ds5"!Jd-)?puk%grUG"9&>s!"T)2!sJo<&/Q9.,q1>q
/M4=^%kT@a.OQG_)&*Pf"p=u.!Vl^)!<E6)"pk_N()e29+sX?<$R6i=*ul.4&.8^G"9&>s!<3'-!WrT3
$kO*i)BBnBYosJt+!)C?((q)a#6Y/.!Vl^'!<E6("UGJH',MQ-!$8<d$6L<.)&<hp$3p\9rW2fp%06J3
"U>DG'cJ2>-RgP@/%I/?.Ocbl+s%R7%LE:A!W`>s!"/f.!sJr<&/,ft*$5)$nK>amrZ;Lg)]9D(%13=C
!W`>r!"/f.!sJo:%MBHm)B8Yqk8hhgrYu:a(`!es$jd+@!W`>r!"K#1!sJo:%M9Bk)&jM7*8MXf*=a&/
)]BP/'+bQY"p=u.!VZR(!<NB.$4[^c)^$=M,pjtf-fQK`-71#`+<DF:&.AgJ!s/Mt!"/f.!X&`7%1j0f
(E!,haVsLarYZ(\().>j$O?n=!W`>r!"K#1!X&]5$k<j_'c%Q$(V^g\(_.>u()@Ss&.JsO"Tnf,!W2rq
!"8l/!X&]5$P!a^'bqLg(CV&o'G:oc$3p_:!W`>r!!E<(!sJr:$P*me)&sY<+!7j4%Ncc6*?,h1&Io-P
"Tnc+pAk0n#Qk27#n%1R&JG'VYnIHW&.]3W#R1D5!<MlorW*?."9o,=$k<g[&J=^L^(UDW$4m^X$jd.B
!s/K(p&P'm#Qk26#RUtM%hS"<`=WFg%h/mQ#6b22!<Mlo$NU80"9f&=%M09g(>p"T(CCol&e>EY#6b22
!VQNm!=&Z.":#2>$4PGofaS/p$OR1F"p>&-!VQNm!=&Z."9o);#n+obisZ/#$4-tC"Tnl+!VQNm!<rT-
"9o);$2k7M%.F]($O-qE#R:M8"9&>p!"&`-!WrQ/#RUtL%fR!M&Gct;%gidV%1<II"U"l-!VHHl!<`H+
"9f#/#He@3#6P/5"9SQ'oDnjk"Tec."U,+1#6Y57"9S`)!V?Bk!<iN,!sJi4WWrY2"U"o/rW2`nrW!9+
!<N?+"U52;#mmaA#mgnD#6b85!W`>n!;up!!X#>'!WrN+rW2Qir;cm"rWDs!Z3:./!!<-#nc8Uh!!<-%
mf^9+rW<-%rW2Qi"T\W*!WrSc"iUWK"9\f.!<M]jqZ5CPcN="Fn,W=dciVl%quQ9eqZ4\<ir],Zn,WFg
rW9_7m0!@irW2EeXo\.qli<g^rW2?cT`Ouio)SUfY6+P$n,W4`WWD,[!!0,$irJcR[/o:fliFj%_uPAh
JcLB&JcOd1JcLB&JcLB&JcLB&JcLB&JcLB&n,Rt~>

%%EndBinary
grestore
np
85.3046 277.072 mo
115.83 277.072 li
.750271 .679713 .654902 .901945 cmyk
gsave
[0 -7.86947e-05 7.87043e-05 0 85.3046 277.072 ]ct
@
grestore newpath
101.921 142.212 mo
101.921 207.362 li
25400 lw
gsave
[7.87043e-05 0 0 7.86947e-05 101.921 140.229 ]ct
@
grestore newpath
101.921 140.229 mo
106.282 147.706 li
106.561 148.182 106.399 148.794 105.923 149.072 cv
105.446 149.35 104.834 149.189 104.556 148.713 cv
101.921 144.196 li
99.2856 148.713 li
99.0075 149.189 98.3954 149.35 97.9186 149.072 cv
97.4418 148.794 97.2807 148.182 97.5589 147.706 cv
cp
ef
101.921 209.346 mo
97.5589 201.869 li
97.2807 201.392 97.4418 200.78 97.9186 200.502 cv
98.3954 200.224 99.0075 200.385 99.2856 200.862 cv
101.921 205.379 li
104.556 200.862 li
104.834 200.385 105.446 200.224 105.923 200.502 cv
106.399 200.78 106.561 201.392 106.282 201.869 cv
cp
ef
101.531 210.091 mo
101.531 275.241 li
gsave
[7.87043e-05 0 0 7.86947e-05 101.531 208.108 ]ct
@
grestore newpath
101.531 208.108 mo
105.893 215.584 li
106.171 216.061 106.01 216.673 105.533 216.951 cv
105.057 217.229 104.445 217.068 104.166 216.592 cv
101.531 212.075 li
98.8963 216.592 li
98.6182 217.068 98.0062 217.229 97.5293 216.951 cv
97.0525 216.673 96.8914 216.061 97.1696 215.584 cv
cp
ef
101.531 277.224 mo
97.1696 269.748 li
96.8914 269.271 97.0525 268.659 97.5293 268.381 cv
98.0062 268.103 98.6182 268.264 98.8963 268.741 cv
101.531 273.258 li
104.166 268.741 li
104.445 268.264 105.057 268.103 105.533 268.381 cv
106.01 268.659 106.171 269.271 105.893 269.748 cv
cp
ef
ZHYQFL+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
51.2055 176.246 mo
(!)sh
%ADOBeginSubsetFont: MAAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQFI+TimesNewRomanPS-ItalicMT gcheck setglobal} if
1 1046 4 <00010054ffe802630481001e0106b90005ffde40710f390f400f39a405ef
02fb0e03551b8a00f60103241d3a005b0e030f201d20027f20ef20021e00
0e0f0104050707001d1c1e1b011a1c1d1e18051904010800161a19190404
039300a0020106130b0007071f161914161619161f2819161002490f031f
0302ff0301036c2000af070f8a0eba010100070203400c121640363934c0
16d0160216b8013b400a1f091617161f0a774c182b2b103c2b2b10f65d2b
435c58400f164028143f16401c113f16401e123f2b2b2b5901fdf6ed10e4
10f45d71e42b103c2b10c0870e2e2b057d10c400183f3f3ce4fd3c103c10
3c011112173900111239113939870e7d10c4053c3c0110c910c93130015d
715d5d5d2b2b010333072303061514163332373637170607062322263534
3713233736363702144e9d119cac1c100b19291853215c5238392c3820a7
970a6e925a0481fef03ffdb25f1c111223146719863726372b366f024327
1e779300>ZHYQFI+TimesNewRomanPS-ItalicMT AddT42Char 
ZHYQFI+TimesNewRomanPS-ItalicMT /CharStrings get begin
/t 4 def
end
ZHYQFI+TimesNewRomanPS-ItalicMT /Encoding get
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQFI+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 73{/.notdef}rp /j 3{/.notdef}rp /n 5{/.notdef}rp /t 
3{/.notdef}rp /x 135{/.notdef}rp]
ZHYQFI+TimesNewRomanPS-ItalicMT nf
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
62.7755 176.246 mo
(t)sh
67.7742 176.246 mo
( )sh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
72.2721 176.246 mo
(/ 2)
[4.99812 4.49796 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
90.7647 176.246 mo
(\000\001)sh
ZHYQFL+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
50.8163 242.946 mo
(!)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
62.3862 242.946 mo
(t)sh
67.3849 242.946 mo
( )sh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
71.8829 242.946 mo
(/ 2)
[4.99812 4.49796 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
90.3754 242.946 mo
(\000\001)sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
106.984 41.9542 mo
(j )
[4.99812 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
116.481 41.9542 mo
(- 3/2)
[5.99114 4.49796 8.99591 4.99812 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
149.961 41.9542 mo
(\000\001)sh
310.869 453.249 mo
310.869 523.656 li
[76200 25400 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 310.869 453.249 ]ct
@
grestore newpath
235.721 458.853 mo
235.721 529.26 li
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 235.721 458.853 ]ct
@
grestore newpath
306.441 459.016 mo
236.026 459.016 li
gsave
[0 7.86947e-05 -7.87043e-05 0 306.441 459.016 ]ct
@
grestore newpath
311.145 526.099 mo
240.729 526.099 li
gsave
[0 7.86947e-05 -7.87043e-05 0 311.145 526.099 ]ct
@
grestore newpath
%ADOBeginSubsetFont: OAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQFK+TimesNewRomanPSMT gcheck setglobal} if
1 118 2 <00010054fe4a027c058e0013003a40239611a71102860c8911020a980911
009801130100000a09a80e22500601068014545e182b10f65dedfd3c3c10
3c003fed3fed3130005d015d01152627260235100037150606021514171e
02027c9765909c0132f67b9e4e211a4a7dfe6f254c6691018ad4013601ff
6e2a44ecfe96c5d6af8aa79a>ZHYQFK+TimesNewRomanPSMT AddT42Char 
1 250 3 <0001002efe4a0256058e00130039402429042a08480503009801110a9809
13000101090aa80e222006300640060306801558a4182b10f65dedfd3c3c
103c003fed3fed3130015d13351617161215100007353636123534272e02
2e98658f9cfecff77b9f4d21194b7c05642a4b6692fe77d5fecafe016e25
45eb016bc5d5b08aa69a>ZHYQFK+TimesNewRomanPSMT AddT42Char 
1 588 5 <0001006efeab019800c800170053402759025917c4160309176019d01903
0901000704040f081200b612400c0b043a0f151f1580150315b8012a400b
1f0f5f0f020f19189ca4182b4e10f45d4dfd5ded003fede4123901111217
393130015d01711335363635342726232207062322263534363332161514
066e67710907070b251214313a4b3642678ffeab2c228f50130d0914093a
333146735f67b100>ZHYQFK+TimesNewRomanPSMT AddT42Char 
ZHYQFK+TimesNewRomanPSMT /CharStrings get begin
/parenleft 2 def
/parenright 3 def
/comma 5 def
end
ZHYQFK+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQFK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma 
/hyphen /.notdef /slash /.notdef /one /two /three 156{/.notdef}rp 
/endash 47{/.notdef}rp]
ZHYQFK+TimesNewRomanPSMT nf
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
98.3074 536.316 mo
(\()sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
104.299 536.316 mo
(j )
[4.99812 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
113.796 536.316 mo
(- 1/2, )
[5.99113 4.49796 8.99591 4.99812 8.99591 4.49794 0 ]xsh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
156.271 536.316 mo
(n )
[8.99591 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
169.765 536.316 mo
(\320 1/)sh
197.253 536.316 mo
(2\))
[8.99591 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
212.241 536.316 mo
(\000\001)sh
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQFG+Calibri gcheck setglobal} if
1 322 1 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>ZHYQFG+Calibri AddT42Char 
1 970 3 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>ZHYQFG+Calibri AddT42Char 
1 606 2 <000300ac00000401050e001e002b003800c8401a1f1810014d1f100f014d
1f100d014d1f180c014d1f200b014d1fb8022e40281a154010014d15400f
014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c200b014d
2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0b30f014d
33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b80210400d
a00bc00b020b1a27f431310724b80109b2105134b8010bb10754003fed3f
ed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b12392f2b2b39
e12b2b2b2b2b313001140e0423212226351134363321321e0215140e0207
1e0301342e0223231133323e0213342e0223231133323e0204011f384f63
7149feae17292917012674946332162b412a355c4528fefd1a385a4ab2c4
435236194e25476b51cefa3b58432601733d67523e2a151f270482271f2c
547a4d2e544738120a35526e02012f4c351cfe5d233b4ffddd3a583c1ffe
381c3752>ZHYQFG+Calibri AddT42Char 
ZHYQFG+Calibri /CharStrings get begin
/g1 1 def
/g3 3 def
/g2 2 def
end
ZHYQFG+Calibri /Encoding get
dup 35 /g1 put
dup 36 /g3 put
dup 37 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQFG+Calibri*1 
[33{/.notdef}rp /g8 /g9 /g1 /g3 /g2 218{/.notdef}rp]
ZHYQFG+Calibri nf
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
318.892 451.651 mo
(#)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
329.302 451.651 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
317.716 537.852 mo
($)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
327.309 537.852 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
219.249 454.003 mo
(%)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
229.035 454.003 mo
(\000\001)sh
412.453 453.45 mo
412.453 523.857 li
[76200 25400 ] 0 dsh
gsave
[-7.87043e-05 0 0 7.86947e-05 412.453 453.45 ]ct
@
grestore newpath
487.602 459.054 mo
487.602 529.461 li
[] 0 dsh
gsave
[-7.87043e-05 0 0 7.86947e-05 487.602 459.054 ]ct
@
grestore newpath
416.881 459.217 mo
487.296 459.217 li
gsave
[0 7.86947e-05 7.87043e-05 0 416.881 459.217 ]ct
@
grestore newpath
412.177 526.3 mo
482.593 526.3 li
gsave
[0 7.86947e-05 7.87043e-05 0 412.177 526.3 ]ct
@
grestore newpath
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQFG+Calibri gcheck setglobal} if
1 1220 4 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>ZHYQFG+Calibri AddT42Char 
1 1928 7 <00020063ff41058705210027003b008e401d0a2112281810014d28100f01
4d28140d014d28120c014d28180b014d28b80232400a00201c301c801c03
1c32b8ffe8b310014d32b8fff0b30f014d32b8ffecb30d014d32b8ffeeb3
0c014d32b8ffe8b30b014d32b80233b412210a0d2db80129b41753250437
b8012bb10d56003fedd4cd3fed123939012fe12b2b2b2b2bd45dc4e12b2b
2b2b2b123939313005140e0223222e0227060623222e0235343e0233321e
0215140e02071e0501342e0223220e0215141e0233323e020587050a0c06
145974843e31966392d58b444a94de948bd38f4813293e2a496e48281408
feac275b987070985f29265a9772719a5e2872171f1106213f5a3c1e2c56
a6f7a09af9af5f56a5f29d519484702d3c43220f132302e06ebc8b4e538d
ba6872bf8c4d548fbd00>ZHYQFG+Calibri AddT42Char 
1 1686 6 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>ZHYQFG+Calibri AddT42Char 
ZHYQFG+Calibri /CharStrings get begin
/g4 4 def
/g7 7 def
/g6 6 def
end
ZHYQFG+Calibri /Encoding get
dup 38 /g4 put
dup 39 /g7 put
dup 40 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQFG+Calibri*1 
[33{/.notdef}rp /g8 /g9 /g1 /g3 /g2 /g4 /g7 
/g6 215{/.notdef}rp]
ZHYQFG+Calibri nf
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
393.21 451.886 mo
(#)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
403.621 451.886 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
395.562 538.087 mo
($)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
405.155 538.087 mo
(\000\001)sh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
515.263 537.726 mo
(\()sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
521.255 537.726 mo
(j )
[4.99811 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
530.751 537.726 mo
(- 1/2, )
[5.99115 4.49792 8.99591 4.99817 8.99591 4.49792 0 ]xsh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
573.227 537.726 mo
(n )
[8.99591 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
586.721 537.726 mo
(\320 1/)sh
614.209 537.726 mo
(2\))
[8.99591 0 ]xsh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
629.197 537.726 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
493.399 452.12 mo
(&)sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
504.468 452.12 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
496.43 539.368 mo
(')sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
508.536 539.368 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
217.998 538.087 mo
(\()sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
227.292 538.087 mo
(\000\001)sh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
342.223 450.901 mo
(\()sh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
348.214 450.901 mo
(j)sh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
353.213 450.901 mo
(, )
[4.49796 0 ]xsh
ZHYQFI+TimesNewRomanPS-ItalicMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
362.209 450.901 mo
(n )
[8.99591 0 ]xsh
ZHYQFK+TimesNewRomanPSMT*1 [17.9918 0 0 -17.9896 0 0 ]msf
375.703 450.901 mo
(\))sh
ZHYQFH+PMingLiU [17.9918 0 0 -17.9896 0 0 ]msf
381.694 450.901 mo
(\000\001)sh
355.565 145.39 mo
355.565 144.529 356.263 143.831 357.124 143.831 cv
363.361 143.831 li
364.222 143.831 364.92 144.529 364.92 145.39 cv
364.92 271.753 li
364.92 272.614 364.222 273.312 363.361 273.312 cv
357.124 273.312 li
356.263 273.312 355.565 272.614 355.565 271.753 cv
cp
0 .991913 1 0 cmyk
28575 lw
[228600 85725 ] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 355.565 143.831 ]ct
@
grestore newpath
290.344 214.354 mo
289.392 214.354 288.619 213.582 288.619 212.63 cv
288.619 205.731 li
288.619 204.779 289.392 204.007 290.344 204.007 cv
430.153 204.007 li
431.105 204.007 431.878 204.779 431.878 205.731 cv
431.878 212.63 li
431.878 213.582 431.105 214.354 430.153 214.354 cv
cp
gsave
[0 -7.86947e-05 7.87043e-05 0 288.619 214.354 ]ct
@
grestore newpath
307.662 519.524 mo
313.862 519.524 li
314.718 519.524 315.412 518.831 315.412 517.975 cv
315.412 453.676 li
306.112 453.676 li
306.112 517.975 li
306.112 518.831 306.806 519.524 307.662 519.524 cv
cp
gsave
[7.87043e-05 0 0 -7.86947e-05 306.112 519.524 ]ct
@
grestore newpath
311.145 462.072 mo
311.145 456.073 li
311.145 455.244 310.473 454.573 309.645 454.573 cv
243.025 454.573 li
243.025 463.572 li
309.645 463.572 li
310.473 463.572 311.145 462.901 311.145 462.072 cv
cp
gsave
[0 -7.86947e-05 -7.87043e-05 0 311.145 463.572 ]ct
@
grestore newpath
305.705 458.233 mo
305.705 454.921 308.139 452.237 311.141 452.237 cv
314.144 452.237 316.578 454.921 316.578 458.233 cv
316.578 461.545 314.144 464.23 311.141 464.23 cv
308.139 464.23 305.705 461.545 305.705 458.233 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
305.705 458.233 mo
305.705 454.921 308.139 452.237 311.141 452.237 cv
314.144 452.237 316.578 454.921 316.578 458.233 cv
316.578 461.545 314.144 464.23 311.141 464.23 cv
308.139 464.23 305.705 461.545 305.705 458.233 cv
cp
.686061 .353338 .0289006 0 cmyk
9525 lw
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 305.705 452.237 ]ct
@
grestore newpath
355.565 208.62 mo
355.565 205.364 357.659 202.724 360.242 202.724 cv
362.826 202.724 364.92 205.364 364.92 208.62 cv
364.92 211.877 362.826 214.516 360.242 214.516 cv
357.659 214.516 355.565 211.877 355.565 208.62 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
355.565 208.62 mo
355.565 205.364 357.659 202.724 360.242 202.724 cv
362.826 202.724 364.92 205.364 364.92 208.62 cv
364.92 211.877 362.826 214.516 360.242 214.516 cv
357.659 214.516 355.565 211.877 355.565 208.62 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.87043e-05 0 0 7.86947e-05 355.565 202.724 ]ct
@
grestore newpath
305.006 528.959 mo
305.006 522.655 li
305.006 521.785 304.3 521.079 303.43 521.079 cv
235.721 521.079 li
235.721 530.535 li
303.43 530.535 li
304.3 530.535 305.006 529.83 305.006 528.959 cv
cp
.921111 .178012 1 .0749218 cmyk
28575 lw
[228600 85725 ] 0 dsh
gsave
[0 -7.86947e-05 -7.87043e-05 0 305.006 530.535 ]ct
@
grestore newpath
232.363 529.421 mo
238.874 529.421 li
239.773 529.421 240.502 528.692 240.502 527.793 cv
240.502 463.572 li
230.735 463.572 li
230.735 527.793 li
230.735 528.692 231.464 529.421 232.363 529.421 cv
cp
gsave
[7.87043e-05 0 0 -7.86947e-05 230.735 529.421 ]ct
@
grestore newpath
231.284 526.617 mo
231.284 523.361 233.378 520.721 235.961 520.721 cv
238.545 520.721 240.639 523.361 240.639 526.617 cv
240.639 529.874 238.545 532.514 235.961 532.514 cv
233.378 532.514 231.284 529.874 231.284 526.617 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
231.284 526.617 mo
231.284 523.361 233.378 520.721 235.961 520.721 cv
238.545 520.721 240.639 523.361 240.639 526.617 cv
240.639 529.874 238.545 532.513 235.961 532.513 cv
233.378 532.513 231.284 529.874 231.284 526.617 cv
cp
.686061 .353338 .0289006 0 cmyk
9525 lw
[] 0 dsh
gsave
[7.87043e-05 0 0 7.86947e-05 231.284 520.721 ]ct
@
grestore newpath
409.406 519.636 mo
415.386 519.636 li
416.212 519.636 416.881 518.967 416.881 518.141 cv
416.881 453.788 li
407.91 453.788 li
407.91 518.141 li
407.91 518.967 408.58 519.636 409.406 519.636 cv
cp
0 .991913 1 0 cmyk
28575 lw
[228600 85725 ] 0 dsh
gsave
[7.87043e-05 0 0 -7.86947e-05 407.91 519.636 ]ct
@
grestore newpath
480.448 462.639 mo
480.448 456.276 li
480.448 455.397 479.736 454.685 478.857 454.685 cv
412.453 454.685 li
412.453 464.23 li
478.857 464.23 li
479.736 464.23 480.448 463.518 480.448 462.639 cv
cp
gsave
[0 -7.86947e-05 -7.87043e-05 0 480.448 464.23 ]ct
@
grestore newpath
417.265 458.334 mo
417.265 455.077 414.728 452.438 411.599 452.438 cv
408.47 452.438 405.933 455.077 405.933 458.334 cv
405.933 461.59 408.47 464.23 411.599 464.23 cv
414.728 464.23 417.265 461.59 417.265 458.334 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
417.265 458.334 mo
417.265 455.077 414.728 452.438 411.599 452.438 cv
408.47 452.438 405.933 455.077 405.933 458.334 cv
405.933 461.59 408.47 464.23 411.599 464.23 cv
414.728 464.23 417.265 461.59 417.265 458.334 cv
cp
.686061 .353338 .0289006 0 cmyk
9525 lw
[] 0 dsh
gsave
[-7.87043e-05 0 0 7.86947e-05 417.265 452.438 ]ct
@
grestore newpath
484.173 529.26 mo
490.684 529.26 li
491.583 529.26 492.311 528.532 492.311 527.633 cv
492.311 466.866 li
482.545 466.866 li
482.545 527.633 li
482.545 528.532 483.274 529.26 484.173 529.26 cv
cp
.639063 1 .202548 .114961 cmyk
28575 lw
[228600 85725 ] 0 dsh
gsave
[7.87043e-05 0 0 -7.86947e-05 482.545 529.26 ]ct
@
grestore newpath
488.263 528.617 mo
488.263 523.248 li
488.263 522.506 487.662 521.905 486.92 521.905 cv
418.978 521.905 li
418.978 529.959 li
486.92 529.959 li
487.662 529.959 488.263 529.358 488.263 528.617 cv
cp
gsave
[0 -7.86947e-05 -7.87043e-05 0 488.263 529.959 ]ct
@
grestore newpath
493.436 526.818 mo
493.436 523.562 490.842 520.922 487.641 520.922 cv
484.44 520.922 481.846 523.562 481.846 526.818 cv
481.846 530.075 484.44 532.714 487.641 532.714 cv
490.842 532.714 493.436 530.075 493.436 526.818 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
493.436 526.818 mo
493.436 523.562 490.842 520.922 487.641 520.922 cv
484.44 520.922 481.846 523.562 481.846 526.818 cv
481.846 530.075 484.44 532.714 487.641 532.714 cv
490.842 532.714 493.436 530.075 493.436 526.818 cv
cp
.686061 .353338 .0289006 0 cmyk
9525 lw
[] 0 dsh
gsave
[-7.87043e-05 0 0 7.86947e-05 493.436 520.922 ]ct
@
grestore newpath
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQFG+Calibri gcheck setglobal} if
1 1438 5 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>ZHYQFG+Calibri AddT42Char 
1 2774 10 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>ZHYQFG+Calibri AddT42Char 
1 2844 11 <00010046006c03b60416002f0014b22a241eb8010cb20c0612002f33cdfd
cd33313001140e02232111140e0223222e02351121222e0235343e023321
11343e0233321e02151121321e0203b6060a0e08feb808111c15141d1108
feb8090d0a06060a0d08014908111d14151c11080149080d0b050240131b
1208fe94080b080505080b08016c08121b13121b1208016c080d09050509
0d08fe9408121b00>ZHYQFG+Calibri AddT42Char 
ZHYQFG+Calibri /CharStrings get begin
/g5 5 def
/g10 10 def
/g11 11 def
end
ZHYQFG+Calibri /Encoding get
dup 41 /g5 put
dup 42 /g10 put
dup 43 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQFG+Calibri*1 
[33{/.notdef}rp /g8 /g9 /g1 /g3 /g2 /g4 /g7 
/g6 /g5 /g10 /g11 212{/.notdef}rp]
ZHYQFG+Calibri nf
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
265.167 497.52 mo
($\))
[9.59329 0 ]xsh
ZHYQFG+Calibri*1 [11.9945 0 0 -11.9931 0 0 ]msf
283.546 502.017 mo
(*)sh
ZHYQFH+PMingLiU [11.9945 0 0 -11.9931 0 0 ]msf
287.218 502.017 mo
(\000\001)sh
ZHYQFG+Calibri*1 [17.9918 0 0 -17.9896 0 0 ]msf
440.722 496.933 mo
($\))
[9.59329 0 ]xsh
ZHYQFG+Calibri*1 [11.9945 0 0 -11.9931 0 0 ]msf
459.1 501.43 mo
(+)sh
ZHYQFH+PMingLiU [11.9945 0 0 -11.9931 0 0 ]msf
465.074 501.43 mo
(\000\001)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ZHYQFG+Calibri*1 uf
/ZHYQFG+Calibri uf
/KAAAAA+Calibri uf
/ZHYQFJ+PMingLiU-Identity-H uf
/ZHYQFJ+PMingLiU /CIDFont ur
/ZHYQFK+TimesNewRomanPSMT*1 uf
/ZHYQFK+TimesNewRomanPSMT uf
/OAAAAA+TimesNewRomanPSMT uf
/ZHYQFL+TimesNewRomanPSMT*1 uf
/ZHYQFL+TimesNewRomanPSMT uf
/PAAAAA+TimesNewRomanPSMT uf
/ZHYQFH+PMingLiU-Identity-H uf
/ZHYQFH+PMingLiU /CIDFont ur
/ZHYQFI+TimesNewRomanPS-ItalicMT*1 uf
/ZHYQFI+TimesNewRomanPS-ItalicMT uf
/MAAAAA+TimesNewRomanPS-ItalicMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial -23 3671 a Ff(Figure)27 b(1:)36 b(The)28
b(mesh,)g(conserv)-5 b(ation)26 b(elemen)n(ts)h(and)h(solution)f
(elemen)n(ts.)37 b(The)27 b(cross)f(-shap)r(ed)i(region)e(formed)h
(with)862 3771 y(red)g(dash)h(line)f(is)h(one)f(of)h(the)g(solution)f
(elemen)n(t)h(in)f(the)h(mesh.)269 4062 y Fp(Eq.\(2.6\))33
b Fo(u)703 4026 y Fl(\003)742 4062 y Fp(\()p Fo(x;)17
b(t)p Fp(;)g Fo(j;)g(n)p Fp(\))28 b(=)f Fo(u)1325 4026
y Fi(n)1325 4087 y(j)1394 4062 y Fp(+)22 b(\()p Fo(u)1586
4077 y Fi(x)1629 4062 y Fp(\))1667 4026 y Fi(n)1667 4087
y(j)1714 4062 y Fp([\()p Fo(x)h Fk(\000)f Fo(x)2011 4077
y Fi(j)2048 4062 y Fp(\))g Fk(\000)h Fo(a)p Fp(\()p Fo(t)g
Fk(\000)f Fo(t)2489 4026 y Fi(n)2536 4062 y Fp(\)])p
Fo(;)17 b Fp(\()p Fo(x;)g(t)p Fp(\))28 b Fk(2)g Fo(S)6
b(E)g Fp(\()p Fo(j;)17 b(n)p Fp(\))269 4260 y(Eq.\(2.9\))643
4259 y Fo(~)647 4260 y Fq(g)705 4224 y Fl(\003)771 4260
y Fk(\021)29 b Fp(\()p Fk(\000)p Fo(u)1048 4224 y Fl(\003)1087
4260 y Fo(;)17 b(au)1238 4224 y Fl(\003)1299 4260 y Fk(\000)23
b Fo(\026@)5 b(u)1570 4224 y Fl(\003)1609 4260 y Fo(=@)g(x)p
Fp(\))p Fo(;)17 b(d)p Fq(r)28 b Fk(\021)g Fp(\()p Fo(dx;)17
b(dt)p Fp(\))269 4458 y Fo(F)332 4473 y Fl(\006)391 4458
y Fp(\()p Fo(j;)g(n)p Fp(\))28 b(=)740 4378 y Fe(H)807
4404 y Fi(c:c:)787 4492 y(S)t Fj(\()p Fi(C)5 b(E)968
4501 y Fd(\006)1020 4492 y Fj(\()p Fi(j;n)p Fj(\)\))1211
4457 y Fo(~)1214 4458 y Fq(g)1272 4422 y Fl(\003)1334
4458 y Fk(\001)21 b Fo(d)p Fq(r)269 4656 y Fp(F)-8 b(or)31
b(CE)579 4671 y Fl(\000)639 4656 y Fp(\()p Fo(AB)5 b(P)14
b(C)7 b Fp(\))32 b(sho)m(wn)i(in)f(Figure)1771 4656 y
SDict begin H.S end

1771 4656 a Fp(1)1819 4591 y
SDict begin H.R end
 1819 4591 a 1819 4656 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (figure.caption.2) cvn H.B /ANN pdfmark end

1819 4656 a Fp(:)363 4773 y Fe(R)430 4799 y Fi(B)410
4888 y(A)490 4853 y Fk(f\000)p Fo(u)673 4817 y Fi(n)673
4878 y(j)742 4853 y Fk(\000)23 b Fp(\()p Fo(u)936 4868
y Fi(x)979 4853 y Fp(\))1017 4817 y Fi(n)1017 4878 y(j)1064
4853 y Fp([\()p Fo(x)g Fk(\000)f Fo(x)1361 4868 y Fi(j)1398
4853 y Fp(\))g Fk(\000)h Fo(a)p Fp(\()p Fo(t)f Fk(\000)h
Fo(t)1839 4817 y Fi(n)1886 4853 y Fp(\)])p Fk(g)p Fo(dx)552
5051 y Fp(=)28 b Fk(\000)p Fo(u)789 5015 y Fi(n)789 5076
y(j)836 5051 y Fo(x)p Fk(j)919 5015 y Fi(B)919 5076 y(A)1002
5051 y Fk(\000)1101 4971 y Fe(R)1168 4997 y Fi(B)1148
5086 y(A)1228 5051 y Fp(\()p Fo(u)1322 5066 y Fi(x)1366
5051 y Fp(\))1404 5015 y Fi(n)1404 5076 y(j)1450 5051
y Fp(\()p Fo(x)23 b Fk(\000)g Fo(x)1721 5066 y Fi(j)1758
5051 y Fp(\)\()p Fo(t)f Fk(\000)g Fo(t)2025 5015 y Fi(n)2073
5051 y Fp(\))p Fo(d)p Fp(\()p Fo(x)g Fk(\000)g Fo(x)2431
5066 y Fi(j)2468 5051 y Fp(\))g(+)g Fo(a)p Fp(\()p Fo(u)2771
5066 y Fi(x)2815 5051 y Fp(\))2853 5015 y Fi(n)2853 5076
y(j)2900 5051 y Fp(\()p Fo(t)g Fk(\000)h Fo(t)3130 5015
y Fi(n)3177 5051 y Fp(\))p Fo(x)p Fk(j)3298 5015 y Fi(B)3298
5076 y(A)552 5249 y Fp(=)666 5209 y Fj(\001)p Fi(x)p
666 5226 99 4 v 697 5283 a Fj(2)774 5249 y Fo(u)830 5212
y Fi(n)830 5273 y(j)899 5249 y Fk(\000)1008 5201 y Fj(\(\001)p
Fi(x)p Fj(\))1161 5178 y Fg(2)p 1008 5226 189 4 v 1085
5283 a Fj(8)1206 5249 y Fp(\()p Fo(u)1300 5264 y Fi(x)1344
5249 y Fp(\))1382 5212 y Fi(n)1382 5273 y(j)363 5366
y Fe(R)430 5392 y Fi(P)410 5481 y(B)488 5446 y Fk(f)p
Fo(au)645 5395 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)645
5478 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)875 5446 y
Fp(+)f Fo(a)p Fp(\()p Fo(u)1118 5461 y Fi(x)1161 5446
y Fp(\))1199 5395 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)1199
5478 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)1407 5446
y Fp([\()p Fo(x)g Fk(\000)h Fo(x)1704 5462 y Fi(j)t Fl(\000)p
Fj(1)p Fi(=)p Fj(2)1902 5446 y Fp(\))f Fk(\000)g Fo(a)p
Fp(\()p Fo(t)h Fk(\000)g Fo(t)2343 5410 y Fi(n)p Fl(\000)p
Fj(1)p Fi(=)p Fj(2)2551 5446 y Fp(\)])f Fk(\000)g Fo(\026)p
Fp(\()p Fo(u)2890 5461 y Fi(x)2933 5446 y Fp(\))2971
5395 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)2971 5478
y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)3179 5446 y Fk(g)p
Fo(dt)1856 5695 y Fp(4)p eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -78 -269 a 552 149
a Fp(=)28 b Fk(\000)p Fo(a)794 110 y Fj(\001)p Fi(t)p
794 126 85 4 v 819 184 a Fj(2)889 149 y Fo(u)945 98 y
Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)945 181 y Fi(j)t
Fl(\000)p Fj(1)p Fi(=)p Fj(2)1174 149 y Fp(+)22 b Fo(a)1323
113 y Fj(2)1373 102 y(\(\001)p Fi(t)p Fj(\))1511 78 y
Fg(2)p 1373 126 174 4 v 1442 184 a Fj(8)1556 149 y Fp(\()p
Fo(u)1650 164 y Fi(x)1694 149 y Fp(\))1732 98 y Fi(n)p
Fl(\000)p Fj(1)p Fi(=)p Fj(2)1732 181 y Fi(j)t Fl(\000)p
Fj(1)p Fi(=)p Fj(2)1961 149 y Fp(+)g Fo(\026)p Fp(\()p
Fo(u)2212 164 y Fi(x)2255 149 y Fp(\))2293 98 y Fi(n)p
Fl(\000)p Fj(1)p Fi(=)p Fj(2)2293 181 y Fi(j)t Fl(\000)p
Fj(1)p Fi(=)p Fj(2)363 267 y Fe(R)430 293 y Fi(C)410
382 y(P)489 347 y Fk(f\000)p Fo(u)672 296 y Fi(n)p Fl(\000)p
Fj(1)p Fi(=)p Fj(2)672 378 y Fi(j)t Fl(\000)p Fj(1)p
Fi(=)p Fj(2)901 347 y Fk(\000)h Fp(\()p Fo(u)1095 362
y Fi(x)1138 347 y Fp(\))1176 296 y Fi(n)p Fl(\000)p Fj(1)p
Fi(=)p Fj(2)1176 378 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p
Fj(2)1384 347 y Fp([\()p Fo(x)g Fk(\000)f Fo(x)1681 363
y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)1879 347 y Fp(\))g
Fk(\000)h Fo(a)p Fp(\()p Fo(t)f Fk(\000)h Fo(t)2320 311
y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)2528 347 y Fp(\)])p
Fk(g)p Fo(dx)552 545 y Fp(=)28 b Fk(\000)743 506 y Fj(\001)p
Fi(x)p 743 522 99 4 v 775 579 a Fj(2)852 545 y Fo(u)908
494 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)908 576 y Fi(j)t
Fl(\000)p Fj(1)p Fi(=)p Fj(2)1137 545 y Fk(\000)1247
497 y Fj(\(\001)p Fi(x)p Fj(\))1400 474 y Fg(2)p 1247
522 189 4 v 1323 579 a Fj(8)1445 545 y Fp(\()p Fo(u)1539
560 y Fi(x)1582 545 y Fp(\))1620 494 y Fi(n)p Fl(\000)p
Fj(1)p Fi(=)p Fj(2)1620 576 y Fi(j)t Fl(\000)p Fj(1)p
Fi(=)p Fj(2)363 662 y Fe(R)430 688 y Fi(A)410 777 y(C)487
742 y Fk(f)p Fo(au)644 706 y Fi(n)644 767 y(j)712 742
y Fp(+)22 b Fo(a)p Fp(\()p Fo(u)955 757 y Fi(x)999 742
y Fp(\))1037 706 y Fi(n)1037 767 y(j)1084 742 y Fp([\()p
Fo(x)g Fk(\000)h Fo(x)1381 757 y Fi(j)1418 742 y Fp(\))f
Fk(\000)h Fo(a)p Fp(\()p Fo(t)f Fk(\000)h Fo(t)1859 706
y Fi(n)1906 742 y Fp(\)])f Fk(\000)h Fo(\026)p Fp(\()p
Fo(u)2246 757 y Fi(x)2289 742 y Fp(\))2327 706 y Fi(n)2327
767 y(j)2374 742 y Fk(g)552 940 y Fp(=)28 b Fo(a)717
901 y Fj(\001)p Fi(t)p 717 917 85 4 v 741 975 a Fj(2)811
940 y Fo(u)867 904 y Fi(n)867 965 y(j)936 940 y Fp(+)22
b Fo(a)1085 904 y Fj(2)1134 893 y(\(\001)p Fi(t)p Fj(\))1272
869 y Fg(2)p 1134 917 174 4 v 1204 975 a Fj(8)1318 940
y Fp(\()p Fo(u)1412 955 y Fi(x)1455 940 y Fp(\))1493
904 y Fi(n)1493 965 y(j)1562 940 y Fk(\000)h Fo(\026)1731
901 y Fj(\001)p Fi(t)p 1731 917 85 4 v 1755 975 a Fj(2)1825
940 y Fp(\()p Fo(u)1919 955 y Fi(x)1962 940 y Fp(\))2000
904 y Fi(n)2000 965 y(j)269 1153 y Fl(\001)292 1102 y(\001)316
1153 y(\001)372 1138 y Fo(F)435 1153 y Fl(\000)495 1138
y Fp(\()p Fo(j;)17 b(n)p Fp(\))363 1336 y(=)28 b(\()p
Fk(\000)592 1288 y Fj(\(\001)p Fi(x)p Fj(\))745 1265
y Fg(2)p 592 1313 189 4 v 668 1370 a Fj(8)801 1336 y
Fp(+)11 b Fo(a)939 1299 y Fj(2)989 1288 y(\(\001)p Fi(t)p
Fj(\))1127 1265 y Fg(2)p 989 1313 174 4 v 1058 1370 a
Fj(8)1184 1336 y Fk(\000)g Fo(\026)1341 1296 y Fj(\001)p
Fi(t)p 1341 1313 85 4 v 1366 1370 a Fj(2)1435 1336 y
Fp(\)\()p Fo(u)1567 1351 y Fi(x)1611 1336 y Fp(\))1649
1299 y Fi(n)1649 1360 y(j)1707 1336 y Fp(+)g(\()p Fk(\000)1919
1288 y Fj(\(\001)p Fi(x)p Fj(\))2072 1265 y Fg(2)p 1919
1313 189 4 v 1995 1370 a Fj(8)2128 1336 y Fp(+)g Fo(a)2266
1299 y Fj(2)2316 1288 y(\(\001)p Fi(t)p Fj(\))2454 1265
y Fg(2)p 2316 1313 174 4 v 2385 1370 a Fj(8)2511 1336
y Fp(+)g Fo(\026)2667 1296 y Fj(\001)p Fi(t)p 2667 1313
85 4 v 2691 1370 a Fj(2)2761 1336 y Fp(\)\()p Fo(u)2893
1351 y Fi(x)2936 1336 y Fp(\))2974 1285 y Fi(n)p Fl(\000)p
Fj(1)p Fi(=)p Fj(2)2974 1367 y Fi(j)t Fl(\000)p Fj(1)p
Fi(=)p Fj(2)3193 1336 y Fp(+)g(\()3328 1296 y Fj(\001)p
Fi(x)p 3328 1313 99 4 v 3359 1370 a Fj(2)3447 1336 y
Fp(+)g Fo(a)3595 1296 y Fj(\001)p Fi(t)p 3595 1313 85
4 v 3620 1370 a Fj(2)3690 1336 y Fp(\))p Fo(u)3784 1299
y Fi(n)3784 1360 y(j)458 1533 y Fp(+\()p Fk(\000)659
1494 y Fj(\001)p Fi(x)p 659 1510 99 4 v 691 1568 a Fj(2)790
1533 y Fk(\000)22 b Fo(a)950 1494 y Fj(\001)p Fi(t)p
950 1510 85 4 v 975 1568 a Fj(2)1045 1533 y Fp(\))p Fo(u)1139
1482 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)1139 1565
y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)363 1731 y Fp(=)28
b(\()p Fk(\000)592 1692 y Fj(1)p 592 1708 36 4 v 592
1765 a(2)637 1731 y Fp(\)\()723 1684 y Fj(\(\001)p Fi(x)p
Fj(\))876 1660 y Fg(2)p 723 1708 189 4 v 800 1765 a Fj(4)921
1731 y Fp(\)[\(1)22 b Fk(\000)h Fo(a)1246 1695 y Fj(2)1302
1684 y(\(\001)p Fi(t)p Fj(\))1440 1660 y Fg(2)p 1295
1708 V 1295 1765 a Fj(\(\001)p Fi(x)p Fj(\))1448 1746
y Fg(2)1515 1731 y Fp(+)f(4)p Fo(\026)1783 1692 y Fj(\001)p
Fi(t)p 1731 1708 V 1731 1765 a Fj(\(\001)p Fi(x)p Fj(\))1884
1746 y Fg(2)1929 1731 y Fp(\)\()p Fo(u)2061 1746 y Fi(x)2104
1731 y Fp(\))2142 1695 y Fi(n)2142 1756 y(j)2211 1731
y Fp(+)g(\(1)g Fk(\000)h Fo(a)2569 1695 y Fj(2)2625 1684
y(\(\001)p Fi(t)p Fj(\))2763 1660 y Fg(2)p 2618 1708
V 2618 1765 a Fj(\(\001)p Fi(x)p Fj(\))2771 1746 y Fg(2)2838
1731 y Fk(\000)g Fp(4)p Fo(\026)3107 1692 y Fj(\001)p
Fi(t)p 3056 1708 V 3056 1765 a Fj(\(\001)p Fi(x)p Fj(\))3209
1746 y Fg(2)3253 1731 y Fp(\)\()p Fo(u)3385 1746 y Fi(x)3429
1731 y Fp(\))3467 1680 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p
Fj(2)3467 1762 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)3674
1731 y Fp(])458 1929 y(+)544 1881 y Fj(\(\001)p Fi(x)p
Fj(\))697 1858 y Fg(2)p 543 1906 V 620 1963 a Fj(4)783
1889 y(2)p 751 1906 99 4 v 751 1963 a(\001)p Fi(x)860
1929 y Fp(\(1)f(+)g Fo(a)1135 1889 y Fj(\001)p Fi(t)p
1128 1906 V 1128 1963 a Fj(\001)p Fi(x)1236 1929 y Fp(\)\()p
Fo(u)1368 1893 y Fi(n)1368 1953 y(j)1437 1929 y Fk(\000)h
Fo(u)1593 1878 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)1593
1960 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)1800 1929
y Fp(\))269 2126 y Fk(\))482 2087 y Fj(4)p 406 2104 189
4 v 406 2161 a(\(\001)p Fi(x)p Fj(\))559 2142 y Fg(2)604
2126 y Fo(F)667 2141 y Fl(\000)726 2126 y Fp(\()p Fo(j;)17
b(n)p Fp(\))363 2324 y(=)28 b Fk(\000)p Fp(\()592 2285
y Fj(1)p 592 2301 36 4 v 592 2359 a(2)637 2324 y Fp(\)[\(1)22
b Fk(\000)h Fo(\027)965 2288 y Fj(2)1027 2324 y Fp(+)f
Fo(\030)5 b Fp(\)\()p Fo(u)1305 2339 y Fi(x)1348 2324
y Fp(\))1386 2288 y Fi(n)1386 2349 y(j)1455 2324 y Fp(+)22
b(\(1)g Fk(\000)g Fo(\027)1815 2288 y Fj(2)1877 2324
y Fk(\000)h Fo(\030)5 b Fp(\)\()p Fo(u)2157 2339 y Fi(x)2200
2324 y Fp(\))2238 2273 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p
Fj(2)2238 2356 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)2445
2324 y Fp(])22 b(+)2602 2277 y Fj(2\(1+)p Fi(\027)t Fj(\))p
2602 2301 220 4 v 2663 2359 a(\001)p Fi(x)2832 2324 y
Fp(\()p Fo(u)2926 2288 y Fi(n)2926 2349 y(j)2994 2324
y Fk(\000)h Fo(u)3150 2273 y Fi(n)p Fl(\000)p Fj(1)p
Fi(=)p Fj(2)3150 2356 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p
Fj(2)3357 2324 y Fp(\))458 2522 y(,)32 b(where)i Fo(\027)g
Fk(\021)996 2483 y Fi(a)p Fj(\001)p Fi(t)p 996 2499 122
4 v 1008 2556 a Fj(\001)p Fi(x)1161 2522 y Fp(and)e Fo(\030)g
Fk(\021)1554 2478 y Fj(4)p Fi(\026)p Fj(\001)p Fi(t)p
1541 2499 189 4 v 1541 2556 a Fj(\(\001)p Fi(x)p Fj(\))1694
2537 y Fg(2)1738 2522 y Fp(.)269 2720 y(Similarly)-8
b(,)789 2680 y Fj(4)p 712 2697 V 712 2754 a(\(\001)p
Fi(x)p Fj(\))865 2735 y Fg(2)910 2720 y Fo(F)973 2735
y Fj(+)1032 2720 y Fp(\()p Fo(j;)17 b(n)p Fp(\))363 2917
y(=)28 b(+\()591 2878 y Fj(1)p 591 2894 36 4 v 591 2952
a(2)636 2917 y Fp(\)[\(1)22 b Fk(\000)g Fo(\027)963 2881
y Fj(2)1025 2917 y Fp(+)g Fo(\030)5 b Fp(\)\()p Fo(u)1303
2932 y Fi(x)1346 2917 y Fp(\))1384 2881 y Fi(n)1384 2942
y(j)1453 2917 y Fp(+)22 b(\(1)g Fk(\000)h Fo(\027)1814
2881 y Fj(2)1876 2917 y Fk(\000)f Fo(\030)5 b Fp(\)\()p
Fo(u)2155 2932 y Fi(x)2198 2917 y Fp(\))2236 2866 y Fi(n)p
Fl(\000)p Fj(1)p Fi(=)p Fj(2)2236 2949 y Fi(j)t Fj(+1)p
Fi(=)p Fj(2)2444 2917 y Fp(])22 b(+)2601 2870 y Fj(2\(1)p
Fl(\000)p Fi(\027)t Fj(\))p 2601 2894 220 4 v 2661 2952
a(\001)p Fi(x)2830 2917 y Fp(\()p Fo(u)2924 2881 y Fi(n)2924
2942 y(j)2993 2917 y Fk(\000)g Fo(u)3148 2866 y Fi(n)p
Fl(\000)p Fj(1)p Fi(=)p Fj(2)3148 2949 y Fi(j)t Fj(+1)p
Fi(=)p Fj(2)3356 2917 y Fp(\))458 3115 y(,)32 b(where)i
Fo(\027)g Fk(\021)996 3076 y Fi(a)p Fj(\001)p Fi(t)p
996 3092 122 4 v 1008 3149 a Fj(\001)p Fi(x)1161 3115
y Fp(and)e Fo(\030)g Fk(\021)1554 3071 y Fj(4)p Fi(\026)p
Fj(\001)p Fi(t)p 1541 3092 189 4 v 1541 3149 a Fj(\(\001)p
Fi(x)p Fj(\))1694 3130 y Fg(2)1738 3115 y Fp(.)-70 3207
y
SDict begin H.S end
 -70 3207 a -70 3207 a
SDict begin 18.85004 H.A end
 -70 3207 a -70 3207 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -70 3207
a 50 3354 a Fp(3.)48 b(Deriv)-5 b(ation)32 b(of)h(Eq.\(2.34\))174
3510 y Fo( )t Fp(\()p Fo(x;)17 b(t)p Fp(;)g Fo(j;)g(n)p
Fp(\))28 b(=)g Fk(\000)856 3448 y Fj(\()p Fi(u)924 3456
y Fc(x)963 3448 y Fj(\))990 3425 y Fc(n)990 3470 y(j)p
856 3487 178 4 v 927 3545 a Fj(2)1043 3510 y Fk(f)p Fp([\()p
Fo(x)23 b Fk(\000)f Fo(x)1390 3525 y Fi(j)1427 3510 y
Fp(\))g Fk(\000)h Fo(a)p Fp(\()p Fo(t)g Fk(\000)f Fo(t)1868
3474 y Fi(n)1915 3510 y Fp(\)])1980 3474 y Fj(2)2042
3510 y Fp(+)g(2)p Fo(\026)p Fp(\()p Fo(t)g Fk(\000)g
Fo(t)2477 3474 y Fi(n)2525 3510 y Fp(\))p Fk(g)g(\000)g
Fo(u)2790 3474 y Fi(n)2790 3535 y(j)2837 3510 y Fp([\()p
Fo(x)g Fk(\000)h Fo(x)3134 3525 y Fi(j)3171 3510 y Fp(\))f
Fk(\000)h Fo(a)p Fp(\()p Fo(t)f Fk(\000)h Fo(t)3612 3474
y Fi(n)3659 3510 y Fp(\)]:)269 3708 y(Eq.\(2.6\))33 b
Fo(u)703 3672 y Fl(\003)769 3708 y Fp(=)28 b Fo(u)929
3672 y Fi(n)929 3733 y(j)997 3708 y Fp(+)22 b(\()p Fo(u)1189
3723 y Fi(x)1233 3708 y Fp(\))1271 3672 y Fi(n)1271 3733
y(j)1318 3708 y Fp([\()p Fo(x)g Fk(\000)h Fo(x)1615 3723
y Fi(j)1652 3708 y Fp(\))f Fk(\000)h Fo(a)p Fp(\()p Fo(t)f
Fk(\000)h Fo(tn)p Fp(\)])269 3906 y(Eq.\(2.32\))705 3862
y Fi(@)t( )p 705 3883 90 4 v 717 3940 a(@)t(t)833 3906
y Fp(=)k Fo(au)1043 3870 y Fl(\003)1104 3906 y Fk(\000)c
Fo(\026)1273 3867 y Fi(@)t(u)1355 3843 y Fd(\003)p 1273
3883 118 4 v 1291 3940 a Fi(@)t(x)269 4104 y Fp(Eq.\(2.33\))35
b Fk(\000)785 4060 y Fi(@)t( )p 785 4081 90 4 v 789 4138
a(@)t(x)917 4104 y Fp(=)e Fo(u)1082 4067 y Fl(\003)1156
4104 y Fp(,)j(it)f(should)h(b)s(e)f(noted)h(that)f(the)h(original)f
(Eq.\(2.33\))g(listed)i(in)e(pap)s(er)174 4260 y(is)e(wrong.)269
4458 y(By)g(substituting)h(Eq.\(2.6\))f(in)m(to)g(Eq.\(2.32\),)f(w)m(e)
i(can)f(ha)m(v)m(e:)363 4655 y Fo( )f Fp(=)27 b Fo(au)668
4619 y Fi(n)668 4680 y(j)715 4655 y Fp(\()p Fo(t)17 b
Fk(\000)h Fo(t)935 4619 y Fi(n)982 4655 y Fp(\))f(+)g
Fo(a)p Fp(\()p Fo(u)1275 4670 y Fi(x)1319 4655 y Fp(\))1357
4619 y Fi(n)1357 4680 y(j)1404 4655 y Fp(\()p Fo(x)g
Fk(\000)h Fo(x)1664 4670 y Fi(j)1701 4655 y Fp(\)\()p
Fo(t)f Fk(\000)h Fo(t)1959 4619 y Fi(n)2006 4655 y Fp(\))f
Fk(\000)2165 4616 y Fi(a)2202 4593 y Fg(2)p 2165 4633
73 4 v 2184 4690 a Fj(2)2247 4655 y Fp(\()p Fo(u)2341
4670 y Fi(x)2385 4655 y Fp(\))2423 4619 y Fi(n)2423 4680
y(j)2470 4655 y Fp(\()p Fo(t)g Fk(\000)h Fo(t)2690 4619
y Fi(n)2737 4655 y Fp(\))2775 4619 y Fj(2)2831 4655 y
Fk(\000)g Fo(\026)p Fp(\()p Fo(u)3079 4670 y Fi(x)3122
4655 y Fp(\))3160 4619 y Fi(n)3160 4680 y(j)3207 4655
y Fp(\()p Fo(t)f Fk(\000)h Fo(t)3427 4619 y Fi(n)3474
4655 y Fp(\))f(+)g Fo(C)7 b Fp(\()p Fo(x)p Fp(\))269
4853 y(W)-8 b(e)33 b(then)g(substitute)h(the)f(ab)s(o)m(v)m(e)h(result)
f(in)m(to)g(Eq.\(2.33\):)363 5051 y Fk(\000)p Fo(a)p
Fp(\()p Fo(u)585 5066 y Fi(x)629 5051 y Fp(\))667 5015
y Fi(n)667 5076 y(j)714 5051 y Fp(\()p Fo(t)22 b Fk(\000)h
Fo(t)944 5015 y Fi(n)991 5051 y Fp(\))f Fk(\000)h Fo(C)1228
5015 y Fl(0)1251 5051 y Fp(\()p Fo(x)p Fp(\))28 b(=)g
Fo(u)1570 5015 y Fi(n)1570 5076 y(j)1638 5051 y Fp(+)22
b(\()p Fo(u)1830 5066 y Fi(x)1874 5051 y Fp(\))1912 5015
y Fi(n)1912 5076 y(j)1959 5051 y Fp([\()p Fo(x)g Fk(\000)h
Fo(x)2256 5066 y Fi(j)2293 5051 y Fp(\))f Fk(\000)g Fo(a)p
Fp(\()p Fo(t)h Fk(\000)g Fo(t)2734 5015 y Fi(n)2781 5051
y Fp(\)])363 5249 y Fk(\))k Fo(C)567 5212 y Fl(0)591
5249 y Fp(\()p Fo(x)p Fp(\))h(=)f Fk(\000)p Fo(u)986
5212 y Fi(n)986 5273 y(j)1055 5249 y Fk(\000)c Fp(\()p
Fo(u)1249 5264 y Fi(x)1292 5249 y Fp(\))1330 5212 y Fi(n)1330
5273 y(j)1377 5249 y Fp(\()p Fo(x)g Fk(\000)f Fo(x)1647
5264 y Fi(j)1684 5249 y Fp(\))363 5446 y Fk(\))27 b Fo(C)7
b Fp(\()p Fo(x)p Fp(\))28 b(=)g Fk(\000)p Fo(u)963 5410
y Fi(n)963 5471 y(j)1010 5446 y Fp(\()p Fo(x)22 b Fk(\000)h
Fo(x)1280 5461 y Fi(j)1317 5446 y Fp(\))f Fk(\000)1487
5384 y Fj(\()p Fi(u)1555 5392 y Fc(x)1594 5384 y Fj(\))1621
5361 y Fc(n)1621 5406 y(j)p 1487 5423 178 4 v 1558 5481
a Fj(2)1674 5446 y Fp(\()p Fo(x)g Fk(\000)h Fo(x)1944
5461 y Fi(j)1981 5446 y Fp(\))2019 5410 y Fj(2)1856 5695
y Fp(5)p eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -78 -269 a 269 173
a Fl(\001)292 122 y(\001)316 173 y(\001)372 158 y Fo( )31
b Fp(=)d Fk(\000)657 96 y Fj(\()p Fi(u)725 104 y Fc(x)764
96 y Fj(\))791 73 y Fc(n)791 118 y(j)p 657 135 178 4
v 728 193 a Fj(2)844 158 y Fp([\()p Fo(x)21 b Fk(\000)g
Fo(x)1138 173 y Fi(j)1175 158 y Fp(\))1213 122 y Fj(2)1272
158 y Fk(\000)g Fp(2)p Fo(a)p Fp(\()p Fo(x)f Fk(\000)h
Fo(x)1736 173 y Fi(j)1773 158 y Fp(\)\()p Fo(t)f Fk(\000)h
Fo(t)2037 122 y Fi(n)2084 158 y Fp(\))f(+)g Fo(a)2289
122 y Fj(2)2329 158 y Fp(\()p Fo(t)g Fk(\000)h Fo(t)2555
122 y Fi(n)2602 158 y Fp(\))2640 122 y Fj(2)2700 158
y Fp(+)f(2)p Fo(\026)p Fp(\()p Fo(t)g Fk(\000)g Fo(t)3129
122 y Fi(n)3177 158 y Fp(\)])g Fk(\000)h Fo(u)3416 122
y Fi(n)3416 183 y(j)3462 158 y Fp([\()p Fo(x)g Fk(\000)f
Fo(x)3755 173 y Fi(j)3792 158 y Fp(\))576 355 y Fk(\000)p
Fo(a)p Fp(\()p Fo(t)j Fk(\000)f Fo(t)934 319 y Fi(n)982
355 y Fp(\)])458 553 y(=)27 b Fk(\000)648 491 y Fj(\()p
Fi(u)716 499 y Fc(x)756 491 y Fj(\))783 467 y Fc(n)783
512 y(j)p 649 530 V 720 587 a Fj(2)836 553 y Fk(f)p Fp([\()p
Fo(x)22 b Fk(\000)h Fo(x)1183 568 y Fi(j)1220 553 y Fp(\))f
Fk(\000)g Fo(a)p Fp(\()p Fo(t)h Fk(\000)g Fo(t)1661 517
y Fi(n)1708 553 y Fp(\)])1773 517 y Fj(2)1834 553 y Fp(+)f(2)p
Fo(\026)p Fp(\()p Fo(t)g Fk(\000)h Fo(t)2270 517 y Fi(n)2317
553 y Fp(\))p Fk(g)f(\000)h Fo(u)2583 517 y Fi(n)2583
577 y(j)2629 553 y Fp([\()p Fo(x)g Fk(\000)f Fo(x)2926
568 y Fi(j)2963 553 y Fp(\))g Fk(\000)h Fo(a)p Fp(\()p
Fo(t)f Fk(\000)h Fo(t)3404 517 y Fi(n)3451 553 y Fp(\)])-70
631 y
SDict begin H.S end
 -70 631 a -70 631 a
SDict begin 18.85004 H.A end
 -70 631 a -70 631 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -70 631
a 50 791 a Fp(4.)48 b(Deriv)-5 b(ation)32 b(of)h(Eq.\(4.20\))174
947 y Fo( )237 962 y Fi(m)332 947 y Fp(=)27 b(\()p Fo(f)521
962 y Fi(m)588 947 y Fp(\))626 911 y Fi(n)626 972 y(j)673
947 y Fp(\()p Fo(t)18 b Fk(\000)g Fo(t)894 911 y Fi(n)941
947 y Fp(\))g Fk(\000)h Fp(\()p Fo(u)1187 962 y Fi(m)1253
947 y Fp(\))1291 911 y Fi(n)1291 972 y(j)1337 947 y Fp(\()p
Fo(x)g Fk(\000)f Fo(x)1599 962 y Fi(j)1636 947 y Fp(\))g(+)1795
908 y Fj(1)p 1795 924 36 4 v 1795 982 a(2)1841 947 y
Fp(\()p Fo(f)1927 962 y Fi(m)1993 947 y Fp(\))2031 911
y Fi(n)2031 972 y(j)2078 947 y Fp(\()p Fo(t)g Fk(\000)g
Fo(t)2299 911 y Fi(n)2347 947 y Fp(\))2385 911 y Fj(2)2442
947 y Fk(\000)2547 908 y Fj(1)p 2547 924 V 2547 982 a(2)2592
947 y Fp(\()p Fo(u)2686 962 y Fi(mx)2792 947 y Fp(\))2830
911 y Fi(n)2830 972 y(j)2877 947 y Fp(\()p Fo(x)g Fk(\000)h
Fo(x)3139 962 y Fi(j)3175 947 y Fp(\))3213 911 y Fj(2)3271
947 y Fp(+)e(\()p Fo(f)3450 962 y Fi(mx)3557 947 y Fp(\))3595
911 y Fi(n)3595 972 y(j)3642 947 y Fp(\()p Fo(x)h Fk(\000)174
1104 y Fo(x)229 1119 y Fi(j)266 1104 y Fp(\)\()p Fo(t)k
Fk(\000)h Fo(t)534 1068 y Fi(n)581 1104 y Fp(\):)269
1301 y(By)33 b(substituting)h(Eq.\(4.14\))f(in)m(to)f(Eq.\(4.18\),)h(w)
m(e)h(can)f(ha)m(v)m(e:)373 1454 y Fi(@)t( )460 1462
y Fc(m)p 373 1475 146 4 v 413 1532 a Fi(@)t(t)557 1498
y Fp(=)27 b(\()p Fo(f)746 1513 y Fi(m)813 1498 y Fp(\))851
1462 y Fi(n)851 1523 y(j)920 1498 y Fp(+)22 b(\()p Fo(f)1104
1513 y Fi(mx)1210 1498 y Fp(\))1248 1462 y Fi(n)1248
1523 y(j)1295 1498 y Fp(\()p Fo(x)h Fk(\000)f Fo(x)1565
1513 y Fi(j)1602 1498 y Fp(\))g(+)g(\()p Fo(f)1846 1513
y Fi(mt)1938 1498 y Fp(\))1976 1462 y Fi(n)1976 1523
y(j)2023 1498 y Fp(\()p Fo(t)g Fk(\000)h Fo(t)2253 1462
y Fi(n)2300 1498 y Fp(\))363 1695 y Fk(\))k Fo( )553
1710 y Fi(m)648 1695 y Fp(=)h(\()p Fo(f)838 1710 y Fi(m)904
1695 y Fp(\))942 1659 y Fi(n)942 1720 y(j)989 1695 y
Fp(\()p Fo(t)22 b Fk(\000)h Fo(t)1219 1659 y Fi(n)1266
1695 y Fp(\))f(+)g(\()p Fo(f)1510 1710 y Fi(mx)1617 1695
y Fp(\))1655 1659 y Fi(n)1655 1720 y(j)1702 1695 y Fp(\()p
Fo(x)g Fk(\000)h Fo(x)1972 1710 y Fi(j)2009 1695 y Fp(\)\()p
Fo(t)f Fk(\000)h Fo(t)2277 1659 y Fi(n)2324 1695 y Fp(\))f(+)2492
1656 y Fj(1)p 2492 1672 36 4 v 2492 1730 a(2)2537 1695
y Fp(\()p Fo(f)2623 1710 y Fi(mt)2715 1695 y Fp(\))2753
1659 y Fi(n)2753 1720 y(j)2800 1695 y Fp(\()p Fo(t)g
Fk(\000)h Fo(t)3030 1659 y Fi(n)3077 1695 y Fp(\))3115
1659 y Fj(2)3177 1695 y Fp(+)f Fo(C)7 b Fp(\()p Fo(x)p
Fp(\))32 b(|)3671 1692 y(1)3646 1695 y Fk(\015)269 1893
y Fp(Similarly)-8 b(,)33 b(b)m(y)h(substituting)g(Eq.\(4.9\))f(in)m(to)
g(Eq.\(4.19\),)f(w)m(e)i(can)f(ha)m(v)m(e:)363 2090 y
Fk(\000)450 2046 y Fi(@)t( )537 2054 y Fc(m)p 451 2067
146 4 v 483 2124 a Fi(@)t(x)634 2090 y Fp(=)28 b(\()p
Fo(u)832 2105 y Fi(m)898 2090 y Fp(\))936 2054 y Fi(n)936
2114 y(j)1005 2090 y Fp(+)22 b(\()p Fo(u)1197 2105 y
Fi(mx)1302 2090 y Fp(\))1340 2054 y Fi(n)1340 2114 y(j)1387
2090 y Fp(\()p Fo(x)h Fk(\000)g Fo(x)1658 2105 y Fi(j)1694
2090 y Fp(\))g(+)f(\()p Fo(u)1947 2105 y Fi(mt)2038 2090
y Fp(\))2076 2054 y Fi(n)2076 2114 y(j)2123 2090 y Fp(\()p
Fo(t)g Fk(\000)h Fo(t)2353 2054 y Fi(n)2400 2090 y Fp(\))33
b(|)2626 2087 y(2)2601 2090 y Fk(\015)269 2287 y Fp(Then)g(w)m(e)h
(substitute)g(Eq.)1294 2284 y(1)1267 2287 y Fk(\015)f
Fp(in)m(to)g(Eq.)1769 2284 y(2)1742 2287 y Fk(\015)q
Fp(:)363 2484 y Fk(\000)p Fp(\()p Fo(f)526 2499 y Fi(mx)633
2484 y Fp(\))671 2448 y Fi(n)671 2509 y(j)718 2484 y
Fp(\()p Fo(t)22 b Fk(\000)h Fo(t)948 2448 y Fi(n)995
2484 y Fp(\))f Fk(\000)h Fo(C)1232 2448 y Fl(0)1255 2484
y Fp(\()p Fo(x)p Fp(\))28 b(=)f(\()p Fo(u)1611 2499 y
Fi(m)1677 2484 y Fp(\))1715 2448 y Fi(n)1715 2509 y(j)1785
2484 y Fp(+)22 b(\()p Fo(u)1977 2499 y Fi(mx)2082 2484
y Fp(\))2120 2448 y Fi(n)2120 2509 y(j)2167 2484 y Fp(\()p
Fo(x)h Fk(\000)f Fo(x)2437 2499 y Fi(j)2474 2484 y Fp(\))g(+)g(\()p
Fo(u)2726 2499 y Fi(mt)2818 2484 y Fp(\))2856 2448 y
Fi(n)2856 2509 y(j)2903 2484 y Fp(\()p Fo(t)g Fk(\000)h
Fo(t)3133 2448 y Fi(n)3180 2484 y Fp(\))363 2682 y Fk(\))k
Fo(C)7 b Fp(\()p Fo(x)p Fp(\))28 b(=)g Fk(\000)p Fp(\()p
Fo(f)993 2697 y Fi(mx)1100 2682 y Fp(\))1138 2645 y Fi(n)1138
2706 y(j)1185 2682 y Fp(\()p Fo(x)22 b Fk(\000)h Fo(x)1455
2697 y Fi(j)1492 2682 y Fp(\)\()p Fo(t)f Fk(\000)h Fo(t)1760
2645 y Fi(n)1807 2682 y Fp(\))f Fk(\000)g Fp(\()p Fo(u)2060
2697 y Fi(m)2127 2682 y Fp(\))2165 2645 y Fi(n)2165 2706
y(j)2211 2682 y Fp(\()p Fo(x)h Fk(\000)g Fo(x)2482 2697
y Fi(j)2519 2682 y Fp(\))f Fk(\000)2688 2642 y Fj(1)p
2688 2659 36 4 v 2688 2716 a(2)2733 2682 y Fp(\()p Fo(u)2827
2697 y Fi(mx)2933 2682 y Fp(\))2971 2645 y Fi(n)2971
2706 y(j)3018 2682 y Fp(\()p Fo(x)h Fk(\000)f Fo(x)3288
2697 y Fi(j)3325 2682 y Fp(\))3363 2645 y Fj(2)458 2879
y Fk(\000)p Fp(\()p Fo(u)629 2894 y Fi(mt)721 2879 y
Fp(\))759 2843 y Fi(n)759 2903 y(j)806 2879 y Fp(\()p
Fo(x)g Fk(\000)h Fo(x)1076 2894 y Fi(j)1113 2879 y Fp(\)\()p
Fo(t)f Fk(\000)h Fo(t)1381 2843 y Fi(n)1428 2879 y Fp(\))269
3091 y Fl(\001)292 3040 y(\001)316 3091 y(\001)372 3076
y Fo( )435 3091 y Fi(m)530 3076 y Fp(=)28 b(\()p Fo(f)720
3091 y Fi(m)786 3076 y Fp(\))824 3040 y Fi(n)824 3101
y(j)871 3076 y Fp(\()p Fo(t)22 b Fk(\000)h Fo(t)1101
3040 y Fi(n)1148 3076 y Fp(\))f(+)g(\()p Fo(f)1392 3091
y Fi(mx)1499 3076 y Fp(\))1537 3040 y Fi(n)1537 3101
y(j)1584 3076 y Fp(\()p Fo(x)g Fk(\000)h Fo(x)1854 3091
y Fi(j)1891 3076 y Fp(\)\()p Fo(t)f Fk(\000)h Fo(t)2159
3040 y Fi(n)2206 3076 y Fp(\))f(+)2374 3037 y Fj(1)p
2374 3053 V 2374 3110 a(2)2419 3076 y Fp(\()p Fo(f)2505
3091 y Fi(mt)2597 3076 y Fp(\))2635 3040 y Fi(n)2635
3101 y(j)2682 3076 y Fp(\()p Fo(t)g Fk(\000)h Fo(t)2912
3040 y Fi(n)2959 3076 y Fp(\))2997 3040 y Fj(2)3059 3076
y Fk(\000)f Fp(\()p Fo(f)3244 3091 y Fi(mx)3351 3076
y Fp(\))3389 3040 y Fi(n)3389 3101 y(j)3435 3076 y Fp(\()p
Fo(x)p Fk(\000)647 3273 y Fo(x)702 3288 y Fi(j)739 3273
y Fp(\)\()p Fo(t)g Fk(\000)g Fo(t)1006 3237 y Fi(n)1054
3273 y Fp(\))g Fk(\000)g Fp(\()p Fo(u)1307 3288 y Fi(m)1373
3273 y Fp(\))1411 3237 y Fi(n)1411 3298 y(j)1458 3273
y Fp(\()p Fo(x)h Fk(\000)f Fo(x)1728 3288 y Fi(j)1765
3273 y Fp(\))g Fk(\000)1935 3234 y Fj(1)p 1935 3250 V
1935 3308 a(2)1980 3273 y Fp(\()p Fo(u)2074 3288 y Fi(mx)2180
3273 y Fp(\))2218 3237 y Fi(n)2218 3298 y(j)2265 3273
y Fp(\()p Fo(x)g Fk(\000)h Fo(x)2535 3288 y Fi(j)2572
3273 y Fp(\))2610 3237 y Fj(2)2672 3273 y Fk(\000)f Fp(\()p
Fo(u)2865 3288 y Fi(mt)2957 3273 y Fp(\))2995 3237 y
Fi(n)2995 3298 y(j)3042 3273 y Fp(\()p Fo(x)g Fk(\000)h
Fo(x)3312 3288 y Fi(j)3349 3273 y Fp(\)\()p Fo(t)f Fk(\000)h
Fo(t)3617 3237 y Fi(n)3664 3273 y Fp(\))269 3434 y Fl(\001)292
3486 y(\001)316 3434 y(\001)372 3471 y Fp(Eq.\(4.17\))33
b(\()p Fo(u)893 3486 y Fi(mt)985 3471 y Fp(\))1023 3434
y Fi(n)1023 3495 y(j)1097 3471 y Fp(=)28 b Fk(\000)p
Fp(\()p Fo(f)1364 3486 y Fi(mx)1471 3471 y Fp(\))1509
3434 y Fi(n)1509 3495 y(j)269 3683 y Fl(\001)292 3632
y(\001)316 3683 y(\001)365 3668 y Fo( )428 3683 y Fi(m)523
3668 y Fp(=)f(\()p Fo(f)712 3683 y Fi(m)779 3668 y Fp(\))817
3632 y Fi(n)817 3692 y(j)864 3668 y Fp(\()p Fo(t)7 b
Fk(\000)g Fo(t)1063 3632 y Fi(n)1111 3668 y Fp(\))g Fk(\000)g
Fp(\()p Fo(u)1334 3683 y Fi(m)1400 3668 y Fp(\))1438
3632 y Fi(n)1438 3692 y(j)1485 3668 y Fp(\()p Fo(x)g
Fk(\000)g Fo(x)1724 3683 y Fi(j)1762 3668 y Fp(\))g(+)1900
3629 y Fj(1)p 1900 3645 V 1900 3702 a(2)1945 3668 y Fp(\()p
Fo(f)2031 3683 y Fi(m)2098 3668 y Fp(\))2136 3632 y Fi(n)2136
3692 y(j)2182 3668 y Fp(\()p Fo(t)g Fk(\000)g Fo(t)2381
3632 y Fi(n)2429 3668 y Fp(\))2467 3632 y Fj(2)2514 3668
y Fk(\000)2608 3629 y Fj(1)p 2608 3645 V 2608 3702 a(2)2653
3668 y Fp(\()p Fo(u)2747 3683 y Fi(mx)2853 3668 y Fp(\))2891
3632 y Fi(n)2891 3692 y(j)2938 3668 y Fp(\()p Fo(x)g
Fk(\000)g Fo(x)3177 3683 y Fi(j)3215 3668 y Fp(\))3253
3632 y Fj(2)3299 3668 y Fp(+)g(\()p Fo(f)3468 3683 y
Fi(mx)3575 3668 y Fp(\))3613 3632 y Fi(n)3613 3692 y(j)3659
3668 y Fp(\()p Fo(x)p Fk(\000)647 3865 y Fo(x)702 3880
y Fi(j)739 3865 y Fp(\)\()p Fo(t)22 b Fk(\000)g Fo(t)1006
3829 y Fi(n)1054 3865 y Fp(\))-70 4042 y
SDict begin H.S end
 -70 4042 a -70
4042 a
SDict begin 18.85004 H.A end
 -70 4042 a -70 4042 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 -70 4042 a 210 x Fr(4)161
b(Ho)l(w)53 b(to)g(dev)l(elop)f(our)h(o)l(wn)f(CESE)h(solv)l(er)-70
4507 y Fp(Reference)28 b(pap)s(er)f(is)g("The)g(Metho)s(d)g(of)f
(Space-Time)i(Conserv)-5 b(ation)28 b(Elemen)m(t)g(and)f(Solution)f
(Elemen)m(t)-70 4663 y({)40 b(A)g(New)i(Approac)m(h)f(for)e(Solving)i
(the)g(Na)m(vier-Stok)m(es)h(and)e(Euler)h(Equations.")82
b([)3196 4663 y
SDict begin H.S end
 3196 4663 a Fp(1)3244 4599 y
SDict begin H.R end
 3244 4599
a 3244 4663 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 3244 4663 a Fp(].)67 b(The)41 b(CESE)-70
4820 y(solv)m(er)49 b(pro)m(vided)g(in)f(this)g(note)g(basically)h(is)f
(written)h(in)e(Python.)90 b(Necessary)50 b(or)d(recommended)-70
4976 y(libraries)34 b(whic)m(h)g(are)e(used)i(in)f(our)f(implemen)m
(tation)j(of)d(CESE)i(metho)s(d:)-70 5034 y
SDict begin H.S end
 -70 5034
a -70 5034 a
SDict begin 18.85004 H.A end
 -70 5034 a -70 5034 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -70 5034 a 50 5211
a Fp(1.)48 b(Nump)m(y)-8 b(,)34 b(matplotlib)-70 5446
y(Useful)g(to)s(ols:)1856 5695 y(6)p eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -78 -269 a -70 46
a
SDict begin H.S end
 -70 46 a -70 46 a
SDict begin 18.85004 H.A end
 -70 46 a -70 46 a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 -70 46 a 50 146
a Fp(1.)48 b(PyCharm)-70 207 y
SDict begin H.S end
 -70 207 a -70 207 a
SDict begin 18.85004 H.A end
 -70
207 a -70 207 a
SDict begin [/View [/XYZ H.V]/Dest (Item.24) cvn /DEST pdfmark end
 -70 207 a 50 385 a Fp(2.)g(iPython)-70
625 y(And)32 b(the)f(complete)h(Python)f(co)s(de)g(of)g(CESE)h(solv)m
(er)g(can)f(b)s(e)g(found)g(in)g(Section)2989 625 y
SDict begin H.S end
 2989
625 a Fp(4.2)3114 561 y
SDict begin H.R end
 3114 561 a 3114 625 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (subsection.4.2) cvn H.B /ANN pdfmark end
 3114 625
a Fp(.)43 b(Section)3523 625 y
SDict begin H.S end
 3523 625 a Fp(4.1)3648
561 y
SDict begin H.R end
 3648 561 a 3648 625 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (subsection.4.1) cvn H.B /ANN pdfmark end
 3648 625 a 31 w Fp(will)-70
781 y(demonstrate)g(ho)m(w)g(w)m(e)g(implemen)m(t)h(CESE)f(solv)m(er)h
(for)d(solving)i(this)f(one-dimensional)i(sho)s(c)m(k)f(tub)s(e)-70
938 y(problem)34 b(in)e(Python.)-70 1097 y
SDict begin H.S end
 -70 1097 a
-70 1097 a
SDict begin 18.85004 H.A end
 -70 1097 a -70 1097 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.1) cvn /DEST pdfmark
end
 -70 1097 a 175 x Fn(4.1)136
b(One-dimensional)46 b(sho)t(c)l(k)e(tub)t(e)h(problem)-70
1492 y Fp(The)40 b(one-dimensional)f(So)s(d)f(sho)s(c)m(k)i(tub)s(e)e
(is)h(emplo)m(y)m(ed)i(for)d(the)g(test)h(of)f(our)g(CESE)i
(computational)-70 1649 y(\015uid)24 b(co)s(des.)41 b(Figure)739
1649 y
SDict begin H.S end
 739 1649 a Fp(2)788 1585 y
SDict begin H.R end
 788 1585 a 788 1649
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (figure.caption.3) cvn H.B /ANN pdfmark end
 788 1649 a 23 w Fp(sho)m(ws)25 b(the)f(initial)f(condition)h(of)e
(di\013eren)m(t)j(region)e(in)g(our)g(So)s(d)g(sho)s(c)m(k)i(tub)s(e.)
40 b(The)-70 1805 y(whole)d(one-dimension)h(space)f(is)f(separated)h
(in)m(to)f(t)m(w)m(o)h(regions)f(b)m(y)h(a)f(diaphragm)g(in)g(the)h(b)s
(eginning.)-70 1962 y(The)e(gas)e(is)h(the)g(same)g(in)f(b)s(oth)g
(regions.)47 b(The)34 b(left)f(region)h(is)g(called)g(driv)m(en)h
(section)f(and)g(con)m(taining)-70 2118 y(the)43 b(gas)g(with)g(the)f
(higher)h(densit)m(y)i Fo(\032)1401 2133 y Fi(l)1469
2118 y Fp(and)e(the)g(higher)g(pressure)h Fo(p)2594 2133
y Fi(l)2620 2118 y Fp(.)73 b(The)43 b(righ)m(t)g(region)f(is)h(called)
-70 2275 y(w)m(orking)36 b(section)f(and)g(with)g(the)g(gas)g(at)f(the)
h(lo)m(w)m(er)h(densit)m(y)g Fo(\032)2321 2290 y Fi(r)2394
2275 y Fp(and)f(the)g(lo)m(w)m(er)g(pressure)i Fo(p)3444
2290 y Fi(r)3482 2275 y Fp(.)49 b(Before)-70 2431 y(remo)m(ving)42
b(the)g(diaphragm,)h(the)f(gas)e(in)i(b)s(oth)e(regions)i(is)f(static.)
69 b(The)42 b(global)f(sp)s(eci\014c)i(heat)e(ratio)-70
2588 y(\()p Fo(\015)52 2532 y Fj(def)60 2588 y Fp(=)182
2539 y Fi(c)213 2547 y Fc(p)p 182 2565 68 4 v 182 2622
a Fi(c)213 2630 y Fc(v)259 2588 y Fp(\))33 b(is)g(1.4.)-70
2687 y
SDict begin H.S end
 -70 2687 a -70 2687 a
SDict begin 14.5 H.A end
 -70 2687 a -70 2687 a
SDict begin [/View [/XYZ H.V]/Dest (figure.caption.3) cvn /DEST pdfmark
end
 -70
2687 a 320 3726 a @beginspecial 0 @llx 0 @lly 720 @urx
226 @ury 3744 @rwi @setspecial
%%BeginDocument: diagram/sod_shock_tube_1D.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: sod_shock_tube_1D.pdf
%%Creator: (Adobe Acrobat 15.10.0)
%%For: ntuhep520
%%CreationDate: 2016/1/20, 下午4:35
%%BoundingBox: 0 0 720 226
%%HiResBoundingBox: 0 0 720 226
%%CropBox: 0 0 720 226
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 605 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-01-13T06:59:22Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2016-01-13T06:59:22Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11.1 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -226 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 226 li
720 226 li
720 0 li
cp
clp
.981818 0 mo
719.018 0 li
719.018 226.096 li
.981818 226.096 li
cp
false sop
0 0 0 0 cmyk
ef
78.9046 81.3841 mo
645.733 81.3842 li
.75021 .679683 .670222 .90164 cmyk
25400 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[7.85254e-05 0 0 7.85129e-05 78.9046 81.3841 ]ct
@
grestore newpath
78.1173 170.753 mo
644.946 170.753 li
gsave
[7.85254e-05 0 0 7.85129e-05 78.1173 170.753 ]ct
@
grestore newpath
360 82.0813 mo
360 159.456 li
.630945 .325231 .0310369 0 cmyk
[76200 25400 ] 0 dsh
gsave
[7.85254e-05 0 0 7.85129e-05 360 82.0813 ]ct
@
grestore newpath
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: JAAAAA+PMingLiU-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (JAAAAA+PMingLiU)
%%Title: (JAAAAA+PMingLiU Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /JAAAAA+PMingLiU def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -198 999 801} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 5 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE3100AAC671FFC18DDB3764E95ECE8020311F82848570B
1358F8FCDF8604B> |
3 <001C60D8A8C9B5EE310259D90D93D4B2FA39491B1A35B2A206C96D2D96A8E
F4EEB94588568D6D7ACFC970E5DFEFC4B6F4BE81DEEA22654F5A4E4C3931F075
A5F339D4EC4BD6DE2F8601AE6BA1B168E25BD6ECF9FE7AD44F52F1FD50D55B0B
3BC9B33429DF3DBAF93365B138C74135F127FA6005007A1BEA8B21947B05307C
6EB1AEC5429203B00BBF8B341450A52074BDE1AA971E0DBC7257911F09C9E09F
9E1C0EF01665677CA7B4DB06E999C1963BF18A673CDDC4E0BA28E012C40610BD
DA426CB575C6D16BB644A1FA6A85B72166C1F69C6E88B44F5CA943485A081ABF
91B05AB6414AE7B498C8646711DF2838E57B90717376D539A5939CE86A94571> |
4 <001C60D8A8C9B5EE310DAAEC6B66FA5E80C642403AAF49FE1BA9C97D9D0B2
D45B8A647A79D758AF898207B86313863A63F741CB748EC0B522D0A5431AEF8F
167AC955CF7C56F1C5479794D47AEBDE17BD11FF65F159120019E9EF6F9F2747
11FAD6AD3A4689D46AD5DB2266AD863E89F55C714722FFC3DE0B7635FA486665
96A2F86C8E5DD12C88CF81E5E11E05D8350DC057B0E5AECD8361E420A48EC8FB
39A02EF87A2F1294923E4971FFA3EC4> |
1 <001C60D8A8C9B8666C32> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /JAAAAA+PMingLiU-Identity-H /Identity-H 0 [/JAAAAA+PMingLiU] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ZHYQFE+PMingLiU /JAAAAA+PMingLiU-Identity-H findfont ct_VMDictPut
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
215.152 109.894 mo
(\000\003)sh
%ADOBeginSubsetFont: LAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /LAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000051c6670
676d00000000000005d80000091a676c7966000000000000347c00002490
686561640000000000000ef400000036686865610000000000000f2c0000
0024686d74780000000000000f50000000906c6f63610000000000000fe0
0000004a6d617870000000000000102c000000206e616d65000000000000
104c0000002070726570000000000000106c000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d00000001000000059eb88df7cb11
5f0f3cf50019080000000000bbeb7ccc00000000c787a88bfbfafd8b09ec
07b600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec000100000000000000000000000000000024040e000001cf00000444
006103d5005c0362005a0434006003fb005d03c400350434009901d60085
03a3009901d6009906640099043400990438005a0434009902ca00990321
0051047500210475002104340094039d002205b800350377002901d60000
020500970317000102730045026d0085026d007a040e0048040e00ae040e
0072040e0030040e006503fc005e000000a100a1011e01cd025902f00391
047e0502057b06150658073907ca085808ef09680a2e0a3a0ab00b400bf7
0ccf0d5f0d830da50dcd0df00e390e890f3c0ff310931158120d12480000
0001000000240120001000c3000700020010002f00650000119001820004
00010000000100120001000000000006000e00004b4a4e4a4e542b43616c
69627269b2090320b80284b40918014a20b80283b40918014a20b80282b4
0918014a20b80281b40918014a20b80280b40918014a20b8027fb4091801
4a20b8027eb40918014a20b8027db40918014a20b8027cb40918014a20b8
027bb40918014a20b8027ab40918014a20b80279b40918014a20b80278b4
0918014a20b80277b40918014a20b80276b40918014a20b80275b4091801
4a20b80274b40918014a20b80273b40918014a20b80271b40918014a20b8
0270b40918014a20b8026fb40918014a20b8026eb40918014a20b8026db4
0918014a20b8026cb40918014a20b8026bb40918014a20b8026ab4091801
4a20b80269b40918014a20b80268b40918014a20b80267b40918014a20b8
0266b40918014a20b80265b40918014a20b80264b40918014a20b80263b4
0918014a20b80262b40918014a20b80261b40918014a20b80260b4091801
4a20b8025fb40918014a20b8025eb40918014a20b8025db40918014a20b8
025cb40918014a20b8025bb40918014a20b8025ab40918014a20b80259b4
0918014a20b80258b40918014a20b80257b40918014a20b80256b4091801
4a20b80255b40918014a20b80254b40918014a20b80253b40918014a20b8
0252b40918014a20b80251b40918014a20b80250b40918014a20b8024fb4
0918014a20b8024eb40918014a20b8024db40918014a20b8024cb4091801
4a20b8024bb40918014a20b8024ab40918014a20b80249b40918014a20b8
0248b40918014a20b80247b40918014a20b80246b40918014a20b80245b4
0918014a20b80244b40918014a20b80243b40918014a20b80242b4091801
4a20b80241b40918014a20b80240b40918014a20b8023fb40918014a20b8
023eb40918014a20b8023db40918014a20b8023cb40918014a20b8023bb4
0918014a20b8023ab40918014a20b80239b40918014a20b80238b4091801
4a20b80237b40918014a20b80236b40918014a20b80235b40918014a20b8
0234b40918014a20b80233b40918014a20b80232b40918014a20b80231b4
0918014a20b80230b40918014a20b8022fb40918014a20b8022eb4091801
4a20b8022db40918014a20b8022cb40918014a20b8022bb40918014a20b8
022ab40918014a20b80229b40918014a20b80228b40918014a20b80227b4
0918014a20b80226b40918014a20b80225b40918014a20b80224b4091801
4a20b80223b40918014a20b80222b40918014a20b80221b40918014a20b8
0220b40918014a20b8021fb40918014a20b8021eb40918014a20b8021db4
0918014a20b8021cb40918014a20b8021bb40918014a20b8021ab4091801
4a20b80219b40918014a20b80218b40918014a20b80217b40918014a20b8
0216b40918014a20b80215b40918014a20b80214b40918014a20b80213b4
0918014a20b80212b40918014a20b80211b40918014a20b80210b4091801
4a20b8020fb40918014a20b8020eb40918014a20b8020db40918014a20b8
020cb40918014a20b8020bb40918014a20b8020ab40918014a20b80209b4
0918014a20b80208b40918014a20b80207b40918014a20b80206b4091801
4a20b80205b40918014a20b80204b40918014a20b80203b40918014a20b8
0202b40918014a20b80201b40918014a20b80200b40918014a20b801ffb4
0918014a20b801feb40918014a20b801fdb40918014a20b801fcb4091801
4a20b801fbb40918014a20b801fab40918014a20b801f9b40918014a20b8
01f8b40918014a20b801f7b40918014a20b801f6b40918014a20b801f5b4
0918014a20b801f4b40918014a20b801f3b40918014a20b801f2b4091801
4a20b801f1b40918014a20b801f0b40918014a20b801efb40918014a20b8
01eeb40918014a20b801edb40918014a20b801ecb40918014a20b801ebb4
0918014a20b801eab40918014a20b801e9b40918014a20b801e8b4091801
4a20b801e7b40918014a20b801e6b40918014a20b801e5b40918014a20b8
01e4b40918014a20b801e3b40918014a20b801e2b40918014a20b801e1b4
0918014a20b801e0b40918014a20b801dfb40918014a20b801deb4091801
4a20b801ddb40918014a20b801dcb40918014a20b801dbb40918014a20b8
01dab40918014a20b801d9b40918014a20b801d8b40918014a20b801d7b4
0918014a20b801d6b40918014a20b801d5b40918014a20b801d4b4091801
4a20b801d3b40918014a20b801d2b40918014a20b801d1b40918014a20b8
01d0b40918014a20b801cfb40918014a20b801ceb40918014a20b801cdb4
0918014a20b801ccb40918014a20b801cbb40918014a20b801cab4091801
4a20b801c9b40918014a20b801c8b40918014a20b801c7b40918014a20b8
01c6b40918014a20b801c5b40918014a20b801c4b40918014a20b801c3b4
0918014a20b801c2b40918014a20b801c1b40918014a20b801c0b4091801
4a20b801bfb40918014a20b801beb40918014a20b801bdb40918014a20b8
01bcb40918014a20b801bbb40918014a20b801bab40918014a20b801b9b4
0918014a20b801b8b40918014a20b801b7b40918014a20b801b6b4091801
4a20b801b5b40918014a20b801b4b40918014a20b801b3b40918014a20b8
01b2b40918014a20b801b1b40918014a20b801b0b40918014a20b801afb4
0918014a20b801aeb40918014a20b801adb40918014a20b801acb4091801
4a20b801abb40918014a20b801aab40918014a20b801a9b40918014a20b8
01a8b40918014a20b801a7b40918014a20b801a6b40918014a20b801a5b4
0918014a20b801a4b40918014a20b801a3b40918014a20b801a2b4091801
4a20b801a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8
019eb40918014a20b8019db40918014a20b8019cb40918014a20b8019bb4
0918014a20b8019ab40918014a20b80199b40918014a20b80198b4091801
4a20b80197b40918014a20b80196b40918014a20b80195b40918014a20b8
0194b40918014a20b80193b40918014a20b80192b40918014a20b80191b4
0918014a20b80190b40918014a20b8018fb40918014a20b8018eb4091801
4a20b8018db40918014a20b8018cb40918014a20b8018bb40918014a20b8
018ab40918014a20b80189b40918014a20b80188b40918014a20b80187b4
0918014a20b80186b40918014a20b80185b40918014a20b80184b4091801
4a20b80183b40918014a20b80182b40918014a20b80181b40918014a20b8
0180b40918014a20b8017fb40918014a20b8017eb40918014a20b8017db4
0918014a20b8017cb40918014a20b8017bb40918014a20b8017ab4091801
4a20b80179b40918014a20b80178b40918014a20b80177b40918014a20b8
0176b40918014a20b80175b40918014a20b80174b40918014a20b80173b4
0918014a20b80172b40918014a20b80171b40918014a20b80170b4091801
4a20b8016fb40918014a20b8016eb40918014a20b8016db40918014a20b8
016cb40918014a20b8016bb40918014a20b8016ab40918014a20b80169b4
0918014a20b80168b40918014a20b80167b40918014a20b80166b4091801
4a20b80165b40918014a20b80164b40918014a20b80163b40918014a20b8
0162b40918014a20b80161b40918014a20b80160b40918014a20b8015fb4
0918014a20b8015eb40918014a20b8015db40918014a20b8015cb4091801
4a20b8015bb40918014a20b8015ab40918014a20b80159b40918014a20b8
0158b40918014a20b80157b40918014a20b80156b40918014a20b80155b4
0918014a20b80154b40918014a20b80153b40918014a20b80152b4091801
4a20b80150b40918014a20b8014fb40918014a20b8014eb40918014a20b8
014cb40918014a20b8014bb40918014a20b8014ab40918014a20b80149b4
0918014a20b80148b40918014a20b80147b40918014a20b80146b4091801
4a20b80145b40918014a20b80144b40918014a20b80143b30918014ab802
84b21e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b2
1e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e
1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb8
0277b21d431fb80276b21d431fb80275b21d411fb80274b21d431fb80273
b21d431fb80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d
421fb8026eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451f
b8026ab21c451fb80269b21c451fb80268b21c451fb80267b21c451fb802
66b21c441fb80265b21c451fb80264b21c451fb80263b21c451fb80262b2
1c451fb80261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c44
1fb8025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb8
0259b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb80255
b21c451fb80254b21c451fb80253b21c451fb80252b21c451fb80251b21c
451fb80250b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451f
b8024cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb802
48b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b2
1b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b49
1fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8
023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237
b21b4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b
4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1f
b8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb802
2ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b2
1b491fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b
1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8
021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219
b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a
4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1f
b80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb802
0cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b2
1a4f1fb80207b21a4f1fb80206b219501fb80205b219511fb80204b21951
1fb80203b219501fb80202b219511fb80201b219511fb80200b219511fb8
01ffb219511fb801feb219501fb801fdb219511fb801fcb219511fb801fb
b219511fb801fab219501fb801f9b219511fb801f8b219511fb801f7b219
511fb801f6b219511fb801f5b218541fb801f4b218531fb801f3b218541f
b801f2b218541fb801f1b218541fb801f0b218531fb801efb218541fb801
eeb218541fb801edb218541fb801ecb218531fb801ebb218531fb801eab2
18541fb801e9b218541fb801e8b218541fb801e7b218541fb801e6b21853
1fb801e5b218541fb801e4b218531fb801e3b218541fb801e2b218541fb8
01e1b218541fb801e0b218531fb801dfb218531fb801deb218541fb801dd
b218541fb801dcb218541fb801dbb218541fb801dab218531fb801d9b218
541fb801d8b218541fb801d7b217571fb801d6b217561fb801d5b217561f
b801d4b217571fb801d3b217571fb801d2b217571fb801d1b217571fb801
d0b217561fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb2
17571fb801cbb217571fb801cab217561fb801c9b217561fb801c8b21757
1fb801c7b217571fb801c6b217571fb801c5b217571fb801c4b217571fb8
01c3b217561fb801c2b217571fb801c1b217571fb801c0b217571fb801bf
b217561fb801beb217561fb801bdb217571fb801bcb217571fb801bbb217
571fb801bab217571fb801b9b217571fb801b8b217561fb801b7b217571f
b801b6b217571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801
b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2
165b1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e
1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb8
01a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1
b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db216
3f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1f
b80198b2163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb801
94b2163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2
165b1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f
1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb8
0187b2165b1fb80186b215611fb80185b215621fb80184b215621fb80183
b215661fb80182b215661fb80181b215551fb80180b215451fb8017fb215
361fb8017eb215361fb8017db215611fb8017cb215621fb8017bb215621f
b8017ab215641fb80179b215661fb80178b215661fb80177b215661fb801
76b215661fb80175b215661fb80174b215661fb80173b215451fb80172b2
15621fb80171b215621fb80170b215631fb8016fb215641fb8016eb21566
1fb8016db215661fb8016cb215661fb8016bb215661fb8016ab215661fb8
0169b215621fb80168b215621fb80167b215611fb80166b215641fb80165
b215641fb80164b215661fb80163b215661fb80162b215661fb80161b215
661fb80160b215661fb8015fb215661fb8015eb215551fb8015db215451f
b8015cb215451fb8015bb215361fb8015ab215611fb80159b215621fb801
58b215621fb80157b215631fb80156b215641fb80155b215661fb80154b2
15661fb80153b215661fb80152b215661fb80151b214401fb80150b21455
1fb8014fb214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8
014bb214401fb8014ab214411fb80149b214401fb80148b214401fb80147
b214411fb80146b2147e1fb80145b214871fb80144b2147f1fb80143b214
801fb80142b212461fb80141b212461fb80140b212461fb8013fb212461f
b8013eb212441fb8013db212461fb8013cb211591fb8013bb211591fb801
3ab2115b1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2
115a1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb80132b21147
1fb80131b211551fb80130b211571fb8012fb211571fb8012eb211581fb8
012db211591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129
b2115b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211
561fb80124b211561fb80123b211571fb80122b211581fb80121b211591f
b80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb801
1cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2
105e1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f
1fb80113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8
010fb2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010b
b2105e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b210
5f1fb80106b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1f
b80102b2105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631f
fd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f
641ff50f641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641f
ee0f641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f
641fe60e671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681f
df0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d
6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1f
d00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d
6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311f
c10d311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731f
ba0c741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c
741fb20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1f
ab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b
7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f
9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b
7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f
8d0aa51f8c0aa71f8503251f8403381f8301381f8255805581ab80557f55
7d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557b
ab7a557955775578ab7755ba028600660285403c5576ab75550475147574
7503f47501ab750144750130750102007510752075030c7455725573ab72
55007250728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ff
c0407c720d104671556f5570ab6f556e666d556a03251f6938675568ab67
556638645565ab645563386255613860555f385d555eab5d555c385a555b
ab5a55593858555703251f5638545555ab54555338515552ab51554f384e
554e03251f4d384b554cab4b554a38485549ab4855473846554503381f00
1c101c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b0400
1bb01bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf
18024018292c460f17cf17df17ef1704134017292e460016101620160315
b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d16
2326460f15010f151f1502451f15010011e011f0110315bf10cf10020f0f
010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d
1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02
553f0b4f0b02400b3f4346400b2d30460003012001010001100120010308
b8ffc0b301151f46b80100b316010501b80190b154532b2b4bb80800524b
b008505bb00188b02553b00188b040515ab00688b000555a5b58b101018e
59b101024354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a0
1d594bb0805358b0401d594bb0ff5358b0001db1160042592b5e7375732b
2b745e732b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b
5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f73
737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff028400640283
0064028200640281006402800064027f0064027e0064027d0064027c0064
027b0064027a006402790064027800640277006402760064027500640274
0064027300640271006402700064026f0064026e0064026d0064026c0064
026b0064026a006402690064026800640267006402660064026500640264
006402630064026200640261006402600064025f0064025e0064025d0064
025c0064025b0064025a0064025900640258006402570064025600640255
00640254006402530064025200640251006402500064024f0064024e0064
024d0064024c0064024b0064024a00640249006402480064024700640246
0064024500640244006402430064024200640241006402400064023f0064
023e0064023d0064023c0064023b0064023a006402390064023800640237
006402360064023500640234006402330064023200640231006402300064
022f0064022e0064022d0064022c0064022b0064022a0064022900640228
006402270064022600640225006402240064022300640222006402210064
02200064021f0064021e0064021d0064021c0064021b0064021a00640219
006402180064021700640216006402150064021400640213006402120064
0211006402100064020f0064020e0064020d0064020c0064020b0064020a
00640209006402080064020700640206006402050064020441ff00640203
006402020064020100640200006401ff006401fe006401fd006401fc0064
01fb006401fa006401f9006401f8006401f7006401f6006401f5006401f4
006401f3006401f2006401f1006401f0006401ef006401ee006401ed0064
01ec006401eb006401ea006401e9006401e8006401e7006401e6006401e5
006401e4006401e3006401e2006401e1006401e0006401df006401de0064
01dd006401dc006401db006401da006401d9006401d8006401d7006401d6
006401d5006401d4006401d3006401d2006401d1006401d0006401cf0064
01ce006401cd006401cc006401cb006401ca006401c9006401c8006401c7
006401c6006401c5006401c4006401c3006401c2006401c1006401c00064
01bf006401be006401bd006401bc006401bb006401ba006401b9006401b8
006401b7006401b6006401b5006401b4006401b3006401b2006401b10064
01b0006401af006401ae006401ad006401ac006401ab006401aa006401a9
006401a8006401a7006401a6006401a5006401a4006401a3006401a20064
01a1006401a00064019f0064019e0064019d0064019c0064019b0064019a
006401990064019800640197006401960064019500640194006401930064
019200640191006401900064018f0064018e0064018d0064018c0064018b
0064018a0064018900640188006401870064018600640185006441800184
006401830064018200640181006401800064017f0064017e0064017d0064
017c0064017b0064017a0064017900640178006401770064017600640175
00640174006401730064017200640171006401700064016f0064016e0064
016d0064016c0064016b0064016a00640169006401680064016700640166
0064016500640164006401630064016200640161006401600064015f0064
015e0064015d0064015c0064015b0064015a006401590064015800640157
0064015600640155006401540064015300640152006401500064014f0064
014e0064014c0064014b0064014a00640149006401480064014700640146
00640145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[9361 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> LAAAAA+Calibri AddT42Char 
1 9242 35 <0002005e0138039d0349000d001b001db4000e07150bbc010a0004001101
0a0018002fedd6ed012f33cd323130011406232122263534363321321611
14062321222635343633213216039d170ffd0c0f16141102f41214170ffd
0c0f16141102f412140303281f1f28242222fe57281e1e2825222200>LAAAAA+Calibri AddT42Char 
1 7800 31 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>LAAAAA+Calibri AddT42Char 
1 6918 25 <00010097fff7016e00e0000b0017b10006b8ffc0b60c014d0609034c003f
cd012f2bc13130251406232226353436333216016e2f3e3c2e2f3e3c2e6d
472f2e45472f2e00>LAAAAA+Calibri AddT42Char 
1 7442 30 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>LAAAAA+Calibri AddT42Char 
1 4272 15 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>LAAAAA+Calibri AddT42Char 
1 8166 32 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>LAAAAA+Calibri AddT42Char 
1 8880 34 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>LAAAAA+Calibri AddT42Char 
1 1202 5 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>LAAAAA+Calibri AddT42Char 
1 4574 16 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>LAAAAA+Calibri AddT42Char 
1 2564 9 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>LAAAAA+Calibri AddT42Char 
1 5760 21 <00010022fffa037b03bc002c00e3b90023fff840170b0c014c1f080b0c01
4c251f011e080b0c014c251e0116b8fff0b30b014d15b8fff0b30b014d14
b8ffe8b30b014d13b8ffe8b30b014d12b8ffe8b30b014d11b8fff040370b
014d37110126110127100128050122280b014d3d220124220121280b014d
3f210124210120280b014d3d2001242001270f0176210121b8ffd0400911
1548212013014d21b8ffe8400910014d21200f014d21b8ffe8b30c014d21
b8fff0400c0b014d212849210b1a490b4c003f3f12393f012f2b2b2b2b2b
002b5d31305d5d5d2b5d5d2b5d5d2b015d5d5d5d2b2b2b2b2b2b5d2b5d2b
2b01140e0207010e0323222e0227012e0235343e0233321e021713173713
3e0333321e02037b01020302fecd040d1a281e1e28190e04fece04050108
131f171d23130904fe0403fb020a13211b171e1107039f04090a0c07fca9
0b0e080304080e0a03570c120903080c070203080c09fd1a0c0c02e6090c
080302080b00>LAAAAA+Calibri AddT42Char 
1 1504 6 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>LAAAAA+Calibri AddT42Char 
1 3698 13 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>LAAAAA+Calibri AddT42Char 
1 4816 17 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>LAAAAA+Calibri AddT42Char 
1 922 4 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>LAAAAA+Calibri AddT42Char 
1 5236 19 <00010021ffef03dc04ad0041003db22f4110b801f8b42b1e1e2b0fb801f9
400c03352b4148102bed3b354814b80104b3254d094c003f3fed3fcded32
3f012f32dde112392f10e1322f31300132161511140e0223222e02351121
11141633323e0233321e0215140e0423222e02351123222635343e023333
35343e0233321e02151503a81e160813201719201308fe2f374717241c14
0805090504081020292e174664401d7e0f1205080d087d07132018192012
0803b71b1afc97080b080404080b080315fe0a5d5f090a09050e18121d21
110e0906254b734e020e2024131a1107d6070c090404090c07d6>LAAAAA+Calibri AddT42Char 
1 6846 24 <0002000003b70151052f000b000c0014b900000271b40609030c48003fde
cd012fe131300114062322263534363332160101512c3b3a2b2c3b3a2bfe
af04cd3a2a29393a2a29feb1>LAAAAA+Calibri AddT42Char 
1 5212 18 <ffff0021ffef03ef052f02260013000000070018029e0000>LAAAAA+Calibri AddT42Char 
1 3988 14 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>LAAAAA+Calibri AddT42Char 
1 7136 28 <00010085fea701f3058b00230022401503100b014d03100f014d03100c0d
014c03151f0b85003f2f012f332b2b2b3130010602151412171616060623
222e02272e0335343e02373e0333321e0201ef5f5d5f5b05010e1d19121a
130c033652381c1f3952330109101c16171c10020562c9fe59d6d7fe5acb
0c110b050206080566d1d8dd7171dcd9d26704060603060a1000>LAAAAA+Calibri AddT42Char 
1 2300 8 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>LAAAAA+Calibri AddT42Char 
1 1826 7 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>LAAAAA+Calibri AddT42Char 
1 5472 20 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>LAAAAA+Calibri AddT42Char 
1 7282 29 <0001007afea701e7058b00210033b90012fff0b30b014d12b8fff0b30f01
4d12b8fff0b50c0d014c1200b8ffc0b60b014d001a0a85003f2f012f2b32
2b2b2b313001140e02070e03232226263637361235340227263e0233321e
0217161201e71c385136030c131a121a1d0d01055c5e5e5e0402101c1715
1c1108026775021971ddd8d16605080602050b110cca01a7d7d601a7c909
100a0603060604cdfe4f>LAAAAA+Calibri AddT42Char 
1 6126 22 <00010035fffa058403bc004500deb90047ffc0403d0f014d38080c014d29
380137080c014d252e01262101262001261f01261e01261d01271c012804
012903013a3b013b3a013b2d013c2c01102015014d10b8ffe0b310014d10
b8ffe0400a0d014d10200c014d100fb8ffe0b310014d0fb8ffe0400c0d01
4d0f200c014d0f414910b8ffe040200f014d3f104f106f107f1004104012
164810334925493a902c012c200f014d2cb8ffc04010131648672c772c02
452c012c174c094c003f3fd55d5d2b2b5dc43f3fcd2b5d2b3f012f2b2b2b
2f2b2b2b2b3130005d5d5d5d015d5d5d5d5d5d5d5d5d2b5d2b2b01140607
010e0323222e0227032707030e0323222e022701262635343e0233321e02
17131737133e0333321e0217131737133e0333321e0205840405fef7030d
17281e1f2a190c03bd0202af030d1a291e1f27190c03fef9050408132017
1c22120803d90202c70209121f19181f120802d70201d6020913211a181d
1107039f07140ffca90b0e080304080e0a028d0909fd730b0e080304080e
0a03570f1407090b070203070d09fd1a090902e6090d070303070c08fd18
090902e6090d070302080a00>LAAAAA+Calibri AddT42Char 
1 2806 10 <00010099fffa037c057100340095400c3f3601293101314012014d31b8ff
d0b40f10014c31b8ffe0b30d014d31b8ffeab30c014d31b8ffe0b30b014d
31bb02270022000cfff0b40f10014c0cb8fff0b30d014d0cb8fff6b30c01
4d0cb8ffe8b30b014d0cb801f8401a162d2d00400f014d00400c014d0016
220b0528491c46114c054c003f3f3f3f123939012fc42b2b392f10f12b2b
2b2b32e02b2b2b2b2b31305d5d25140e0223222e02270111140e0223222e
023511343e0233321e021511013e0333321e021514060701011616037c08
13221a1b23180f06fe840812201918201307071320181920120801540812
192218192215090d0ffeba016e0d0b1a080c080403070d0901f2fe0d080b
080404080b080538080c080404080c08fcd201760a0d090303070b090c18
10febafe25111500>LAAAAA+Calibri AddT42Char 
1 3114 11 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>LAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>LAAAAA+Calibri AddT42Char 
LAAAAA+Calibri /CharStrings get begin
/g1 1 def
/g35 35 def
/g31 31 def
/g25 25 def
/g30 30 def
/g15 15 def
/g32 32 def
/g34 34 def
/g5 5 def
/g16 16 def
/g9 9 def
/g21 21 def
/g6 6 def
/g13 13 def
/g17 17 def
/g4 4 def
/g18 18 def
/g14 14 def
/g28 28 def
/g8 8 def
/g7 7 def
/g20 20 def
/g29 29 def
/g22 22 def
/g10 10 def
/g11 11 def
end
LAAAAA+Calibri /Encoding get
dup 33 /g1 put
dup 34 /g35 put
dup 35 /g31 put
dup 36 /g25 put
dup 37 /g30 put
dup 38 /g15 put
dup 39 /g32 put
dup 40 /g34 put
dup 41 /g5 put
dup 42 /g16 put
dup 43 /g9 put
dup 44 /g21 put
dup 45 /g6 put
dup 46 /g13 put
dup 47 /g17 put
dup 48 /g4 put
dup 49 /g18 put
dup 50 /g14 put
dup 51 /g28 put
dup 52 /g8 put
dup 53 /g7 put
dup 54 /g20 put
dup 55 /g29 put
dup 56 /g22 put
dup 57 /g10 put
dup 58 /g11 put
pop
end
%ADOEndSubsetFont
/ZHYQFF+Calibri /LAAAAA+Calibri findfont ct_VMDictPut
/ZHYQFF+Calibri*1 
[33{/.notdef}rp /g1 /g35 /g31 /g25 /g30 /g15 /g32 
/g34 /g5 /g16 /g9 /g21 /g6 /g13 /g17 
/g4 /g18 /g14 /g28 /g8 /g7 /g20 /g29 
/g22 /g10 /g11 197{/.notdef}rp]
ZHYQFF+Calibri nf
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
233.103 109.894 mo
(!"!#$%!)
[4.05867 8.93956 4.05867 9.09758 4.53079 9.0976 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
215.152 130.834 mo
(\000\004)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
233.103 130.834 mo
(!"!%$%!)
[4.05867 8.93956 4.05867 9.09758 4.53079 9.0976 0 ]xsh
215.152 152.77 mo
(!&!!"!#$%!)
[4.05865 9.4313 4.05865 4.05867 8.93956 4.05867 9.09758 4.53079 9.0976 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
446.551 109.894 mo
(\000\003)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
464.501 109.894 mo
(!"!%$#'\(!)
[4.05865 8.93958 4.05865 9.0976 4.53079 9.0976 9.09756 9.0976 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
446.551 130.834 mo
(\000\004)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
464.501 130.834 mo
(!"!%$%!)
[4.05865 8.93958 4.05865 9.0976 4.53079 9.0976 0 ]xsh
446.551 152.77 mo
(!&!!"!%$#!)
[4.05865 9.4313 4.05865 4.05865 8.93958 4.05865 9.0976 4.53079 9.0976 0 ]xsh
115.375 73.9243 mo
(\)*+,-.!/-012.!34+54!&*-//6*-7)
[9.43129 6.25408 4.11801 8.10297 8.92879 9.4313 4.06404 7.02611 8.9288 7.58255 10.006 9.46718 
9.4313 4.06406 5.44618 9.4313 4.11801 8.44397 9.4313 4.06403 9.4313 6.25406 8.9288 7.02609 
7.02609 9.4313 6.25409 8.92877 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
331.873 73.9243 mo
(\000\001)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
391.022 74.0361 mo
(82*9+.5!/-012.!3:28!&*-//6*-7)
[12.8312 9.47437 6.26123 8.16412 4.12518 9.43848 8.45117 4.05325 7.01535 8.93597 7.58972 9.99518 
9.47437 9.43848 4.05328 5.43539 4.12518 9.47437 12.8313 4.05322 9.43848 6.26129 8.93597 7.01532 
7.01532 9.43848 6.26129 8.93597 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
614.944 74.0361 mo
(\000\001)sh
.721279 .438239 .0234379 0 cmyk
%ADOBeginSubsetFont: LAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQFF+Calibri gcheck setglobal} if
1 572 3 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>ZHYQFF+Calibri AddT42Char 
1 3248 12 <00010099fffa05d003ca005000ea401b12100b014d13180b014d26100b0c
014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b014d13b8
fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8401e1e16
0d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f10014c0ab801
f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27b8fff0b3
10014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200100106b2
4b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f1239393f
ed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b2b2b2b39
31305d002b2b2b2b25140e0223222e023511342e022322060711140e0223
222e023511342e022322060711140e0223222e023511343e0233321e0215
15363633321e02173e0333321e021505d00812201819201308142c442e39
73450813201817211307162c432e397444081220191820130706121c1716
1d10074c8f4938594430102d514b47245776491f19080b080404080b0802
23395e44245855fd8b080b080404080b080223395e44245855fd8b080b08
0404080b080384080b090303090b0877554f1a2f412831442a133d66894c
>ZHYQFF+Calibri AddT42Char 
ZHYQFF+Calibri /CharStrings get begin
/g3 3 def
/g12 12 def
end
ZHYQFF+Calibri /Encoding get
dup 59 /g3 put
dup 60 /g12 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQFF+Calibri*1 
[33{/.notdef}rp /g1 /g35 /g31 /g25 /g30 /g15 /g32 
/g34 /g5 /g16 /g9 /g21 /g6 /g13 /g17 
/g4 /g18 /g14 /g28 /g8 /g7 /g20 /g29 
/g22 /g10 /g11 /g3 /g12 195{/.notdef}rp]
ZHYQFF+Calibri nf
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
321.502 164.103 mo
(\)+;&4*;5<)
[9.43127 4.11981 8.59854 9.4313 9.4313 6.25766 8.59857 8.44937 0 ]xsh
.630945 .325231 .0310369 0 cmyk
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
400.16 164.103 mo
(\000\001)sh
78.1173 80.6868 mo
78.1174 170.753 li
.75021 .679683 .670222 .90164 cmyk
[203200 76200 ] 0 dsh
gsave
[7.85254e-05 0 0 7.85129e-05 78.1173 80.6868 ]ct
@
grestore newpath
644.946 81.4958 mo
644.946 171.562 li
gsave
[7.85254e-05 0 0 7.85129e-05 644.946 81.4958 ]ct
@
grestore newpath
%ADOBeginSubsetFont: LAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQFF+Calibri gcheck setglobal} if
1 6558 23 <00010029fffa034b03bc002f0086b90031ffc040110b014d2f080b014d2e
100b014d3b2e0118b8fff0b60b014d34180117b8fff8b30b014d16b8fff0
b60b014d34160109b8fff0402a0b014d00080b014d3c0001382301360b01
0b2010014d0b200c014d0b0b31302949230b111d49114c054c003f3f3f12
39393f111201392f2b2b3130005d5d015d2b2b5d2b2b5d2b5d2b2b2b2516
14060623222e022703030e0323222626363701012626363633321e021713
133e033332161606070103430813271f1e23150b04d8d7040b15221c1d25
1101090118fef708011327201d23140a04cdd0040a111f1b1d25120209fe
f92c0e130c0503070b070165fe9b070b0703050c130e01b701a70e130d04
03060a07feb1014f060a0703040b140ffe5e>ZHYQFF+Calibri AddT42Char 
1 7066 27 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>ZHYQFF+Calibri AddT42Char 
1 322 2 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>ZHYQFF+Calibri AddT42Char 
1 6986 26 <00010001fee7030a05be00150008b11005002f2f3130170e0323222e0237
013e0333321e0207a8040d141d151921120406025d040d131e1519201204
05f10d0f0804070d130d067b0d0f0903070c140d>ZHYQFF+Calibri AddT42Char 
1 8486 33 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>ZHYQFF+Calibri AddT42Char 
ZHYQFF+Calibri /CharStrings get begin
/g23 23 def
/g27 27 def
/g2 2 def
/g26 26 def
/g33 33 def
end
ZHYQFF+Calibri /Encoding get
dup 61 /g23 put
dup 62 /g27 put
dup 63 /g2 put
dup 64 /g26 put
dup 65 /g33 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQFF+Calibri*1 
[33{/.notdef}rp /g1 /g35 /g31 /g25 /g30 /g15 /g32 
/g34 /g5 /g16 /g9 /g21 /g6 /g13 /g17 
/g4 /g18 /g14 /g28 /g8 /g7 /g20 /g29 
/g22 /g10 /g11 /g3 /g12 /g23 /g27 /g2 
/g26 /g33 190{/.notdef}rp]
ZHYQFF+Calibri nf
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
44.4254 190.979 mo
(=!"!>%$\(%\()
[7.77451 4.05866 8.93957 4.05866 5.49657 9.09759 4.53079 9.09759 9.09759 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+PMingLiU-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/JAAAAA+PMingLiU 1 GetGlyphDirectory
2 <001C60D8A8C9B5EE310DC78E9A922E2FB383024E689E980C6008B4EFDBD15
B956951A9FF6D6DB628F1B500D9745D55600B7EDBD79ED6617E92E9224D40CC7
DF6E51D54F0BDFBC34DEC513E5915EF45A4356FFE2EB81B6F0FF2706A078ECD4
3F842EDF5B8097B6D55F2C5C48286B8D11DF87DA2AF26F58EE8AABCE0D9BA3F6
EBA0032B6B57A9778ABB75A22A428ACF2D052B87BEBFE12C660B2085C6D9E555
81131CD83C9B3605462F5A1BC6E9C6B22CB8B5852E8E2FDA81972E002CEEF3C3
A> |
!
end
end end
%ADOEndSubsetFont
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
115.677 190.979 mo
(\000\001)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
608.721 190.393 mo
(=!"!%$\(%\()
[7.77448 4.05865 8.93958 4.05865 9.0976 4.53082 9.0976 9.09753 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
674.477 190.393 mo
(\000\001)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
79.0211 50.8238 mo
(3)sh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
84.4643 50.8238 mo
(\000\002)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
102.415 50.8238 mo
(!"!?)
[4.05866 8.93957 4.05866 0 ]xsh
ZHYQFF+Calibri*1 [11.9673 0 0 -11.9654 0 0 ]msf
129.044 55.3109 mo
(&!)
[6.28754 0 ]xsh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
138.036 50.8238 mo
(@!?)
[6.93268 4.06046 0 ]xsh
ZHYQFF+Calibri*1 [11.9673 0 0 -11.9654 0 0 ]msf
158.599 55.3109 mo
(,)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
164.005 50.8238 mo
(!"!#$A7)
[4.05865 8.93958 4.05867 9.09758 4.53079 9.0976 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
209.232 50.8238 mo
(\000\001)sh
ZHYQFF+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
338.239 190.306 mo
(=!"!%$%)
[7.77451 4.05865 8.93958 4.05865 9.0976 4.53079 0 ]xsh
ZHYQFE+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
385.799 190.306 mo
(\000\001)sh
360 165.034 mo
360.112 172.815 li
.630945 .325231 .0310369 0 cmyk
[76200 25400 ] 0 dsh
gsave
[7.85254e-05 0 0 7.85129e-05 360 165.034 ]ct
@
grestore newpath
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ZHYQFE+PMingLiU-Identity-H uf
/ZHYQFE+PMingLiU /CIDFont ur
/ZHYQFF+Calibri*1 uf
/ZHYQFF+Calibri uf
/LAAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 763 3879 a Ff(Figure)27 b(2:)36 b(Initial)28
b(condition)g(of)f(one-dimensional)f(So)r(d)i(sho)r(c)n(k)f(tub)r(e)77
4139 y Fp(When)32 b(the)f(diaphragm)h(is)g(remo)m(v)m(ed,)h(there)f
(will)g(b)s(e)f(a)g(righ)m(t-running)h(sho)s(c)m(k)g(in)g(w)m(orking)g
(section;)-70 4295 y(mean)m(while,)40 b(there)e(will)f(b)s(e)g(a)f
(rarefaction)h(w)m(a)m(v)m(e)h(in)f(the)g(driv)m(en)i(section)e(as)g
(describ)s(ed)i(in)e(Figure)3754 4295 y
SDict begin H.S end
 3754 4295 a Fp(3)3803
4231 y
SDict begin H.R end
 3803 4231 a 3803 4295 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (figure.caption.4) cvn H.B /ANN pdfmark end
 3803 4295 a Fp(.)-70 4452
y(The)d(CESE)g(metho)s(d)f(help)g(us)g(to)f(calculate)i(the)f(status)g
(\()p Fo(\032;)17 b(\027)q(;)g(p)p Fp(\))32 b(of)g(di\013eren)m(t)i
(regions.)77 4608 y(The)23 b(tub)s(e)g(is)f(in\014nitely)i(long)f(and)f
(w)m(e)h(fo)s(cus)g(on)f(the)h(region)f(b)s(et)m(w)m(een)j(-0.505)c
(and)h(0.505.)40 b(According)-70 4765 y(to)35 b(CESE)i(metho)s(d,)g(w)m
(e)f(design)h(a)e(mesh)h(to)f(calculate)i(the)e(gas)h(status)g(in)g
(di\013eren)m(t)g(regions)g(as)g(time)-70 4921 y(go)s(es)44
b(on.)77 b(The)44 b(size)h(of)e(eac)m(h)i(grid)e(elemen)m(t)j(or)d
(so-called)h(conserv)-5 b(ation)45 b(elemen)m(t)g(is)g(\()p
Fo(dx=)p Fp(2)p Fo(;)17 b(dt=)p Fp(2\),)-70 5078 y(where)39
b Fo(dx)e Fp(is)g(0.01)g(and)g Fo(dt)g Fp(is)h(0.004.)56
b(The)38 b(whole)g(one-dimensional)g(space)h(\(-0.505)p
Fk(\030)p Fp(0.505\))c(is)j(then)-70 5234 y(divided)e(in)m(to)f(101)f
(segmen)m(ts)i(b)m(y)g(102)d(p)s(oin)m(ts)j(or)e(so-called)h(solution)g
(elemen)m(ts.)51 b(Figure)3330 5234 y
SDict begin H.S end
 3330 5234 a Fp(4)3378
5170 y
SDict begin H.R end
 3378 5170 a 3378 5234 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (figure.caption.5) cvn H.B /ANN pdfmark end
 3378 5234 a 35 w Fp(sho)m(ws)36
b(the)-70 5391 y(con\014guration)d(of)f(the)h(mesh.)1856
5695 y(7)p eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -78 -269 a -70 -14
a
SDict begin H.S end
 -70 -14 a -70 -14 a
SDict begin 14.5 H.A end
 -70 -14 a -70 -14 a
SDict begin [/View [/XYZ H.V]/Dest (figure.caption.4) cvn /DEST pdfmark
end
 -70 -14 a 320
1026 a @beginspecial 0 @llx 0 @lly 720 @urx 226 @ury
3744 @rwi @setspecial
%%BeginDocument: diagram/sod_shock_tube_1D_no_diaphragm.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: sod_shock_tube_1D_no_diaphragm.pdf
%%Creator: (Adobe Acrobat 15.10.0)
%%For: ntuhep520
%%CreationDate: 2016/1/21, 下午7:57
%%BoundingBox: 0 0 720 226
%%HiResBoundingBox: 0 0 720 226
%%CropBox: 0 0 720 226
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 605 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-01-21T11:56:58Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2016-01-21T11:56:58Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11.1 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -226 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 226 li
720 226 li
720 0 li
cp
clp
.981818 0 mo
719.018 0 li
719.018 226.096 li
.981818 226.096 li
cp
false sop
0 0 0 0 cmyk
ef
78.9046 81.3841 mo
645.733 81.3842 li
.750179 .679652 .670191 .901488 cmyk
25400 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[7.85254e-05 0 0 7.85129e-05 78.9046 81.3841 ]ct
@
grestore newpath
78.1173 170.753 mo
644.946 170.753 li
gsave
[7.85254e-05 0 0 7.85129e-05 78.1173 170.753 ]ct
@
grestore newpath
78.1173 80.6868 mo
78.1174 170.753 li
[203200 76200 ] 0 dsh
gsave
[7.85254e-05 0 0 7.85129e-05 78.1173 80.6868 ]ct
@
grestore newpath
644.946 81.4958 mo
644.946 171.562 li
gsave
[7.85254e-05 0 0 7.85129e-05 644.946 81.4958 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000051c6670
676d00000000000005d80000091a676c7966000000000000345c00001db4
686561640000000000000ef400000036686865610000000000000f2c0000
0024686d74780000000000000f500000007c6c6f63610000000000000fcc
000000406d617870000000000000100c000000206e616d65000000000000
102c0000002070726570000000000000104c000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d00000001000000059eb88df7cb11
5f0f3cf50019080000000000bbeb7ccc00000000c787a88bfbfafd8b09ec
07b600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec00010000000000000000000000000000001f040e000001cf000003d5
005c0362005a0434006003fb005d027100250434009901d6008503a30099
043400990438005a0434009902ca00990321005102ae0021047500210475
002104340094039d002205b8003503770029039f002201d6000002050097
02730045026d0085026d007a040e0048040e006503fc005e000000a100a1
015001dc027303140397041b0494052e05bf064d06e4075d0823089f08ab
092109b10a680b400bd00c350c590c7b0c9e0ce70d370dea0e9f0eda0001
0000001f0120001000c3000700020010002f006500001190018200040001
0000000100120001000000000006000e000046434f49464c2b43616c6962
7269b2090320b80284b40918014a20b80283b40918014a20b80282b40918
014a20b80281b40918014a20b80280b40918014a20b8027fb40918014a20
b8027eb40918014a20b8027db40918014a20b8027cb40918014a20b8027b
b40918014a20b8027ab40918014a20b80279b40918014a20b80278b40918
014a20b80277b40918014a20b80276b40918014a20b80275b40918014a20
b80274b40918014a20b80273b40918014a20b80271b40918014a20b80270
b40918014a20b8026fb40918014a20b8026eb40918014a20b8026db40918
014a20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20
b80269b40918014a20b80268b40918014a20b80267b40918014a20b80266
b40918014a20b80265b40918014a20b80264b40918014a20b80263b40918
014a20b80262b40918014a20b80261b40918014a20b80260b40918014a20
b8025fb40918014a20b8025eb40918014a20b8025db40918014a20b8025c
b40918014a20b8025bb40918014a20b8025ab40918014a20b80259b40918
014a20b80258b40918014a20b80257b40918014a20b80256b40918014a20
b80255b40918014a20b80254b40918014a20b80253b40918014a20b80252
b40918014a20b80251b40918014a20b80250b40918014a20b8024fb40918
014a20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20
b8024bb40918014a20b8024ab40918014a20b80249b40918014a20b80248
b40918014a20b80247b40918014a20b80246b40918014a20b80245b40918
014a20b80244b40918014a20b80243b40918014a20b80242b40918014a20
b80241b40918014a20b80240b40918014a20b8023fb40918014a20b8023e
b40918014a20b8023db40918014a20b8023cb40918014a20b8023bb40918
014a20b8023ab40918014a20b80239b40918014a20b80238b40918014a20
b80237b40918014a20b80236b40918014a20b80235b40918014a20b80234
b40918014a20b80233b40918014a20b80232b40918014a20b80231b40918
014a20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20
b8022db40918014a20b8022cb40918014a20b8022bb40918014a20b8022a
b40918014a20b80229b40918014a20b80228b40918014a20b80227b40918
014a20b80226b40918014a20b80225b40918014a20b80224b40918014a20
b80223b40918014a20b80222b40918014a20b80221b40918014a20b80220
b40918014a20b8021fb40918014a20b8021eb40918014a20b8021db40918
014a20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20
b80219b40918014a20b80218b40918014a20b80217b40918014a20b80216
b40918014a20b80215b40918014a20b80214b40918014a20b80213b40918
014a20b80212b40918014a20b80211b40918014a20b80210b40918014a20
b8020fb40918014a20b8020eb40918014a20b8020db40918014a20b8020c
b40918014a20b8020bb40918014a20b8020ab40918014a20b80209b40918
014a20b80208b40918014a20b80207b40918014a20b80206b40918014a20
b80205b40918014a20b80204b40918014a20b80203b40918014a20b80202
b40918014a20b80201b40918014a20b80200b40918014a20b801ffb40918
014a20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20
b801fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8
b40918014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918
014a20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20
b801f1b40918014a20b801f0b40918014a20b801efb40918014a20b801ee
b40918014a20b801edb40918014a20b801ecb40918014a20b801ebb40918
014a20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20
b801e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4
b40918014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918
014a20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20
b801ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801da
b40918014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918
014a20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20
b801d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0
b40918014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918
014a20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20
b801c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6
b40918014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918
014a20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20
b801bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bc
b40918014a20b801bbb40918014a20b801bab40918014a20b801b9b40918
014a20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20
b801b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2
b40918014a20b801b1b40918014a20b801b0b40918014a20b801afb40918
014a20b801aeb40918014a20b801adb40918014a20b801acb40918014a20
b801abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8
b40918014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918
014a20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20
b801a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019e
b40918014a20b8019db40918014a20b8019cb40918014a20b8019bb40918
014a20b8019ab40918014a20b80199b40918014a20b80198b40918014a20
b80197b40918014a20b80196b40918014a20b80195b40918014a20b80194
b40918014a20b80193b40918014a20b80192b40918014a20b80191b40918
014a20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20
b8018db40918014a20b8018cb40918014a20b8018bb40918014a20b8018a
b40918014a20b80189b40918014a20b80188b40918014a20b80187b40918
014a20b80186b40918014a20b80185b40918014a20b80184b40918014a20
b80183b40918014a20b80182b40918014a20b80181b40918014a20b80180
b40918014a20b8017fb40918014a20b8017eb40918014a20b8017db40918
014a20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20
b80179b40918014a20b80178b40918014a20b80177b40918014a20b80176
b40918014a20b80175b40918014a20b80174b40918014a20b80173b40918
014a20b80172b40918014a20b80171b40918014a20b80170b40918014a20
b8016fb40918014a20b8016eb40918014a20b8016db40918014a20b8016c
b40918014a20b8016bb40918014a20b8016ab40918014a20b80169b40918
014a20b80168b40918014a20b80167b40918014a20b80166b40918014a20
b80165b40918014a20b80164b40918014a20b80163b40918014a20b80162
b40918014a20b80161b40918014a20b80160b40918014a20b8015fb40918
014a20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20
b8015bb40918014a20b8015ab40918014a20b80159b40918014a20b80158
b40918014a20b80157b40918014a20b80156b40918014a20b80155b40918
014a20b80154b40918014a20b80153b40918014a20b80152b40918014a20
b80150b40918014a20b8014fb40918014a20b8014eb40918014a20b8014c
b40918014a20b8014bb40918014a20b8014ab40918014a20b80149b40918
014a20b80148b40918014a20b80147b40918014a20b80146b40918014a20
b80145b40918014a20b80144b40918014a20b80143b30918014ab80284b2
1e3e1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e
1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8
027bb21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277
b21d431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d
431fb80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421f
b8026eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb802
6ab21c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b2
1c441fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c45
1fb80261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8
025db21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259
b21c451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c
451fb80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451f
b80250b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb802
4cb21c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b2
1b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c
1fb80243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8
023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023b
b21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b
4c1fb80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1f
b80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb802
2eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab2
1b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b49
1fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb8
0221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021d
b21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a
4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1f
b80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb802
10b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb2
1a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f
1fb80207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb8
0203b219501fb80202b219511fb80201b219511fb80200b219511fb801ff
b219511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219
511fb801fab219501fb801f9b219511fb801f8b219511fb801f7b219511f
b801f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801
f2b218541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb2
18541fb801edb218541fb801ecb218531fb801ebb218531fb801eab21854
1fb801e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb8
01e5b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1
b218541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218
541fb801dcb218541fb801dbb218541fb801dab218531fb801d9b218541f
b801d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801
d4b217571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b2
17561fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb21757
1fb801cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb8
01c7b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3
b217561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217
561fb801beb217561fb801bdb217571fb801bcb217571fb801bbb217571f
b801bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801
b6b217571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2
165b1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b
1fb801adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb8
01a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5
b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b216
5b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1f
b8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb801
98b2163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2
163e1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b
1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8
018bb2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187
b2165b1fb80186b215611fb80185b215621fb80184b215621fb80183b215
661fb80182b215661fb80181b215551fb80180b215451fb8017fb215361f
b8017eb215361fb8017db215611fb8017cb215621fb8017bb215621fb801
7ab215641fb80179b215661fb80178b215661fb80177b215661fb80176b2
15661fb80175b215661fb80174b215661fb80173b215451fb80172b21562
1fb80171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8
016db215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169
b215621fb80168b215621fb80167b215611fb80166b215641fb80165b215
641fb80164b215661fb80163b215661fb80162b215661fb80161b215661f
b80160b215661fb8015fb215661fb8015eb215551fb8015db215451fb801
5cb215451fb8015bb215361fb8015ab215611fb80159b215621fb80158b2
15621fb80157b215631fb80156b215641fb80155b215661fb80154b21566
1fb80153b215661fb80152b215661fb80151b214401fb80150b214551fb8
014fb214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014b
b214401fb8014ab214411fb80149b214401fb80148b214401fb80147b214
411fb80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801f
b80142b212461fb80141b212461fb80140b212461fb8013fb212461fb801
3eb212441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2
115b1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a
1fb80135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb8
0131b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012d
b211591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b211
5b1fb80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561f
b80124b211561fb80123b211571fb80122b211581fb80121b211591fb801
20b2115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2
115b1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e
1fb80117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb8
0113b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010f
b2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb210
5e1fb8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1f
b80106b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb801
02b2105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f
641ffc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641f
f50f641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f
641fed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641f
e60e671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e
681fde0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1f
d70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d
2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1f
c80d6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d
311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c
741fb90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741f
b20c741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b
7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1f
a30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b
791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f
940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0a
a51f8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d55
7eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a
557955775578ab7755ba028600660285403c5576ab755504751475747503
f47501ab750144750130750102007510752075030c7455725573ab725500
7250728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc040
7c720d104671556f5570ab6f556e666d556a03251f6938675568ab675566
38645565ab645563386255613860555f385d555eab5d555c385a555bab5a
55593858555703251f5638545555ab54555338515552ab51554f384e554e
03251f4d384b554cab4b554a38485549ab4855473846554503381f001c10
1c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb0
1bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf1802
4018292c460f17cf17df17ef1704134017292e460016101620160315b8ff
c0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326
460f15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f
0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d
020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f
0b4f0b02400b3f4346400b2d30460003012001010001100120010308b8ff
c0b301151f46b80100b316010501b80190b154532b2b4bb80800524bb008
505bb00188b02553b00188b040515ab00688b000555a5b58b101018e59b1
01024354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d59
4bb0805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b74
5e732b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e73
2b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f737373
73742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff0284006402830064
028200640281006402800064027f0064027e0064027d0064027c0064027b
0064027a0064027900640278006402770064027600640275006402740064
027300640271006402700064026f0064026e0064026d0064026c0064026b
0064026a0064026900640268006402670064026600640265006402640064
02630064026200640261006402600064025f0064025e0064025d0064025c
0064025b0064025a00640259006402580064025700640256006402550064
0254006402530064025200640251006402500064024f0064024e0064024d
0064024c0064024b0064024a006402490064024800640247006402460064
024500640244006402430064024200640241006402400064023f0064023e
0064023d0064023c0064023b0064023a0064023900640238006402370064
02360064023500640234006402330064023200640231006402300064022f
0064022e0064022d0064022c0064022b0064022a00640229006402280064
022700640226006402250064022400640223006402220064022100640220
0064021f0064021e0064021d0064021c0064021b0064021a006402190064
021800640217006402160064021500640214006402130064021200640211
006402100064020f0064020e0064020d0064020c0064020b0064020a0064
0209006402080064020700640206006402050064020441ff006402030064
02020064020100640200006401ff006401fe006401fd006401fc006401fb
006401fa006401f9006401f8006401f7006401f6006401f5006401f40064
01f3006401f2006401f1006401f0006401ef006401ee006401ed006401ec
006401eb006401ea006401e9006401e8006401e7006401e6006401e50064
01e4006401e3006401e2006401e1006401e0006401df006401de006401dd
006401dc006401db006401da006401d9006401d8006401d7006401d60064
01d5006401d4006401d3006401d2006401d1006401d0006401cf006401ce
006401cd006401cc006401cb006401ca006401c9006401c8006401c70064
01c6006401c5006401c4006401c3006401c2006401c1006401c0006401bf
006401be006401bd006401bc006401bb006401ba006401b9006401b80064
01b7006401b6006401b5006401b4006401b3006401b2006401b1006401b0
006401af006401ae006401ad006401ac006401ab006401aa006401a90064
01a8006401a7006401a6006401a5006401a4006401a3006401a2006401a1
006401a00064019f0064019e0064019d0064019c0064019b0064019a0064
019900640198006401970064019600640195006401940064019300640192
00640191006401900064018f0064018e0064018d0064018c0064018b0064
018a00640189006401880064018700640186006401850064418001840064
01830064018200640181006401800064017f0064017e0064017d0064017c
0064017b0064017a00640179006401780064017700640176006401750064
0174006401730064017200640171006401700064016f0064016e0064016d
0064016c0064016b0064016a006401690064016800640167006401660064
016500640164006401630064016200640161006401600064015f0064015e
0064015d0064015c0064015b0064015a0064015900640158006401570064
015600640155006401540064015300640152006401500064014f0064014e
0064014c0064014b0064014a006401490064014800640147006401460064
0145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[7605 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 5760 21 <00010029fffa034b03bc002f0086b90031ffc040110b014d2f080b014d2e
100b014d3b2e0118b8fff0b60b014d34180117b8fff8b30b014d16b8fff0
b60b014d34160109b8fff0402a0b014d00080b014d3c0001382301360b01
0b2010014d0b200c014d0b0b31302949230b111d49114c054c003f3f3f12
39393f111201392f2b2b3130005d5d015d2b2b5d2b2b5d2b5d2b2b2b2516
14060623222e022703030e0323222626363701012626363633321e021713
133e033332161606070103430813271f1e23150b04d8d7040b15221c1d25
1101090118fef708011327201d23140a04cdd0040a111f1b1d25120209fe
f92c0e130c0503070b070165fe9b070b0703050c130e01b701a70e130d04
03060a07feb1014f060a0703040b140ffe5e>KAAAAA+Calibri AddT42Char 

1 0 1 <> KAAAAA+Calibri AddT42Char 
1 7486 30 <0002005e0138039d0349000d001b001db4000e07150bbc010a0004001101
0a0018002fedd6ed012f33cd323130011406232122263534363321321611
14062321222635343633213216039d170ffd0c0f16141102f41214170ffd
0c0f16141102f412140303281f1f28242222fe57281e1e2825222200>KAAAAA+Calibri AddT42Char 
1 6390 25 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>KAAAAA+Calibri AddT42Char 
1 6766 28 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>KAAAAA+Calibri AddT42Char 
1 6322 24 <00010097fff7016e00e0000b0017b10006b8ffc0b60c014d0609034c003f
cd012f2bc13130251406232226353436333216016e2f3e3c2e2f3e3c2e6d
472f2e45472f2e00>KAAAAA+Calibri AddT42Char 
1 7124 29 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>KAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>KAAAAA+Calibri AddT42Char 
KAAAAA+Calibri /CharStrings get begin
/g21 21 def
/g1 1 def
/g30 30 def
/g25 25 def
/g28 28 def
/g24 24 def
/g29 29 def
end
KAAAAA+Calibri /Encoding get
dup 33 /g21 put
dup 34 /g1 put
dup 35 /g30 put
dup 36 /g25 put
dup 37 /g28 put
dup 38 /g24 put
dup 39 /g29 put
pop
end
%ADOEndSubsetFont
/JGRIKY+Calibri /KAAAAA+Calibri findfont ct_VMDictPut
/JGRIKY+Calibri*1 
[33{/.notdef}rp /g21 /g1 /g30 /g25 /g28 /g24 /g29 
216{/.notdef}rp]
JGRIKY+Calibri nf
JGRIKY+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
44.4254 190.979 mo
(!"#"$%&'%')
[7.77451 4.05866 8.93957 4.05866 5.49657 9.09759 4.53079 9.09759 9.09759 0 ]xsh
%ADOBeginSubsetFont: LAAAAA+PMingLiU-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (LAAAAA+PMingLiU)
%%Title: (LAAAAA+PMingLiU Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /LAAAAA+PMingLiU def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -198 999 801} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 2 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE3100AAC671FFC18DDB3764E95ECE8020311F82848570B
1358F8FCDF8604B> |
1 <001C60D8A8C9B8666C32> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /LAAAAA+PMingLiU-Identity-H /Identity-H 0 [/LAAAAA+PMingLiU] ct_ComposeFont pop end end
%ADOEndSubsetFont
/JGRIKZ+PMingLiU /LAAAAA+PMingLiU-Identity-H findfont ct_VMDictPut
JGRIKZ+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
115.677 190.979 mo
(\000\001)sh
JGRIKY+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
608.721 190.393 mo
(!"#"%&'%')
[7.77448 4.05865 8.93958 4.05865 9.0976 4.53082 9.0976 9.09753 0 ]xsh
JGRIKZ+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
674.477 190.393 mo
(\000\001)sh
JGRIKY+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
338.239 190.306 mo
(!"#"%&%)
[7.77451 4.05865 8.93958 4.05865 9.0976 4.53079 0 ]xsh
JGRIKZ+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
385.799 190.306 mo
(\000\001)sh
404.817 82.1979 mo
404.817 170.143 li
.861418 .737209 0 0 cmyk
19050 lw
[152400 57150 19050 57150 ] 0 dsh
gsave
[7.85254e-05 0 0 7.85129e-05 404.817 82.1979 ]ct
@
grestore newpath
511.091 82.0911 mo
511.091 170.015 li
.153231 .718715 .593011 .0224918 cmyk
34290 lw
[] 0 dsh
gsave
[7.85254e-05 0 0 7.85129e-05 510.193 82.0911 ]ct
@
grestore newpath
508.398 82.0911 mo
508.398 170.015 li
11430 lw
gsave
[7.85254e-05 0 0 7.85129e-05 510.193 82.0911 ]ct
@
grestore newpath
295.985 82.2125 mo
295.985 170.158 li
0 .94284 1 .00030518 cmyk
19050 lw
gsave
[7.85254e-05 0 0 7.85129e-05 295.985 82.2125 ]ct
@
grestore newpath
288.989 82.0911 mo
288.989 170.037 li
gsave
[7.85254e-05 0 0 7.85129e-05 288.989 82.0911 ]ct
@
grestore newpath
276.347 82.2125 mo
276.348 170.158 li
gsave
[7.85254e-05 0 0 7.85129e-05 276.348 82.2125 ]ct
@
grestore newpath
259.519 82.0911 mo
259.519 170.037 li
gsave
[7.85254e-05 0 0 7.85129e-05 259.519 82.0911 ]ct
@
grestore newpath
234.938 82.8078 mo
234.938 170.753 li
gsave
[7.85254e-05 0 0 7.85129e-05 234.938 82.8078 ]ct
@
grestore newpath
234.938 125.687 mo
216.605 125.687 li
25400 lw
gsave
[-7.85254e-05 0 0 7.85129e-05 234.938 125.687 ]ct
@
grestore newpath
214.626 125.687 mo
222.087 130.038 li
222.562 130.315 223.173 130.155 223.45 129.679 cv
223.728 129.203 223.567 128.593 223.092 128.315 cv
218.585 125.687 li
223.092 123.058 li
223.567 122.781 223.728 122.17 223.45 121.694 cv
223.45 121.694 li
223.173 121.219 222.562 121.058 222.087 121.336 cv
cp
ef
404.817 125.687 mo
423.15 125.687 li
.861418 .737209 0 0 cmyk
gsave
[7.85254e-05 0 0 7.85129e-05 404.817 125.687 ]ct
@
grestore newpath
425.129 125.687 mo
417.669 130.038 li
417.193 130.315 416.583 130.155 416.305 129.679 cv
416.027 129.203 416.188 128.593 416.664 128.315 cv
421.171 125.687 li
416.664 123.058 li
416.188 122.781 416.027 122.17 416.305 121.694 cv
416.305 121.694 li
416.583 121.219 417.193 121.058 417.669 121.336 cv
cp
ef
510.193 125.687 mo
528.527 125.687 li
.153231 .718715 .593011 .0224918 cmyk
gsave
[7.85254e-05 0 0 7.85129e-05 510.193 125.687 ]ct
@
grestore newpath
530.506 125.687 mo
523.045 130.038 li
522.57 130.315 521.959 130.155 521.682 129.679 cv
521.404 129.203 521.565 128.593 522.041 128.315 cv
526.547 125.687 li
522.041 123.058 li
521.565 122.781 521.404 122.17 521.682 121.694 cv
521.682 121.694 li
521.959 121.219 522.57 121.058 523.045 121.336 cv
cp
ef
360 162.901 mo
360 171.562 li
.750179 .679652 .670191 .901488 cmyk
19050 lw
gsave
[7.85254e-05 0 0 7.85129e-05 360 162.901 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JGRIKY+Calibri gcheck setglobal} if
1 1254 5 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>JGRIKY+Calibri AddT42Char 
1 3226 12 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>JGRIKY+Calibri AddT42Char 
1 322 2 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>JGRIKY+Calibri AddT42Char 
1 2652 10 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>JGRIKY+Calibri AddT42Char 
1 3770 14 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>JGRIKY+Calibri AddT42Char 
1 2102 8 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>JGRIKY+Calibri AddT42Char 
1 2942 11 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>JGRIKY+Calibri AddT42Char 
1 5328 20 <00010035fffa058403bc004500deb90047ffc0403d0f014d38080c014d29
380137080c014d252e01262101262001261f01261e01261d01271c012804
012903013a3b013b3a013b2d013c2c01102015014d10b8ffe0b310014d10
b8ffe0400a0d014d10200c014d100fb8ffe0b310014d0fb8ffe0400c0d01
4d0f200c014d0f414910b8ffe040200f014d3f104f106f107f1004104012
164810334925493a902c012c200f014d2cb8ffc04010131648672c772c02
452c012c174c094c003f3fd55d5d2b2b5dc43f3fcd2b5d2b3f012f2b2b2b
2f2b2b2b2b3130005d5d5d5d015d5d5d5d5d5d5d5d5d2b5d2b2b01140607
010e0323222e0227032707030e0323222e022701262635343e0233321e02
17131737133e0333321e0217131737133e0333321e0205840405fef7030d
17281e1f2a190c03bd0202af030d1a291e1f27190c03fef9050408132017
1c22120803d90202c70209121f19181f120802d70201d6020913211a181d
1107039f07140ffca90b0e080304080e0a028d0909fd730b0e080304080e
0a03570f1407090b070203070d09fd1a090902e6090d070303070c08fd18
090902e6090d070302080a00>JGRIKY+Calibri AddT42Char 
1 4962 19 <00010022fffa037b03bc002c00e3b90023fff840170b0c014c1f080b0c01
4c251f011e080b0c014c251e0116b8fff0b30b014d15b8fff0b30b014d14
b8ffe8b30b014d13b8ffe8b30b014d12b8ffe8b30b014d11b8fff040370b
014d37110126110127100128050122280b014d3d220124220121280b014d
3f210124210120280b014d3d2001242001270f0176210121b8ffd0400911
1548212013014d21b8ffe8400910014d21200f014d21b8ffe8b30c014d21
b8fff0400c0b014d212849210b1a490b4c003f3f12393f012f2b2b2b2b2b
002b5d31305d5d5d2b5d5d2b5d5d2b015d5d5d5d2b2b2b2b2b2b5d2b5d2b
2b01140e0207010e0323222e0227012e0235343e0233321e021713173713
3e0333321e02037b01020302fecd040d1a281e1e28190e04fece04050108
131f171d23130904fe0403fb020a13211b171e1107039f04090a0c07fca9
0b0e080304080e0a03570c120903080c070203080c09fd1a0c0c02e6090c
080302080b00>JGRIKY+Calibri AddT42Char 
1 6460 26 <00010085fea701f3058b00230022401503100b014d03100f014d03100c0d
014c03151f0b85003f2f012f332b2b2b3130010602151412171616060623
222e02272e0335343e02373e0333321e0201ef5f5d5f5b05010e1d19121a
130c033652381c1f3952330109101c16171c10020562c9fe59d6d7fe5acb
0c110b050206080566d1d8dd7171dcd9d26704060603060a1000>JGRIKY+Calibri AddT42Char 
1 3528 13 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>JGRIKY+Calibri AddT42Char 
1 1576 6 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>JGRIKY+Calibri AddT42Char 
1 672 3 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>JGRIKY+Calibri AddT42Char 
1 4438 17 <00010021ffef03dc04ad0041003db22f4110b801f8b42b1e1e2b0fb801f9
400c03352b4148102bed3b354814b80104b3254d094c003f3fed3fcded32
3f012f32dde112392f10e1322f31300132161511140e0223222e02351121
11141633323e0233321e0215140e0423222e02351123222635343e023333
35343e0233321e02151503a81e160813201719201308fe2f374717241c14
0805090504081020292e174664401d7e0f1205080d087d07132018192012
0803b71b1afc97080b080404080b080315fe0a5d5f090a09050e18121d21
110e0906254b734e020e2024131a1107d6070c090404090c07d6>JGRIKY+Calibri AddT42Char 
1 6250 23 <0002000003b70151052f000b000c0014b900000271b40609030c48003fde
cd012fe131300114062322263534363332160101512c3b3a2b2c3b3a2bfe
af04cd3a2a29393a2a29feb1>JGRIKY+Calibri AddT42Char 
1 4414 16 <ffff0021ffef03ef052f02260011000000070017029e0000>JGRIKY+Calibri AddT42Char 
1 6606 27 <0001007afea701e7058b00210033b90012fff0b30b014d12b8fff0b30f01
4d12b8fff0b50c0d014c1200b8ffc0b60b014d001a0a85003f2f012f2b32
2b2b2b313001140e02070e03232226263637361235340227263e0233321e
0217161201e71c385136030c131a121a1d0d01055c5e5e5e0402101c1715
1c1108026775021971ddd8d16605080602050b110cca01a7d7d601a7c909
100a0603060604cdfe4f>JGRIKY+Calibri AddT42Char 
1 4166 15 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>JGRIKY+Calibri AddT42Char 
1 952 4 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>JGRIKY+Calibri AddT42Char 
1 4674 18 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>JGRIKY+Calibri AddT42Char 
1 6048 22 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>JGRIKY+Calibri AddT42Char 
1 1838 7 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>JGRIKY+Calibri AddT42Char 
1 2344 9 <00010099fffa037c057100340095400c3f3601293101314012014d31b8ff
d0b40f10014c31b8ffe0b30d014d31b8ffeab30c014d31b8ffe0b30b014d
31bb02270022000cfff0b40f10014c0cb8fff0b30d014d0cb8fff6b30c01
4d0cb8ffe8b30b014d0cb801f8401a162d2d00400f014d00400c014d0016
220b0528491c46114c054c003f3f3f3f123939012fc42b2b392f10f12b2b
2b2b32e02b2b2b2b2b31305d5d25140e0223222e02270111140e0223222e
023511343e0233321e021511013e0333321e021514060701011616037c08
13221a1b23180f06fe840812201918201307071320181920120801540812
192218192215090d0ffeba016e0d0b1a080c080403070d0901f2fe0d080b
080404080b080538080c080404080c08fcd201760a0d090303070b090c18
10febafe25111500>JGRIKY+Calibri AddT42Char 
JGRIKY+Calibri /CharStrings get begin
/g5 5 def
/g12 12 def
/g2 2 def
/g10 10 def
/g14 14 def
/g8 8 def
/g11 11 def
/g20 20 def
/g19 19 def
/g26 26 def
/g13 13 def
/g6 6 def
/g3 3 def
/g16 16 def
/g27 27 def
/g15 15 def
/g4 4 def
/g18 18 def
/g22 22 def
/g7 7 def
/g9 9 def
end
JGRIKY+Calibri /Encoding get
dup 40 /g5 put
dup 41 /g12 put
dup 42 /g2 put
dup 43 /g10 put
dup 44 /g14 put
dup 45 /g8 put
dup 46 /g11 put
dup 47 /g20 put
dup 48 /g19 put
dup 49 /g26 put
dup 50 /g13 put
dup 51 /g6 put
dup 52 /g3 put
dup 53 /g16 put
dup 54 /g27 put
dup 55 /g15 put
dup 56 /g4 put
dup 57 /g18 put
dup 58 /g22 put
dup 59 /g7 put
dup 60 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JGRIKY+Calibri*1 
[33{/.notdef}rp /g21 /g1 /g30 /g25 /g28 /g24 /g29 
/g5 /g12 /g2 /g10 /g14 /g8 /g11 /g20 
/g19 /g26 /g13 /g6 /g3 /g16 /g27 /g15 
/g4 /g18 /g22 /g7 /g9 195{/.notdef}rp]
JGRIKY+Calibri nf
JGRIKY+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
205.127 41.1986 mo
(\(!\)*+,-.+"/*0\(")
[8.9324 7.77451 9.4313 8.59854 9.4313 7.02069 4.11981 9.46539 9.4313 4.05865 12.8312 8.59857 
8.10834 8.93237 0 ]xsh
217.744 62.1379 mo
(12*2\(3*45.+6)
[5.44261 6.25766 8.59856 6.25766 8.9324 5.47847 8.59854 7.59152 10.0006 9.46539 9.43127 0 
]xsh
JGRIKZ+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
309.243 62.1379 mo
(\000\001)sh
JGRIKY+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
375.933 41.2275 mo
(4.+7*47")
[7.59152 9.46536 9.4313 6.01367 8.59857 7.59149 6.0137 0 ]xsh
356.194 62.167 mo
(8-,4.+5+9-7:)
[9.4313 4.11978 7.02072 7.59152 9.46539 9.43127 10.0006 9.4313 9.4313 4.11978 6.01367 0 
]xsh
JGRIKZ+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
450.375 62.167 mo
(\000\001)sh
JGRIKY+Calibri*1 [17.9509 0 0 -17.948 0 0 ]msf
489.205 41.2275 mo
(,;.4<")
[7.02072 9.4259 9.46176 7.59515 8.15149 0 ]xsh
490.804 62.167 mo
(/*0\()
[12.8312 8.59854 8.10834 0 ]xsh
JGRIKZ+PMingLiU [17.9509 0 0 -17.948 0 0 ]msf
529.274 62.167 mo
(\000\001)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/JGRIKZ+PMingLiU-Identity-H uf
/JGRIKZ+PMingLiU /CIDFont ur
/JGRIKY+Calibri*1 uf
/JGRIKY+Calibri uf
/KAAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 487 1178 a Ff(Figure)27 b(3:)37 b(W)-7 b(a)n(v)n(es)26
b(propagating)g(in)h(the)h(tub)r(e)h(after)e(the)h(remo)n(v)-5
b(al)26 b(of)i(the)g(diaphragm)-70 1248 y
SDict begin H.S end
 -70 1248 a
-70 1248 a
SDict begin 14.5 H.A end
 -70 1248 a -70 1248 a
SDict begin [/View [/XYZ H.V]/Dest (figure.caption.5) cvn /DEST pdfmark
end
 -70 1248 a 320 3150
a @beginspecial 0 @llx 0 @lly 720 @urx 425 @ury 3744
@rwi @setspecial
%%BeginDocument: diagram/mesh_and_ce.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: mesh_and_ce.pdf
%%Creator: (Adobe Acrobat 15.10.0)
%%For: ntuhep520
%%CreationDate: 2016/1/20, 下午4:31
%%BoundingBox: 0 0 720 425
%%HiResBoundingBox: 0 0 720 425
%%CropBox: 0 0 720 425
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 605 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-01-13T06:57:58Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2016-01-13T06:57:58Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.11.1 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -425 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 425 li
720 425 li
720 0 li
cp
clp
gsave
.327355 425.127 mo
719.673 425.127 li
719.673 0 li
.327355 0 li
.327355 425.127 li
clp
.327355 .000180163 mo
719.673 .000180163 li
719.673 425.173 li
.327355 425.173 li
.327355 .000180163 li
false sop
0 0 0 0 cmyk
ef
128.15 101.72 mo
592.931 101.721 li
.750271 .679713 .654902 .901945 cmyk
25400 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
gsave
[7.86686e-05 0 0 7.86796e-05 128.15 101.72 ]ct
@
grestore newpath
127.789 154.512 mo
592.571 154.512 li
gsave
[7.86686e-05 0 0 7.86796e-05 127.789 154.512 ]ct
@
grestore newpath
127.789 207.583 mo
592.571 207.583 li
gsave
[7.86686e-05 0 0 7.86796e-05 127.789 207.583 ]ct
@
grestore newpath
127.429 259.49 mo
592.211 259.49 li
gsave
[7.86686e-05 0 0 7.86796e-05 127.429 259.49 ]ct
@
grestore newpath
127.068 313.168 mo
591.85 313.168 li
gsave
[7.86686e-05 0 0 7.86796e-05 127.068 313.168 ]ct
@
grestore newpath
127.265 100.836 mo
127.265 153.628 li
gsave
[7.86686e-05 0 0 7.86796e-05 127.265 100.836 ]ct
@
grestore newpath
360.541 257.811 mo
360.541 312.284 li
gsave
[7.86686e-05 0 0 7.86796e-05 360.541 257.811 ]ct
@
grestore newpath
592.314 100.836 mo
592.314 153.628 li
gsave
[7.86686e-05 0 0 7.86796e-05 592.314 100.836 ]ct
@
grestore newpath
592.047 204.046 mo
592.047 256.837 li
gsave
[7.86686e-05 0 0 7.86796e-05 592.047 204.046 ]ct
@
grestore newpath
591.85 151.107 mo
591.85 203.898 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 591.85 151.107 ]ct
@
grestore newpath
591.849 260.377 mo
591.849 313.168 li
gsave
[7.86686e-05 0 0 7.86796e-05 591.849 260.377 ]ct
@
grestore newpath
127.892 154.512 mo
127.892 207.303 li
gsave
[7.86686e-05 0 0 7.86796e-05 127.892 154.512 ]ct
@
grestore newpath
127.891 259.492 mo
127.891 312.284 li
gsave
[7.86686e-05 0 0 7.86796e-05 127.891 259.492 ]ct
@
grestore newpath
128.222 202.365 mo
128.222 256.837 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 128.222 202.365 ]ct
@
grestore newpath
360.541 153.627 mo
360.541 208.1 li
gsave
[7.86686e-05 0 0 7.86796e-05 360.541 153.628 ]ct
@
grestore newpath
360.541 101.72 mo
360.541 154.512 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 360.541 101.72 ]ct
@
grestore newpath
360.541 203.898 mo
360.541 256.689 li
gsave
[7.86686e-05 0 0 7.86796e-05 360.541 203.898 ]ct
@
grestore newpath
284.251 100.836 mo
284.251 153.628 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 284.251 100.836 ]ct
@
grestore newpath
204.546 100.836 mo
204.546 153.628 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 204.546 100.836 ]ct
@
grestore newpath
284.251 208.1 mo
284.251 260.891 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 284.251 208.1 ]ct
@
grestore newpath
204.546 208.1 mo
204.546 260.891 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 204.546 208.1 ]ct
@
grestore newpath
516.387 154.792 mo
516.387 207.583 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 516.387 154.792 ]ct
@
grestore newpath
436.682 154.792 mo
436.682 207.583 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 436.682 154.792 ]ct
@
grestore newpath
516.387 260.374 mo
516.387 313.165 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 516.387 260.374 ]ct
@
grestore newpath
436.682 260.374 mo
436.682 313.165 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 436.682 260.374 ]ct
@
grestore newpath
204.546 155.309 mo
204.546 208.1 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 204.546 155.309 ]ct
@
grestore newpath
284.251 153.627 mo
284.251 206.419 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 284.251 153.628 ]ct
@
grestore newpath
204.546 258.695 mo
204.546 311.487 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 204.546 258.695 ]ct
@
grestore newpath
284.251 257.898 mo
284.251 310.689 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 284.251 257.898 ]ct
@
grestore newpath
436.682 102.518 mo
436.682 155.309 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 436.682 102.518 ]ct
@
grestore newpath
516.387 100.836 mo
516.387 153.628 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 516.387 100.836 ]ct
@
grestore newpath
436.682 205.02 mo
436.682 257.811 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 436.682 205.02 ]ct
@
grestore newpath
516.387 203.338 mo
516.387 256.13 li
[76200 25400 ] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 516.387 203.339 ]ct
@
grestore newpath
67.1 296.963 mo
67.1 347.785 li
[] 0 dsh
gsave
[7.86686e-05 0 0 7.86796e-05 67.1 294.965 ]ct
@
grestore newpath
64.1027 300.96 mo
67.1 294.965 li
70.0972 300.96 li
cp
ef
66.2158 347.756 mo
117.001 347.756 li
gsave
[0 -7.86796e-05 7.86686e-05 0 66.2159 347.756 ]ct
@
grestore newpath
113.005 344.758 mo
119 347.756 li
113.005 350.754 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: KAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000051c6670
676d00000000000005d80000091a676c796600000000000033b40000035a
686561640000000000000ef400000036686865610000000000000f2c0000
0024686d74780000000000000f500000000c6c6f63610000000000000f5c
000000086d6178700000000000000f64000000206e616d65000000000000
0f8400000020707265700000000000000fa4000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d00000001000000059eb88df7cb11
5f0f3cf50019080000000000bbeb7ccc00000000c787a88bfbfafd8b09ec
07b600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec000100000000000000000000000000000003040e000002ae00210377
0029000000a1011d01ad0001000000030120001000c3000700020010002f
0065000011900182000400010000000100120001000000000006000e0000
52495457444f2b43616c69627269b2090320b80284b40918014a20b80283
b40918014a20b80282b40918014a20b80281b40918014a20b80280b40918
014a20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20
b8027cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279
b40918014a20b80278b40918014a20b80277b40918014a20b80276b40918
014a20b80275b40918014a20b80274b40918014a20b80273b40918014a20
b80271b40918014a20b80270b40918014a20b8026fb40918014a20b8026e
b40918014a20b8026db40918014a20b8026cb40918014a20b8026bb40918
014a20b8026ab40918014a20b80269b40918014a20b80268b40918014a20
b80267b40918014a20b80266b40918014a20b80265b40918014a20b80264
b40918014a20b80263b40918014a20b80262b40918014a20b80261b40918
014a20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20
b8025db40918014a20b8025cb40918014a20b8025bb40918014a20b8025a
b40918014a20b80259b40918014a20b80258b40918014a20b80257b40918
014a20b80256b40918014a20b80255b40918014a20b80254b40918014a20
b80253b40918014a20b80252b40918014a20b80251b40918014a20b80250
b40918014a20b8024fb40918014a20b8024eb40918014a20b8024db40918
014a20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20
b80249b40918014a20b80248b40918014a20b80247b40918014a20b80246
b40918014a20b80245b40918014a20b80244b40918014a20b80243b40918
014a20b80242b40918014a20b80241b40918014a20b80240b40918014a20
b8023fb40918014a20b8023eb40918014a20b8023db40918014a20b8023c
b40918014a20b8023bb40918014a20b8023ab40918014a20b80239b40918
014a20b80238b40918014a20b80237b40918014a20b80236b40918014a20
b80235b40918014a20b80234b40918014a20b80233b40918014a20b80232
b40918014a20b80231b40918014a20b80230b40918014a20b8022fb40918
014a20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20
b8022bb40918014a20b8022ab40918014a20b80229b40918014a20b80228
b40918014a20b80227b40918014a20b80226b40918014a20b80225b40918
014a20b80224b40918014a20b80223b40918014a20b80222b40918014a20
b80221b40918014a20b80220b40918014a20b8021fb40918014a20b8021e
b40918014a20b8021db40918014a20b8021cb40918014a20b8021bb40918
014a20b8021ab40918014a20b80219b40918014a20b80218b40918014a20
b80217b40918014a20b80216b40918014a20b80215b40918014a20b80214
b40918014a20b80213b40918014a20b80212b40918014a20b80211b40918
014a20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20
b8020db40918014a20b8020cb40918014a20b8020bb40918014a20b8020a
b40918014a20b80209b40918014a20b80208b40918014a20b80207b40918
014a20b80206b40918014a20b80205b40918014a20b80204b40918014a20
b80203b40918014a20b80202b40918014a20b80201b40918014a20b80200
b40918014a20b801ffb40918014a20b801feb40918014a20b801fdb40918
014a20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20
b801f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6
b40918014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918
014a20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20
b801efb40918014a20b801eeb40918014a20b801edb40918014a20b801ec
b40918014a20b801ebb40918014a20b801eab40918014a20b801e9b40918
014a20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20
b801e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2
b40918014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918
014a20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20
b801dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8
b40918014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918
014a20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20
b801d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ce
b40918014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918
014a20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20
b801c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4
b40918014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918
014a20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20
b801bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801ba
b40918014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918
014a20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20
b801b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0
b40918014a20b801afb40918014a20b801aeb40918014a20b801adb40918
014a20b801acb40918014a20b801abb40918014a20b801aab40918014a20
b801a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6
b40918014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918
014a20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20
b8019fb40918014a20b8019eb40918014a20b8019db40918014a20b8019c
b40918014a20b8019bb40918014a20b8019ab40918014a20b80199b40918
014a20b80198b40918014a20b80197b40918014a20b80196b40918014a20
b80195b40918014a20b80194b40918014a20b80193b40918014a20b80192
b40918014a20b80191b40918014a20b80190b40918014a20b8018fb40918
014a20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20
b8018bb40918014a20b8018ab40918014a20b80189b40918014a20b80188
b40918014a20b80187b40918014a20b80186b40918014a20b80185b40918
014a20b80184b40918014a20b80183b40918014a20b80182b40918014a20
b80181b40918014a20b80180b40918014a20b8017fb40918014a20b8017e
b40918014a20b8017db40918014a20b8017cb40918014a20b8017bb40918
014a20b8017ab40918014a20b80179b40918014a20b80178b40918014a20
b80177b40918014a20b80176b40918014a20b80175b40918014a20b80174
b40918014a20b80173b40918014a20b80172b40918014a20b80171b40918
014a20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20
b8016db40918014a20b8016cb40918014a20b8016bb40918014a20b8016a
b40918014a20b80169b40918014a20b80168b40918014a20b80167b40918
014a20b80166b40918014a20b80165b40918014a20b80164b40918014a20
b80163b40918014a20b80162b40918014a20b80161b40918014a20b80160
b40918014a20b8015fb40918014a20b8015eb40918014a20b8015db40918
014a20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20
b80159b40918014a20b80158b40918014a20b80157b40918014a20b80156
b40918014a20b80155b40918014a20b80154b40918014a20b80153b40918
014a20b80152b40918014a20b80150b40918014a20b8014fb40918014a20
b8014eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014a
b40918014a20b80149b40918014a20b80148b40918014a20b80147b40918
014a20b80146b40918014a20b80145b40918014a20b80144b40918014a20
b80143b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb8
0281b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027d
b21e3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d
411fb80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411f
b80274b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb802
70b21d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb2
1d431fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c45
1fb80267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb8
0263b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025f
b21c451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c
451fb8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451f
b80256b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb802
52b21c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb2
1c451fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b49
1fb80249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb8
0245b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241
b21b491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b
4a1fb8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1f
b80238b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb802
34b21b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b2
1b4b1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c
1fb8022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb8
0227b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223
b21b4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b
4c1fb8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1f
b8021ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb802
16b21a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b2
1a4f1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f
1fb8020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb8
0209b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205
b219511fb80204b219511fb80203b219501fb80202b219511fb80201b219
511fb80200b219511fb801ffb219511fb801feb219501fb801fdb219511f
b801fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801
f8b219511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b2
18531fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b21853
1fb801efb218541fb801eeb218541fb801edb218541fb801ecb218531fb8
01ebb218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7
b218541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218
541fb801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531f
b801deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801
dab218531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b2
17561fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b21757
1fb801d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb8
01cdb217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9
b217561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217
571fb801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571f
b801c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801
bcb217571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b2
17561fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b21757
1fb801b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb8
01afb2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801ab
b2165b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b216
5b1fb801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1f
b801a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb801
9eb2163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2
165b1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b
1fb80195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb8
0191b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018d
b2165b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b216
5b1fb80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621f
b80184b215621fb80183b215661fb80182b215661fb80181b215551fb801
80b215451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb2
15621fb8017bb215621fb8017ab215641fb80179b215661fb80178b21566
1fb80177b215661fb80176b215661fb80175b215661fb80174b215661fb8
0173b215451fb80172b215621fb80171b215621fb80170b215631fb8016f
b215641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215
661fb8016ab215661fb80169b215621fb80168b215621fb80167b215611f
b80166b215641fb80165b215641fb80164b215661fb80163b215661fb801
62b215661fb80161b215661fb80160b215661fb8015fb215661fb8015eb2
15551fb8015db215451fb8015cb215451fb8015bb215361fb8015ab21561
1fb80159b215621fb80158b215621fb80157b215631fb80156b215641fb8
0155b215661fb80154b215661fb80153b215661fb80152b215661fb80151
b214401fb80150b214551fb8014fb214561fb8014eb214831fb8014db214
2d1fb8014cb214401fb8014bb214401fb8014ab214411fb80149b214401f
b80148b214401fb80147b214411fb80146b2147e1fb80145b214871fb801
44b2147f1fb80143b214801fb80142b212461fb80141b212461fb80140b2
12461fb8013fb212461fb8013eb212441fb8013db212461fb8013cb21159
1fb8013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb8
0137b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133
b2112c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211
571fb8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1f
b8012ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb801
26b2115b1fb80125b211561fb80124b211561fb80123b211571fb80122b2
11581fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b
1fb8011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb8
0119b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115
b2105f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b210
5e1fb80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1f
b8010cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb801
08b2105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2
105f1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f
621fff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631f
f80f641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f
641ff00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641f
e90f641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e
681fe10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681f
da0e681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d
261fd20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1f
cb0d6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d
261fc30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c
711fbc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711f
b50c721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b
7a1fad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1f
a60b7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b
791f9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f
970b7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a
4e1f8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f
8255805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb
7d4012060a7c557a557bab7a557955775578ab7755ba028600660285403c
5576ab755504751475747503f47501ab7501447501307501020075107520
75030c7455725573ab7255007250728072b072043bb072e072020072010a
b8ffc0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a
03251f6938675568ab67556638645565ab645563386255613860555f385d
555eab5d555c385a555bab5a55593858555703251f5638545555ab545553
38515552ab51554f384e554e03251f4d384b554cab4b554a38485549ab48
55473846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142
301b401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f1901
6f197f198f19030f18cf18024018292c460f17cf17df17ef170413401729
2e460016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b3
16313546b8ffc0404d162326460f15010f151f1502451f15010011e011f0
110315bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0e
ff0e03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040
270c5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d304600030120
01010001100120010308b8ffc0b301151f46b80100b316010501b80190b1
54532b2b4bb80800524bb008505bb00188b02553b00188b040515ab00688
b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d
00421d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db1
160042592b5e7375732b2b745e732b2b5e73742b73742b7374745e730175
5e73742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e
73755e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243
545841ff0284006402830064028200640281006402800064027f0064027e
0064027d0064027c0064027b0064027a0064027900640278006402770064
027600640275006402740064027300640271006402700064026f0064026e
0064026d0064026c0064026b0064026a0064026900640268006402670064
02660064026500640264006402630064026200640261006402600064025f
0064025e0064025d0064025c0064025b0064025a00640259006402580064
025700640256006402550064025400640253006402520064025100640250
0064024f0064024e0064024d0064024c0064024b0064024a006402490064
024800640247006402460064024500640244006402430064024200640241
006402400064023f0064023e0064023d0064023c0064023b0064023a0064
023900640238006402370064023600640235006402340064023300640232
00640231006402300064022f0064022e0064022d0064022c0064022b0064
022a00640229006402280064022700640226006402250064022400640223
0064022200640221006402200064021f0064021e0064021d0064021c0064
021b0064021a006402190064021800640217006402160064021500640214
006402130064021200640211006402100064020f0064020e0064020d0064
020c0064020b0064020a0064020900640208006402070064020600640205
0064020441ff00640203006402020064020100640200006401ff006401fe
006401fd006401fc006401fb006401fa006401f9006401f8006401f70064
01f6006401f5006401f4006401f3006401f2006401f1006401f0006401ef
006401ee006401ed006401ec006401eb006401ea006401e9006401e80064
01e7006401e6006401e5006401e4006401e3006401e2006401e1006401e0
006401df006401de006401dd006401dc006401db006401da006401d90064
01d8006401d7006401d6006401d5006401d4006401d3006401d2006401d1
006401d0006401cf006401ce006401cd006401cc006401cb006401ca0064
01c9006401c8006401c7006401c6006401c5006401c4006401c3006401c2
006401c1006401c0006401bf006401be006401bd006401bc006401bb0064
01ba006401b9006401b8006401b7006401b6006401b5006401b4006401b3
006401b2006401b1006401b0006401af006401ae006401ad006401ac0064
01ab006401aa006401a9006401a8006401a7006401a6006401a5006401a4
006401a3006401a2006401a1006401a00064019f0064019e0064019d0064
019c0064019b0064019a0064019900640198006401970064019600640195
00640194006401930064019200640191006401900064018f0064018e0064
018d0064018c0064018b0064018a00640189006401880064018700640186
00640185006441800184006401830064018200640181006401800064017f
0064017e0064017d0064017c0064017b0064017a00640179006401780064
017700640176006401750064017400640173006401720064017100640170
0064016f0064016e0064016d0064016c0064016b0064016a006401690064
016800640167006401660064016500640164006401630064016200640161
006401600064015f0064015e0064015d0064015c0064015b0064015a0064
015900640158006401570064015600640155006401540064015300640152
006401500064014f0064014e0064014c0064014b0064014a006401490064
0148006401470064014600640145006401440064014300642b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b185f5e00>
[859 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 322 1 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>KAAAAA+Calibri AddT42Char 
1 570 2 <00010029fffa034b03bc002f0086b90031ffc040110b014d2f080b014d2e
100b014d3b2e0118b8fff0b60b014d34180117b8fff8b30b014d16b8fff0
b60b014d34160109b8fff0402a0b014d00080b014d3c0001382301360b01
0b2010014d0b200c014d0b0b31302949230b111d49114c054c003f3f3f12
39393f111201392f2b2b3130005d5d015d2b2b5d2b2b5d2b5d2b2b2b2516
14060623222e022703030e0323222626363701012626363633321e021713
133e033332161606070103430813271f1e23150b04d8d7040b15221c1d25
1101090118fef708011327201d23140a04cdd0040a111f1b1d25120209fe
f92c0e130c0503070b070165fe9b070b0703050c130e01b701a70e130d04
03060a07feb1014f060a0703040b140ffe5e>KAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>KAAAAA+Calibri AddT42Char 
KAAAAA+Calibri /CharStrings get begin
/g1 1 def
/g2 2 def
end
KAAAAA+Calibri /Encoding get
dup 33 /g1 put
dup 34 /g2 put
pop
end
%ADOEndSubsetFont
/ZHYQES+Calibri /KAAAAA+Calibri findfont ct_VMDictPut
/ZHYQES+Calibri*1 
[33{/.notdef}rp /g1 /g2 221{/.notdef}rp]
ZHYQES+Calibri nf
ZHYQES+Calibri*1 [17.9836 0 0 -17.9862 0 0 ]msf
51.7273 303.631 mo
(!)sh
%ADOBeginSubsetFont: LAAAAA+PMingLiU-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (LAAAAA+PMingLiU)
%%Title: (LAAAAA+PMingLiU Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /LAAAAA+PMingLiU def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -198 999 801} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 2 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE3100AAC671FFC18DDB3764E95ECE8020311F82848570B
1358F8FCDF8604B> |
1 <001C60D8A8C9B8666C32> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /LAAAAA+PMingLiU-Identity-H /Identity-H 0 [/LAAAAA+PMingLiU] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ZHYQET+PMingLiU /LAAAAA+PMingLiU-Identity-H findfont ct_VMDictPut
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
57.7512 303.631 mo
(\000\001)sh
ZHYQES+Calibri*1 [17.9836 0 0 -17.9862 0 0 ]msf
112.048 365.415 mo
(")sh
%ADOBeginSubsetFont: MAAAAA+TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /MAAAAA+TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000007966670
676d0000000000000854000005cd676c796600000000000019ec0000075c
686561640000000000000e2400000036686865610000000000000e5c0000
0024686d74780000000000000e80000000186c6f63610000000000000e98
0000000e6d6178700000000000000ea8000000206e616d65000000000000
0ec800000034707265700000000000000efc00000aed6764697200000000
0000000000000000058e0000054c001f054c001c037100180000ffe10000
ffe80000ffe8fe4afffc056b0023fe68ffe2033e00000095000000950000
000000000000002500a8008e010b007d00820045003200a400ca006b0070
005100af003c00f001d700470004002500770029004000fd001601610046
01370029008e0017ffca0025005bffe902e600020099008100f2007500d6
006300c60006009a01330024003800cc003dff67001305d8003600860095
ffdb0007043400a500d8ffdcfffe004800a200d8013c01530380053e0057
007a007c008c0117012a0138017c0026003c007800bd00c0021009b5000c
004d004e00540058006700b4040100020005005000af01d5034300240058
008b013501c0ffac002000250026002d00410136022bffba001e002a0034
003b003f00850094009800d7012e013d033104b900170040006100b9010e
0116012201bfff9c001f001f004d005c0086008c009600aa00cb00cb011f
0154022f036005a9fee8000e006f007c007d008b00d500f1010a01570178
02b803adfe3fff6affb3ffc4001f0037003f0044004a0078007d009700a2
00a700b600c000c100c600d8011d0150019701ee04740532fd81fed1fee0
ff16fff1000f002d00550068006e007f00890095009e00c200da00e400f8
01040108011101c2023002da030e049e0517ff00ff8700000020002f0041
0057007800870088008800b900c200c5012001280133017401d6020e020f
026c027e02ab02ec038903b103e304e7ff43ffa8ffc3ffdcffe900070023
0023002600520077007d0081008f009900ac00ae00b500b800c800ea00f0
00f40135016a018b01b101b501f7021402ad02d504fc05d805f0ff9dfffc
000b00240025002c0030003000330040004700490057006e009a00bd00c9
00cd00dc00fa00fa011b0139017e0187018a018e0195019601df01f60286
02cf02de039603a903b003c804010432046a058b05e006510761fe96fe9a
ff4bff870013002500340038003e004a0065006b0073007a009c00a200b2
00b700bf00f000f700fb0104011301200124013b01520178017c0181018f
01a001d90248026a026f02700301031d032303270388041f04ab04d104da
057a058bfe26fe59ff2e00010002000a003b003b004700580058005f0066
006b007a007a008b009900af00bc00c000c700cc00e900f200f500fb00fb
0102010a010b01150121012701450145015501570158015e01610168017d
01a301ab01da01ee021002180222028f029402a302d202e703710393039b
03b303d303fe04ff050b05320532054b0559058b05ab05f2065506890742
076207a708ccfd2afdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77
ffa1ffa7ffadffafffc00000000000030094001d001f002000200027002e
0048004b004c005e005f006b0071007c008a00900091009100a700af00b3
00b400c400c600d100d200de00df00df00e600e800ea00eb00f200f500f5
00fc010201180123013101330137015c016201660170017a017a017a0182
01980199019b01b001bf01c001ca01d301d701d801e001e001f601f701f8
02120213022f023702440247024f0252026302650270027f0298029b02a6
02b702ba02c502cf02d602d702e502fe031c031d03450348035d035e0371
0379038103a103b703d403d503d803e103f803fe0404041f042104230425
043a0467048304e00528054b0564056a059f059f05c2060b066a06af06b3
06cb06e8070607280748075007a607b207ff009500af0092009600000000
0000000000000000017e01a80129025b0212020301c302b4019301cd02b2
04ed020e0159017a0300022d042c00c8004d00e602890325013e0378011b
00f1018d00490203007c000e029d02470024000000000052004400330038
005405d3041501a7000002860168005000cf0002004b0024008800ba0025
ffd800110091ff6b00b5011700260065ff9900490080014b01c000f40167
027102ea04fc0310017c01e103d9015501e601ee0434019606cb005c022b
0099003d009f00160039002700de00790120022e005a0099038800940021
0019002a046c05e8000001f203b200aa0296028902b4ffc9020000ec0005
005a0447010004e00000052a001f01eb00ae016800ca02d3028901b50406
01a1014f014b011c0308005e00c70024029d006503750104028002f304d8
00d90239025a032c01f204310303005002e50283005901eb010800ac0196
02f8012100950180004400e501eb02e5007400f301ff02fd038f026801c8
01c70116022b0142033000fe02e101620200002400ee0517010802370066
0006010201e602aa0366019b00d305c203dc044d03b6000401be013702fc
03200244014d0338ffed002506f8030dfed5ff43004402ffff92040bfdef
0155017100d9ffc4032d0461044afbb5fbcf02170192036d0558fff2fe7d
0583023e006605e9073d00790243002500cf00fd00af002a01ef021a0026
001f0025003a000001170490fbfb0251001d02f001f50078018f005f0024
0044005400bf00af006701a8002600050006003f009800fa02ab00c2004d
0375004a00b600c401bf017c006f00130263000c006801520002012e0104
001f001f009a000000f1046900790080005000bd056b00ab0080001e05a5
fe4000ce006e0056004800db018b00b30048023904580053008200820022
0000404154403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c01182f2d2c20b0032545b019234445b01a23444565234520b0032560
6a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a
45208a54582321b03f1b235961441cb114008a5279b31940201945208a54
582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2c
b10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1
1011432343650b2d2c4b525845441b2121592d2c0120b003252349b04060
b0206320b000525823b002253823b002256538008a63381b212121212159
012d2c4bb06451584569b00943608a103a1b212121592d2c01b005251023
208af500b0016023edec2d2c01b005251023208af500b0016123edec2d2c
01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161011020
3c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c35
2d2c76b802ee23701020b802ee4520b0005058b00161593a2f182d2c2121
0c6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f
2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b002
602d2c0c6423648bb84000626023212d2cb4000100000015b00826b00826
b00826b008260f10161345683ab001162d2cb4000100000015b00826b008
26b00826b008260f1016134568653ab001162d2c4b53234b515a5820458a
60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a5838
1b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358
021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425
b00425060c6423646164b807085158b00425b00425012046b01060482046
b0106048590a21211b2121592d2cb012435c580cb00425b00425060c6423
646164b807085158b00425b00425012046b8fff060482046b8fff0604859
0a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b51
5a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c
0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c4623
46608a8a462320468a608a61b8ff8062232010238ab903b003b08a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1
23018851b1400188535a58b910000020885458b202010243604259b12401
885158b920000040885458b202020243604259b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b2021002436042595959592d0000000001000000050ccdc12f
8ef55f0f3cf50819080000000000a31fb8bd00000000c5b1f9c8fc05fd8c
0aaa0830000200090001000000000000000100000721fe4500570a3afc05
fa500aaa0018000700000000000000000000000000060639011c02000000
0239fea00400002702390054038dffb800000034003400f1020b02c103ae
000000010000000600f2003c0082000500020010002f0055000004d90258
000400020000000100120001000000000006001f0000454842534d452b54
696d65734e6577526f6d616e50532d4974616c69634d54000000b1540041
0c03bc003003bc004003bc00a003bc00b003bc0005ffc003bbb345453240
b803bbb32b2e3240b803bbb2282932b9ffc003bbb31a263280411303bb00
9f03bb00af03bb00cf03bb0004000003bb001f03bb000203bb02af002700
1fffc003b9b2161b32b9ffc003b8b2424232b9ffc003b8b2363832b9ffc0
03b8b32a2d32df410a03b800ef03b8000203b803b90028001fffc003b9b3
282e32f0410f03b90001000003b7000103b700030800001f03be03bf002b
001fffc003bfb2242a32b903b60381b23a1f0f411703b3001003b2002003
b2005003b2007003b200e003b2000600cf03b300df03b300ef03b300ff03
b30004001203a8b2e2891fbe039f016b019a001f039800930801400c1f7f
047f05027f027f03025fbb02b00001ffc00117b2196632b8ffc0b3651a66
32b9ff800173b2196632bd038401170800001fffc002afb2313340b802af
b22e3340b802afb328293240b802afb326273240b802afb321253240b802
afb31c203240b802afb2233340b802afb21933a0bc02af00b002af00e002
afb5034003212932b8fff2b33a263d32bc038203820382003a0800b51f40
255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b2e3269be0381
0001008a03810001000e0381b32b2f3210b80381b3515b320cb80381b34e
513222b80381b3474d320eb80381b246330ab80381400926473212254358
320cb80381b2323310b80381b22a3312b80381b3373d3212bb0381003d00
33fff44015253d331825355b32102526343206252a330c252e33b8fffe40
24252d330c3a2f33329925aa25ba25c92504052536330c25323832193a29
3a383a03182517b80381b42825382504bc0381038103810025080040101f
0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc038003800380
001f080040151f375f07af07025f06af060222ac2b2e3209ac2f33b8ffdc
400aac1f223222232b52320eb8037fb229330eb8037fb2223314b8037fb2
1e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f3232262c33410a
ffee037f00390033fff8037f002b0033ffea037fb23a3320b8037fb33f46
321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d320eb8037fb226
3304b8037fb3494a3404b8037fb2463304b8037fb2213318b8037f400c1d
3322263032322226333832b8fff8400a262b2f3209261b21328abe037f00
01037f037f037f00260800402e1f371f062f063f06039f02af02bf02cf02
049f03af03bf03cf03046f037f038f03031f032f033f034f035f03050f41
3502ed0001005f02ed009f02ed00df02ed0003002f02ed003f02ed006f02
ed000300af02af0001004f02af009f02af0002002f02af003f02af000200
3f02b00001004f02af005f02af0002002f02af003f02af0002007003b200
0103b203b202ed02ed02b002b002af02af401a3701003001400102010100
090102000800171700000012110840410b027b02230034000d013d003400
0d01370034000d011b401a340d8f340d84340d68340d59340d54340d4834
0d2c340d28340d411002350020000d021b0020000d01fc0020000d01c300
20000d01500020000d012c401a200df0200dbe200d94200d79200d6a200d
61200d5f200d44200d410d013e0138000d003d0138000d00300138000d00
1d0138000d01fdb40f4d0f0009bf01fd004d000d03b1037f0015001f0215
b226341fb80214b2263f1fb80208b21ebb1f41190206001e0801001f0205
001f02ab001f0204001f02ab001f0203001f0401001f02010031019a001f
01fb00230156001f01aeb2262a1fb801adb2262a1fb801abb226341f4115
01a8002602ab001f01a5001e0125001f01a400ab02ab001f01a2003102ab
001f01a1003102ab001f019db2236c1fb8019cb2236c1f4109019b002304
01001f019a0033019a001f0176b2262e1fb8016cb231721f4111016b0023
019a001f016800240401001f014500260801001f013f00230401001f0123
b21e9e1fbc0121001e0201001f0100b426791ffd1fb80125b21ffa33b808
01b21ff924b802abb21fe826b80101b21fe51fb8019ab21fe431b8010140
0b1fe331e41fe231891fd226b80201b61fd026cd1fcd25b80401b21fb731
b8019ab21fae26b80801b21fac1eb80401400b1f9e315e1f97269e1f9333
b80801b21f8a24b8019ab21f831fb802ab40131f82236c1f7523e41f7026
cd1f6423721f5e25b80401b21f5d23b802abb21f55e6b80401b21f5324b8
0201b21f4f33b802abb21f4e26b8040140131f4731671f4626ab1f4331cd
1f3e235e1f3a1fb80401b61f3924e41f3723b80801b21f2e23b80401b21f
2a1eb80125400b1f2923ab1f2731ab1f5537bc01c60007018a0007012b40
2e077f077107690766074b074007380736072d0722072107140812081008
0e080c080a080808060804080208000814b8ffe0402b0000010014061000
000100060400000100041000000100100200000100020000000100000201
0802004a00b013034b024b5342b0372b4bb807ff52b0382b4bb009505b58
b101018e59014bb0c063004b6220b0f65323b8010a515ab005234201b012
4b004b544218b0382bb00288b801005458b801ffb101018e851bb0124358
b900010140858d1bb900010159858d59590016763f183f123e113946443e
113946443e113946443e113946443e11394660443e11394660442b2b2b2b
2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358
b0aa1d59b0324b5358b0ff1d594bb04753205c58b9027d027b4544b9027c
027b45445958b90146027d455258b9027d01464459594bb04753205c58b9
001e027c4544b90026027c45445958b9017f001e455258b9001e017f4459
594bb05e53205c58b9001f027d4544b90025027d45445958b901a8001f45
5258b9001f01a84459594bb8010153205c58b1ab1f4544b11f1f45445958
b9047000ab455258b900ab04704459594bb8012553205c58b1e61f4544b1
1f1f45445958b9051000e6455258b900e605104459594bb01753205c58b1
24244544b1312445445958b12224455258b124224459594bb05153205c58
b124244544b1232445445958b17d24455258b1247d4459594bb06e53205c
58b124244544b1332445445958b1aa24455258b124aa4459592b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b45695342014b5058b108004259435c58b10800
42591610703eb0124358b911b53d801bba011c03d9000b2b59b00a2342b0
0b2342003f3f182b103c012f5d060cb0062342b0072342b0124358b93b21
187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411b
ba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a8
0400000b2b59b0102342b0112342002b4bb02e5358b8016b45b02a60b801
6b2344590018456944456944184569444569447373737375757573737475
757575752b4bb026534bb03d515a58b1262645b0196044592b4518694474
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b004bb0
2a534bb03f515a58b1070745b04060445973732b2b451869442b2b752b2b
4518694475752b2b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b
2b2b2b2b451869442b002b732b2b2b2b2b2b2b2b2b012b2b2b007373732b
2b2b01435c58b8ffdeb31e1c3318b8037fb52b3318262b33b9fff00381b1
12332b2b2b2b590173742b2b2b002b73752b2b732b2b2b2b2b73752b2b2b
2b732b00000000>
[1885 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 104 2 <0002fea4fe46023e0515000b003000e7b61232400f103432b8ffc0b31b27
3432b8ffc0401d0d355f0d5f255b265b279330051a29013045265a282f30
304d0c007006b8039c40210c070c0d0c300d1f25261425252616b8222410
0f25400f39253128262510097003b8ffc0400e2a35900301400350030203
57320cb8032bb34f260126b8019fb5261ee4133a1ab80335400b26eb3125
1725310a3286182b2b103c2b10f6f6fded10e45ded10f45d712bed2b103c
2b10c02b003ffde4870e2e2b087d10c400183ff6ed10f5ed2bfc01f53130
01715d2b2b2b435c5840140d400f390e400f3925400f390c400f3926400f
392b2b2b2b2b590132161514062322263534361301060623222635343633
321716151407061517161633323637133635342623220706073501d92a3b
3b2a2a3b3b3afefd45f18c3f4131201d1612190e02030c0c51732de0212b
210d110d1905153b2a2a3b3b2a2a3bfe74fc81f0d43a281f2f130f131a13
0b07050404679a0300710c18260302042300>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 482 3 <00010027ffe803ad03890036018f400901180c392d180c390ab8ffde409c
13143e14221339082f16001b021b2f0451075209521e512079017b2d891e
a627a428ba02ba260b5c015c28bf01035a095a1e5a2003690669096a1e79
09791e7b2606562a51356c260352000114221935132219350101022a2b2b
00131436452d5a283530364d0001232c01002d9f2301233104040007070c
0c1f1b20141b1b20002b00362b1f2c2d142c2c2d2c2b0a180b1b3728201b
2d2c10148a13b80143b30c072520b80124b20c251bb8ffc0b25c351bb802
95b235c92dbc0124002b0203002cffc0b217392cb8ffc0b25c352cb8ffc0
b23a352cb8ffc0b32a34342cb8ffc0b32324342cb8ffc0b21c352cb8ffc0
4013191a34ef2c012c19371b172c171b370a3286182b2b103c2b2b4e10f4
5d2b2b2b2b2b2b2b4dede4e4f42bedf4ed10f6ed2b103c103c2b10c0003f
3f3c87052e2b087d10c4870e2e182b7d10c400183f3c10ed720111123900
11123910f5ed2bfc01f510c987100e7dc4083c3130012b2b5d5d5d4bb032
534bb036515a58b120223859015d005d015d712b2b2b2b01031236333216
151407030615141633323736371706070623222635343713363534262322
07060607060707231336353426232207072701c485bbc75c32411d7a1510
090c11353f1f5d533a2e252c2274161a131c274aa0592f1f3296b620231a
0c1e26060389fe390117b042353c64fe5b49100e130d2a56138539272d26
307501924b2a1419182dcfa15565a5027271171621040624>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 1410 5 <0001ffbcffe8038403890046010840630d40120b3f0700072a003d013e14
001601240023014a1b56018919a301a919aa2aa83daf3f10484010351017
63217321c919cb210509230c2a52230304191a1a022a2a2b3e403e3c4028
2122021a1a1f2840142828403e2a1904041135428a46c60011b80395401f
153a0a0a000735c639272e2e260b042a193e218a9f22cf220222c90d02e4
45ba014700400124b21a8228b8019f401d19e43e403b4b343e401d353e3e
47200d400d8f0daf0d040d1a48321947b80114b1de182b4e10e410e65d12
392f2b2b4dedf4edf4e6ed10f45ded11123939003f3c10fde43f3c10fde4
10f4ed11121739870e2e2b0e7d10c40110c90708103c083c870e10c4c431
30005d5d012b5d2b01161716173736363736333216151407062322272623
220706071316163332373637170607062322272603020706232227263534
363332171633323736363726272626232207350167311912295823642618
1d2b330f1c2415182f1018213e5652131a0d151c3727233f613726382115
429c5e3d392821182c2020241a0e0c132fa2193e05174a48171e03893434
2499843057100a2e21260e1909101c3495fea84f1f172e4a12764e2c3f27
0129fef14e321d1625212c20171026fc38f30e4136022400>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>MAAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
MAAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/space 1 def
/j 2 def
/n 3 def
/x 5 def
end
MAAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 32 /space put
dup 106 /j put
dup 110 /n put
dup 120 /x put
pop
end
%ADOEndSubsetFont
/ZHYQEU+TimesNewRomanPS-ItalicMT /MAAAAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/ZHYQEU+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 73{/.notdef}rp /j 3{/.notdef}rp /n 9{/.notdef}rp /x 
135{/.notdef}rp]
ZHYQEU+TimesNewRomanPS-ItalicMT nf
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
357.448 87.0107 mo
(j)sh
%ADOBeginSubsetFont: NAAAAA+PMingLiU-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (NAAAAA+PMingLiU)
%%Title: (NAAAAA+PMingLiU Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /NAAAAA+PMingLiU def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -198 999 801} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 2 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE3100AAC671FFC18DDB3764E95ECE8020311F82848570B
1358F8FCDF8604B> |
1 <001C60D8A8C9B8666C32> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /NAAAAA+PMingLiU-Identity-H /Identity-H 0 [/NAAAAA+PMingLiU] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ZHYQEV+PMingLiU /NAAAAA+PMingLiU-Identity-H findfont ct_VMDictPut
ZHYQEV+PMingLiU [17.9836 0 4.49591 -17.9862 0 0 ]msf
362.444 87.0107 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
191.229 87.507 mo
(j )
[4.99585 0 ]xsh
%ADOBeginSubsetFont: OAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /OAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000007da6670
676d000000000000089800000631676c79660000000000001ef4000006dc
686561640000000000000ecc00000036686865610000000000000f040000
0024686d74780000000000000f28000000246c6f63610000000000000f4c
000000146d6178700000000000000f60000000206e616d65000000000000
0f800000002c707265700000000000000fac00000f456764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f000040425554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019234445b01a23444565234520b00325606a20b009234223688a6a6061
20b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b2359
61441cb114008a5279b31940201945208a54582321b03f1b235961442d2c
b110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d
432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b5258
45441b2121592d2c0120b003252349b04060b0206320b000525823b00225
3823b002256538008a63381b212121212159012d2c4bb06451584569b009
43608a103a1b212110592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d
2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802
b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2cb4000100000015b00826b00826b00826b008260f1016134568
3ab001162d2cb4000100000015b00826b00826b00826b008260f10161345
68653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b545820
458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b21
21592d2c014b53234b515ab00225b00425b006254923451869525a58b002
25b00225b00525462345696048592121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c462346608a8a462320468a608a61b8ff8062232010238ab9035803588a
70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2cb0024354584b53234b515a58381b2121591b21
212121592d0000000001000000050ccd571894305f0f3cf5081908000000
0000a2e31dc200000000c5b1f690fb74fd8c1000080e0000000900010000
00000000000100000721fe4500571000fb74fadf10000001000000000000
000000000000000000090639011c020000000483002502aa005302390003
040000f00400002c040000530400ffee0000003b003b00a300d00109017b
02630352036e00010000000900f2003c009d000700020010002f00560000
062504eb000500020000000100120001000000000006001800004e584e55
48512b54696d65734e6577526f6d616e50534d540000b9005403ecb3032a
1f3f411503e4006003e9009f03e500df03e50004001003e4001003e5003f
03e5007003e400ff03e40005ffc003e1b345453240b803e1b32b2e3240b8
03e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001fffc003dfb216
1b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003deb32a2d32df
410a03de00ef03de000203de03df0028001fffc003dfb3282e32f0410d03
df0001037e000f0101001f00a003dd00b003dd0002004003dab32426329f
bf03cc000103ca03c90064001fffc003c9b20d1132410a03c703b7001200
1f03b603b50064001fffc003b5b30e1132004173038d000100c0038d00d0
038d00e0038d00f0038d0004006f03a7007f03a7008f03a700af03a70004
000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef03a50001000f
03a5002f03a5006f03a5008f03a50004005403aa0001006b03aa000103a8
036a0022001f038c03940015001f038b03930015001f03a40393001a001f
03a20394001e001f03a10393001e001f039f0394001e001f039b0394001a
001f039a0393001e001f039903940016001f039803940016001f03970393
001b001f03960394001b001f03950393001b001f03760375001a001f0374
0375001a001f03a00373b21e1f10411e0393002003930030039300030020
0394003003940040039400030000039400010383036c001e001f03b1036c
0032001f036d036c0032001fffc0037db2212332b9ffc0037db3171932a0
410a037d00b0037d00c0037d00d0037d0004ffc0037cb2212332b9ffc003
7cb3171932a0412d037c00b0037c00c0037c00d0037c0004003003730040
03730002000003730010037300200373000300e0037300f00373000200b0
037300c0037300d003730003008403730090037300a0037300030377036a
0029001f0389036ab2281f40b80367b33940323fbb0366000100400366b3
191d328fbb0366000100400366b3090a3240b80366b3090e3240b80366b3
090f323fbb0365000100400365b3090c3240b80365b31a1d3240b80365b3
090e326b410e0363007b0363000200140363002403630034036300440363
00040363b2242f1fba034e006d0800400e1f7f027f037f047f0504304401
12bf033200500800001f0012032d003c080040291f5f3c01376009700980
090310092009300940095009056f037f038f03031f032f033f034f035f03
05b8ffc0b2073a33b8ffc04047063a33900ba00bb00bc00bd00b05b006c0
06d006e006f0060520063006400650066006700680069006a00609900690
0702600b700b800b03100b200b300b400b500b051f0701a0418503620001
00000362001003620070036200900362000400f0035f00010020035e0020
035f0030035f0040035e00040000035e0000035f0010035f00d0035e00e0
035f00050010030f0020030f0030030f00d0030f00e0030f00050000030f
0010030f0050030f0060030f0070030f00d0030f00060000030f0010030f
0020030f0030030f00e0030f00f0030f0006030f00270000030e0030030e
000200e0030e00f0030e0002030e004a00e0030d00f0030d0002030d0027
00d002fc0001001002fc002002fc005002fc000300d002fc00e002fc0002
000002fc001002fc002002fc003002fc005002fc006002fc000600e002fc
00f002fc0002002002fc003002fc004002fc000302fc406127c02901b029
01a02901902901403c3f413240223f41321212125f235f255f285fa5046f
236f256f286fa5044f234f254f284fa5043f233f253f283fa5042f232f25
2f282fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c03
37b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a32370f413b02
af0001005f02af009f02af00df02af0003001f02af002f02af003f02af00
6f02af000402af02af001f02ad002f02ad003f02ad004f02ad005f02ad00
0500df02ad0001000f02ad001f02ad003f02ad005f02ad009f02ad000500
5f02ad00df02ad0002000f02ad001f02ad003f02ad0003004002acb23a33
4f414a02ac005f02ac009f02ac0003002f02ac003f02ac0002000f02ac00
3f02ac00af02ac000300b002ac00e002ac0002004f02ac005f02ac00a002
ac0003001f02ac002f02ac003f02ac0003000f035a0001000f035a001f03
5a003f035a005f035a0070035a000500cf035700df03570002000f035700
1f03570070035700af03570004035a035a0357035702ad02ad02ac02ac03
2c400d31151f001616000000121108104110020c004a000d01a8004a000d
0198004a000d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d
864a0d274a0dbe02280041000d01940041000d0121400b410db4410d4f41
0d29410d411002170021000d02150021000d02060021000d01eb0021000d
014e0021000d012c4014210df9210df3210df1210d9d210d71210d3d210d
4110021c001f000d0214001f000d020b001f000d0196001f000d014a001f
000d0126400b1f0dc61f0d571f0d371f0d410d019e0141000d0042014100
0d001e0141000d001b0141000d01f2b40f440f0009bb01f20044000d0201
b23c291fb80200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c
9e1fb801fab23c931fbc01f9010f0101001f01f6b224e41f411501f40149
0401001f01f301490401001f01f1014900ab001f01f001490067001f01a6
003c0125001f01a4b23c811f411501a3010f019a001f01a200220801001f
01a100500401001f019f0149019a001f019d01490067001f019cb22c621f
b8019bb22c791fbc019a002c0101001f0197b22ce41fb80193b22c891fb8
0192b22c6c1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f
0163002502ab001f014c010f019a001f01480149006c001f0147b22c891f
b80145b22c9e1fb80144b22c791fb80143b223311fb80127b23c811fbc01
2300500101001f011fb223e41f4115011d0023019a001f011c0023080100
1f011b00250801001f010e010f0401001f010d00220401001f0108b22381
1fb80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f
00e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b801
56b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf
2c671fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b802
01b21f812cbc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b8
0101b21f403cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b8
0401b21f3025b802abb61f2a24e41f2623b80156b21f5537ba0235000701
75402c0774076207560751073b0733072d0720071d071c07140812081008
0e080c080a080808060804080208000814b8ffe0402b0000010014061000
000100060400000100041000000100100200000100020000000100000201
0802004a00b013034b024b534201b0124b004b5442b0372b4bb807ff52b0
382b4bb008505b58b101018e59b0382bb00288b801005458b801ffb10101
8e851bb0124358b90001012f858d1bb90001017c858d5959014bb0c06300
4b6220b0f65323b8010a515ab0052342180016763f183f123e113946443e
113946443e113946443e113946443e11394660443e11394660442b2b2b2b
2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa
1d59b0324b5358b0ff1d594bb04753205c58b90271026f4544b90270026f
45445958b9017a0271455258b90271017a4459594bb04753205c58b90022
02704544b9003c027045445958b901b30022455258b9002201b34459594b
b04c53205c58b9014900224544b1222245445958b901c20149455258b901
4901c24459594bb06753205c58b9002402714544b90050027145445958b9
021e0024455258b90024021e4459594bb8020153205c58b9010f00224544
b1222245445958b90c00010f455258b9010f0c004459594bb01c53205c58
b125254544b12c2545445958b13725455258b125374459594bb0ab53205c
58b125254544b1232545445958b901590025455258b9002501594459594b
b8010153205c58b125254544b1282545445958b902080025455258b90025
02084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b01b361dc6463456523456023456560234560b08b766818
b080622020b164dc4565234520b003266062636820b003266165b0dc2365
44b064234420b161634565234520b003266062636820b003266165b06323
6544b0612344b10063455458b163406544b26140614523614459b3a67f43
4b456523456023456560234560b089766818b080622020b1437f45652345
20b003266062636820b003266165b07f236544b043234420b1a64b456523
4520b003266062636820b003266165b04b236544b0a62344b1004b455458
b14b406544b2a640a645236144594b5242014b5058b108004259435c58b1
08004259b3020b0a124358601b2159421610703eb0124358b93b21187e1b
ba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba0400
0400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a8040000
0b2b59b0102342b0112342002b0018456944456944456944456944737373
747373737475752b7373747475184569447373742b4bb021534bb046515a
58b03cb03c45b040604459012b2b2b2b757575757575757543584010bf3c
cf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf22025f226f22
7f228f229f22af2206757559435c58b6403c9f22ef220375592b2b017474
747445447373747475754544734544737445447374757373737373007575
75737575752b2b757575752b752b435841220063032d00010003032d0013
032d0023032d0033032d0053032d000500c3032d00d3032d00e3032d00f3
032d00040083032d0093032d00a3032d00b3032d0004032d032d45186944
74747575592b4358b900180332b330353238b80332b361663238b80332b3
535a3238b80332b3454e3238b80332b33c413218b80332b23f330a410f03
32000100ba033200ca033200da033200ea033200fa033200050332033245
18694474752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b73
2b74012b002b2b017373737474732b2b00732b2b002b2b2b017374732b01
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b00017375007373004569440073
730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b
2b00000000>
[1757 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> OAAAAA+TimesNewRomanPSMT AddT42Char 
1 118 2 <00010025008d045b04c3000b009f401a2f022f0320082009042f00200520
062f0b6f006f0b0660060106410f035100070327000a0351000b00030327
0002035100000008032700090351b60b0b0060050105bd03510004000003
5100040327b70160080108bb060bb80327401a0560000100bb2002300240
027002d00205200201025c0c585e182b10f65d71f45d3cfd3ce45d002fed
e410e45d103c10f4ed10f4ed10f4fde45d3130005d015d25112135211133
11211521110217fe0e01f25001f4fe0c8d01f35201f1fe0f52fe0d00>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 326 3 <000100530180025802170003003f40200205801d64367f050101000200b0
030300021001500160019001a001d0010601b80134b5008004545a182b10
f6fd5d3c103c002fed3c103c3130015d2b13211521530205fdfb02179700
>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 416 4 <00010003ffe4023e058e0003005240090005cb1f6736000101b80327400d
02031402020303000002010b00b8011f40142003300360037003a003e003
0603bb01ad02cb04b8016fb1df182b10f6edf45ded003f3c3f3c87052e2b
7d10c431302b01012301023efe155001eb058efa5605aa00>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 530 5 <000100f000000306056800160097401440186018a018e018040018401802
76008600020e411301690141000901a00022000301690141000801a00023
000001f8000f016900160141000001f2400e010f0f020902010509080c02
0300ba01f70003014940120e0e0f401135300f7f0f900fa00f040f1917ba
022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c111239011139
00f5edfc01f52b2b3130005d01715d13253311141616171521353e023511
34272626232207f0014a21133c5cfe026038160a07251a254204c7a1fb87
72381e022525021d317a02dc942a201e1f00>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 758 6 <0001002c000003ab0568001e0168408207180b3917181c3d3418401c3d34
19401c3d340f1e161629073c074907a9070640205b045a085b175a186b08
741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020f904f917
1515011d0419051b15191619171d180709170b180b1d3419471989178f20
0718190202171a190c19060d031902050618171615140713040db8016840
090940140c3f80090109b80333400c10051a8f19019f19af190219ba0333
0003018db301020c1eb8018d400d0006e24f135f136f137f130413b80107
4013400001001a002040208020036020a020022019bb01f90003000d0140
40145f026f027f028f02bf02cf02df02ef020802191fba018e010100182b
4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d713c3ffd
71b10602435458b78f0901bf09cf0902005d71592be41112173911123901
111239390210b10602435458b47d198d1902005d590e3c8710057dc40ec4
31300171725d005d012b2b2b002b01032135000035342623220607233636
33321615140706070207213236363703ab5ffce0016101209e6e649f2625
19cf9ba5dd304aa6f93e01626c57461a0105fefb2501420198a981a67571
b9c6d4906767a2b5fef03810312d>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 1222 7 <00010053ffe8035605680032014cb9000affe0b20c3909b8ffc0403c0c39
4109450a460b4b2204cf09012929382940346034cf34e034f70a07003401
41097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c490829b801
8cb328281000b802e4b3d0300130b80334b5030510160116b8019fb51d40
2b2f341db80143b3100d2928bb01680014000902e3400b50208020029020
a0200220b80333b3b00c010cb80190400b502d802d02902da02d022db803
33b55f077f070207b802e5400a403401a034c034023400b8013eb74013bf
1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d71f45ded
5d71e410f43c003fed2bed723fed5ded12392fed3130437940362e2f1e26
0a0f04062221232124212521040605250e26260a2062012f042d62011e0f
206201210b2762010a092e063062011f0d1d62002b2b103c2b012b2b2b2b
2b2a81818181005d01715d7200712b2b1336363332171615140716161514
070621222635343633321716161716333236353427262726262323353e02
353426232207683ab184a35742ba7d807092feeb89632f21191a11781725
2a6697231a1f2b964e204f9f4881609b68044a89956a4f5a949e31b67bb0
81a844271d2c08053f060b9e6c4f4b381d28411e0a5e844f677fa600>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 1700 8 <0001ffee01c50411020e0003001db900020327400a00001a050167044748
182b10e54e10f6002f4ded3130012135210411fbdd042301c549>OAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>OAAAAA+TimesNewRomanPSMT AddT42Char 
OAAAAA+TimesNewRomanPSMT /CharStrings get begin
/space 1 def
/plus 2 def
/hyphen 3 def
/slash 4 def
/one 5 def
/two 6 def
/three 7 def
/endash 8 def
end
OAAAAA+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 43 /plus put
dup 45 /hyphen put
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 208 /endash put
pop
end
%ADOEndSubsetFont
/ZHYQEW+TimesNewRomanPSMT /OAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/ZHYQEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash 
/.notdef /one /two /three 156{/.notdef}rp /endash 47{/.notdef}rp]
ZHYQEW+TimesNewRomanPSMT nf
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
200.722 87.507 mo
(- 1)
[5.98842 4.49591 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
220.198 87.507 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
263.42 87.1188 mo
(j )
[4.99585 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
272.912 87.1188 mo
(- 1/2)
[5.98843 4.49591 8.99179 4.99585 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
306.377 87.1188 mo
(\000\001)sh
%ADOBeginSubsetFont: PAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000007da6670
676d000000000000089800000631676c79660000000000001ecc0000018e
686561640000000000000ecc00000036686865610000000000000f040000
0024686d74780000000000000f28000000086c6f63610000000000000f30
000000066d6178700000000000000f38000000206e616d65000000000000
0f580000002c707265700000000000000f8400000f456764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f000040425554403f3e3d3c3b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019234445b01a23444565234520b00325606a20b009234223688a6a6061
20b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b2359
61441cb114008a5279b31940201945208a54582321b03f1b235961442d2c
b110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d
432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b5258
45441b2121592d2c0120b003252349b04060b0206320b000525823b00225
3823b002256538008a63381b212121212159012d2c4bb06451584569b009
43608a103a1b212110592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d
2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802
b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2cb4000100000015b00826b00826b00826b008260f1016134568
3ab001162d2cb4000100000015b00826b00826b00826b008260f10161345
68653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b545820
458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b21
21592d2c014b53234b515ab00225b00425b006254923451869525a58b002
25b00225b00525462345696048592121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c462346608a8a462320468a608a61b8ff8062232010238ab9035803588a
70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2cb0024354584b53234b515a58381b2121591b21
212121592d0000000001000000050ccd571894305f0f3cf5081908000000
0000a2e31dc200000000c5b1f690fb74fd8c1000080e0000000900010000
00000000000100000721fe4500571000fb74fadf10000001000000000000
000000000000000000020639011c052500320000003b00c7000000010000
000200f2003c009d000700020010002f00560000062504eb000500020000
000100120001000000000006001800004a495751565a2b54696d65734e65
77526f6d616e50534d540000b9005403ecb3032a1f3f411503e4006003e9
009f03e500df03e50004001003e4001003e5003f03e5007003e400ff03e4
0005ffc003e1b345453240b803e1b32b2e3240b803e1b2282932b9ffc003
e1b21a1c32bd03e102ac0027001fffc003dfb2161b32b9ffc003deb24242
32b9ffc003deb2363832b9ffc003deb32a2d32df410a03de00ef03de0002
03de03df0028001fffc003dfb3282e32f0410d03df0001037e000f010100
1f00a003dd00b003dd0002004003dab32426329fbf03cc000103ca03c900
64001fffc003c9b20d1132410a03c703b70012001f03b603b50064001fff
c003b5b30e1132004173038d000100c0038d00d0038d00e0038d00f0038d
0004006f03a7007f03a7008f03a700af03a70004000f03a7001f03a7002f
03a7004f03a7000403ab03ab00ef03a50001000f03a5002f03a5006f03a5
008f03a50004005403aa0001006b03aa000103a8036a0022001f038c0394
0015001f038b03930015001f03a40393001a001f03a20394001e001f03a1
0393001e001f039f0394001e001f039b0394001a001f039a0393001e001f
039903940016001f039803940016001f03970393001b001f03960394001b
001f03950393001b001f03760375001a001f03740375001a001f03a00373
b21e1f10411e039300200393003003930003002003940030039400400394
00030000039400010383036c001e001f03b1036c0032001f036d036c0032
001fffc0037db2212332b9ffc0037db3171932a0410a037d00b0037d00c0
037d00d0037d0004ffc0037cb2212332b9ffc0037cb3171932a0412d037c
00b0037c00c0037c00d0037c000400300373004003730002000003730010
037300200373000300e0037300f00373000200b0037300c0037300d00373
0003008403730090037300a0037300030377036a0029001f0389036ab228
1f40b80367b33940323fbb0366000100400366b3191d328fbb0366000100
400366b3090a3240b80366b3090e3240b80366b3090f323fbb0365000100
400365b3090c3240b80365b31a1d3240b80365b3090e326b410e0363007b
036300020014036300240363003403630044036300040363b2242f1fba03
4e006d0800400e1f7f027f037f047f050430440112bf033200500800001f
0012032d003c080040291f5f3c0137600970098009031009200930094009
5009056f037f038f03031f032f033f034f035f0305b8ffc0b2073a33b8ff
c04047063a33900ba00bb00bc00bd00b05b006c006d006e006f006052006
3006400650066006700680069006a006099006900702600b700b800b0310
0b200b300b400b500b051f0701a041850362000100000362001003620070
036200900362000400f0035f00010020035e0020035f0030035f0040035e
00040000035e0000035f0010035f00d0035e00e0035f00050010030f0020
030f0030030f00d0030f00e0030f00050000030f0010030f0050030f0060
030f0070030f00d0030f00060000030f0010030f0020030f0030030f00e0
030f00f0030f0006030f00270000030e0030030e000200e0030e00f0030e
0002030e004a00e0030d00f0030d0002030d002700d002fc0001001002fc
002002fc005002fc000300d002fc00e002fc0002000002fc001002fc0020
02fc003002fc005002fc006002fc000600e002fc00f002fc0002002002fc
003002fc004002fc000302fc406127c02901b02901a02901902901403c3f
413240223f41321212125f235f255f285fa5046f236f256f286fa5044f23
4f254f284fa5043f233f253f283fa5042f232f252f282fa5041f231f251f
281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8
ffc0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02
af00df02af0003001f02af002f02af003f02af006f02af000402af02af00
1f02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02
ad001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad000200
0f02ad001f02ad003f02ad0003004002acb23a334f414a02ac005f02ac00
9f02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300
b002ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02
ac003f02ac0003000f035a0001000f035a001f035a003f035a005f035a00
70035a000500cf035700df03570002000f0357001f03570070035700af03
570004035a035a0357035702ad02ad02ac02ac032c400d31151f00161600
0000121108104110020c004a000d01a8004a000d0198004a000d0189004a
000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a0dbe022800
41000d01940041000d0121400b410db4410d4f410d29410d411002170021
000d02150021000d02060021000d01eb0021000d014e0021000d012c4014
210df9210df3210df1210d9d210d71210d3d210d4110021c001f000d0214
001f000d020b001f000d0196001f000d014a001f000d0126400b1f0dc61f
0d571f0d371f0d410d019e0141000d00420141000d001e0141000d001b01
41000d01f2b40f440f0009bb01f20044000d0201b23c291fb80200b23c29
1fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fab23c931fbc
01f9010f0101001f01f6b224e41f411501f401490401001f01f301490401
001f01f1014900ab001f01f001490067001f01a6003c0125001f01a4b23c
811f411501a3010f019a001f01a200220801001f01a100500401001f019f
0149019a001f019d01490067001f019cb22c621fb8019bb22c791fbc019a
002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c1fb8018fb2
259e1fb8016ab23c2a1f4111016700240201001f0163002502ab001f014c
010f019a001f01480149006c001f0147b22c891fb80145b22c9e1fb80144
b22c791fb80143b223311fb80127b23c811fbc012300500101001f011fb2
23e41f4115011d0023019a001f011c00230801001f011b00250801001f01
0e010f0401001f010d00220401001f0108b223811fb80106b425e41ff73c
bb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2ab1fd1b901
490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02cb80801b21f
bf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23b80801b21f
a523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812cbc0401001f
006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f403cb8012540
0a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f3025b802abb6
1f2a24e41f2623b80156b21f5537ba023500070175402c07740762075607
51073b0733072d0720071d071c071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b534201b0124b004b5442b0372b4bb807ff52b0382b4bb008505b58b101
018e59b0382bb00288b801005458b801ffb101018e851bb0124358b90001
012f858d1bb90001017c858d5959014bb0c063004b6220b0f65323b8010a
515ab0052342180016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d
594bb04753205c58b90271026f4544b90270026f45445958b9017a027145
5258b90271017a4459594bb04753205c58b9002202704544b9003c027045
445958b901b30022455258b9002201b34459594bb04c53205c58b9014900
224544b1222245445958b901c20149455258b9014901c24459594bb06753
205c58b9002402714544b90050027145445958b9021e0024455258b90024
021e4459594bb8020153205c58b9010f00224544b1222245445958b90c00
010f455258b9010f0c004459594bb01c53205c58b125254544b12c254544
5958b13725455258b125374459594bb0ab53205c58b125254544b1232545
445958b901590025455258b9002501594459594bb8010153205c58b12525
4544b1282545445958b902080025455258b9002502084459592b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b361
dc6463456523456023456560234560b08b766818b080622020b164dc4565
234520b003266062636820b003266165b0dc236544b064234420b1616345
65234520b003266062636820b003266165b063236544b0612344b1006345
5458b163406544b26140614523614459b3a67f434b456523456023456560
234560b089766818b080622020b1437f4565234520b003266062636820b0
03266165b07f236544b043234420b1a64b4565234520b003266062636820
b003266165b04b236544b0a62344b1004b455458b14b406544b2a640a645
236144594b5242014b5058b108004259435c58b108004259b3020b0a1243
58601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b0
0c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342
b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b01123
42002b0018456944456944456944456944737373747373737475752b7373
747475184569447373742b4bb021534bb046515a58b03cb03c45b0406044
59012b2b2b2b757575757575757543584010bf3ccf3c026f3c7f3c8f3c9f
3caf3c0575755943584012bf22cf22025f226f227f228f229f22af220675
7559435c58b6403c9f22ef220375592b2b01747474744544737374747575
454473454473744544737475737373737300757575737575752b2b757575
752b752b435841220063032d00010003032d0013032d0023032d0033032d
0053032d000500c3032d00d3032d00e3032d00f3032d00040083032d0093
032d00a3032d00b3032d0004032d032d4518694474747575592b4358b900
180332b330353238b80332b361663238b80332b3535a3238b80332b3454e
3238b80332b33c413218b80332b23f330a410f0332000100ba033200ca03
3200da033200ea033200fa03320005033203324518694474752b2b2b2b2b
2b597300732b012b7575002b2b2b74002b2b2b732b74012b002b2b017373
737474732b2b00732b2b002b2b2b017374732b012b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b00017375007373004569440073730173742b2b2b2b2b73
2b00732b752b2b732b2b2b2b2b2b2b2b2b73742b2b00000000>
[399 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 118 1 <00020032000004f2056b0003000600ec404348057a058a05990504051810
12340218101234032c0b1134042c091134250379068806f706040c021b02
020a011a017a018a01f801050b051b05580503050504010000b802c94016
06051406060505040506042203021403030204060306b802c9b2000805b8
0205401502010302010003a7200470048004030f0440040204b801b2400f
0500901f062f066f067f068f060506b802ec40151f05014f05af05df05ef
05048005af050205050807191112392f5d7172f45d18ed1910f45d5d18ed
113939003f3ced3fed3c103c87052e2b087d10c487052e182b87087dc431
30015d5d5d5d2b2b2b2b005d3301330127010132026022023eeffe6bfe4a
056bfa955503e4fc1c00>PAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>PAAAAA+TimesNewRomanPSMT AddT42Char 
PAAAAA+TimesNewRomanPSMT /CharStrings get begin
/Delta 1 def
end
PAAAAA+TimesNewRomanPSMT /Encoding get
dup 33 /Delta put
pop
end
%ADOEndSubsetFont
/ZHYQEX+TimesNewRomanPSMT /PAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/ZHYQEX+TimesNewRomanPSMT*1 
[33{/.notdef}rp /Delta 222{/.notdef}rp]
ZHYQEX+TimesNewRomanPSMT nf
ZHYQEX+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
301.28 364.913 mo
(!)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
312.845 364.913 mo
(x)sh
320.827 364.913 mo
( )sh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
325.323 364.913 mo
(/ 2)
[4.99585 4.49591 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
343.807 364.913 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
414.129 87.4969 mo
(j )
[4.99585 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
423.622 87.4969 mo
(+ 1/2)
[10.1427 4.49591 8.99182 4.99585 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
461.24 87.4969 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
500.308 87.1089 mo
(j )
[4.99585 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
509.801 87.1089 mo
(+ 1)
[10.1426 4.49591 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
533.43 87.1089 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
570.625 87.4969 mo
(j )
[4.99585 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
580.117 87.4969 mo
(+ 3/2)
[10.1427 4.49591 8.99182 4.99585 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
617.735 87.4969 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
628.58 212.588 mo
(n)sh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
637.572 212.588 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
608.568 263.894 mo
(n )
[8.99182 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
622.055 263.894 mo
(\320 1/)sh
649.531 263.894 mo
(2)sh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
658.523 263.894 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
615.173 316.558 mo
(n )
[8.99182 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
628.661 316.558 mo
(\320 1)sh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
651.14 316.558 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
608.488 158.087 mo
(n )
[8.99182 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
621.975 158.087 mo
(+ 1/2)
[10.1426 4.49591 8.99182 4.99585 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
659.593 158.087 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
615.977 108.183 mo
(n )
[8.99182 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
629.465 108.183 mo
(+ 1)
[10.1427 4.49591 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
653.094 108.183 mo
(\000\001)sh
356.12 313.168 mo
356.12 310.726 358.213 308.747 360.795 308.747 cv
363.377 308.747 365.47 310.726 365.47 313.168 cv
365.47 315.609 363.377 317.589 360.795 317.589 cv
358.213 317.589 356.12 315.609 356.12 313.168 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
356.12 313.168 mo
356.12 310.726 358.213 308.747 360.795 308.747 cv
363.377 308.747 365.47 310.726 365.47 313.168 cv
365.47 315.609 363.377 317.589 360.795 317.589 cv
358.213 317.589 356.12 315.609 356.12 313.168 cv
cp
.686061 .353338 .0289006 0 cmyk
9525 lw
gsave
[7.86686e-05 0 0 7.86796e-05 356.12 308.747 ]ct
@
grestore newpath
355.731 207.56 mo
355.731 205.118 357.824 203.139 360.406 203.139 cv
362.988 203.139 365.081 205.118 365.081 207.56 cv
365.081 210.001 362.988 211.981 360.406 211.981 cv
357.824 211.981 355.731 210.001 355.731 207.56 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
355.731 207.56 mo
355.731 205.118 357.824 203.139 360.406 203.139 cv
362.988 203.139 365.081 205.118 365.081 207.56 cv
365.081 210.001 362.988 211.981 360.406 211.981 cv
357.824 211.981 355.731 210.001 355.731 207.56 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 355.731 203.139 ]ct
@
grestore newpath
356.106 101.633 mo
356.106 99.1918 358.199 97.2125 360.781 97.2125 cv
363.363 97.2125 365.457 99.1918 365.457 101.633 cv
365.457 104.075 363.363 106.054 360.781 106.054 cv
358.199 106.054 356.106 104.075 356.106 101.633 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
356.106 101.633 mo
356.106 99.1918 358.199 97.2125 360.781 97.2125 cv
363.363 97.2125 365.457 99.1918 365.457 101.633 cv
365.457 104.075 363.363 106.054 360.781 106.054 cv
358.199 106.054 356.106 104.075 356.106 101.633 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 356.106 97.2125 ]ct
@
grestore newpath
432.007 259.771 mo
432.007 257.33 434.1 255.35 436.682 255.35 cv
439.264 255.35 441.357 257.33 441.357 259.771 cv
441.357 262.213 439.264 264.192 436.682 264.192 cv
434.1 264.192 432.007 262.213 432.007 259.771 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
432.007 259.771 mo
432.007 257.33 434.1 255.35 436.682 255.35 cv
439.264 255.35 441.357 257.33 441.357 259.771 cv
441.357 262.213 439.264 264.192 436.682 264.192 cv
434.1 264.192 432.007 262.213 432.007 259.771 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 432.007 255.35 ]ct
@
grestore newpath
511.712 313.168 mo
511.712 310.726 513.805 308.747 516.387 308.747 cv
518.969 308.747 521.062 310.726 521.062 313.168 cv
521.062 315.609 518.969 317.589 516.387 317.589 cv
513.805 317.589 511.712 315.609 511.712 313.168 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
511.712 313.168 mo
511.712 310.726 513.805 308.747 516.387 308.747 cv
518.969 308.747 521.062 310.726 521.062 313.168 cv
521.062 315.609 518.969 317.589 516.387 317.589 cv
513.805 317.589 511.712 315.609 511.712 313.168 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 511.712 308.747 ]ct
@
grestore newpath
512.087 208.617 mo
512.087 206.175 514.18 204.196 516.762 204.196 cv
519.344 204.196 521.437 206.175 521.437 208.617 cv
521.437 211.058 519.344 213.038 516.762 213.038 cv
514.18 213.038 512.087 211.058 512.087 208.617 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
512.087 208.617 mo
512.087 206.175 514.18 204.196 516.762 204.196 cv
519.344 204.196 521.437 206.175 521.437 208.617 cv
521.437 211.058 519.344 213.038 516.762 213.038 cv
514.18 213.038 512.087 211.058 512.087 208.617 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 512.087 204.196 ]ct
@
grestore newpath
511.952 101.633 mo
511.952 99.1918 514.045 97.2125 516.628 97.2125 cv
519.21 97.2125 521.303 99.1918 521.303 101.633 cv
521.303 104.075 519.21 106.054 516.628 106.054 cv
514.045 106.054 511.952 104.075 511.952 101.633 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
511.952 101.633 mo
511.952 99.1918 514.045 97.2125 516.628 97.2125 cv
519.21 97.2125 521.303 99.1918 521.303 101.633 cv
521.303 104.075 519.21 106.054 516.628 106.054 cv
514.045 106.054 511.952 104.075 511.952 101.633 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 511.952 97.2125 ]ct
@
grestore newpath
432.007 153.628 mo
432.007 151.186 434.1 149.207 436.682 149.207 cv
439.264 149.207 441.357 151.186 441.357 153.628 cv
441.357 156.069 439.264 158.048 436.682 158.048 cv
434.1 158.048 432.007 156.069 432.007 153.628 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
432.007 153.628 mo
432.007 151.186 434.1 149.207 436.682 149.207 cv
439.264 149.207 441.357 151.186 441.357 153.628 cv
441.357 156.069 439.264 158.048 436.682 158.048 cv
434.1 158.048 432.007 156.069 432.007 153.628 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 432.007 149.207 ]ct
@
grestore newpath
587.293 259.229 mo
587.293 256.788 589.386 254.808 591.968 254.808 cv
594.55 254.808 596.643 256.788 596.643 259.229 cv
596.643 261.671 594.55 263.65 591.968 263.65 cv
589.386 263.65 587.293 261.671 587.293 259.229 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
587.293 259.229 mo
587.293 256.788 589.386 254.808 591.968 254.808 cv
594.55 254.808 596.643 256.788 596.643 259.229 cv
596.643 261.671 594.55 263.65 591.968 263.65 cv
589.386 263.65 587.293 261.671 587.293 259.229 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 587.293 254.808 ]ct
@
grestore newpath
587.118 154.512 mo
587.118 152.07 589.211 150.091 591.793 150.091 cv
594.375 150.091 596.468 152.07 596.468 154.512 cv
596.468 156.953 594.375 158.933 591.793 158.933 cv
589.211 158.933 587.118 156.953 587.118 154.512 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
587.118 154.512 mo
587.118 152.07 589.211 150.091 591.793 150.091 cv
594.375 150.091 596.468 152.07 596.468 154.512 cv
596.468 156.953 594.375 158.933 591.793 158.933 cv
589.211 158.933 587.118 156.953 587.118 154.512 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 587.118 150.091 ]ct
@
grestore newpath
279.816 258.91 mo
279.816 256.468 281.909 254.489 284.491 254.489 cv
287.073 254.489 289.167 256.468 289.167 258.91 cv
289.167 261.351 287.073 263.331 284.491 263.331 cv
281.909 263.331 279.816 261.351 279.816 258.91 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
279.816 258.91 mo
279.816 256.468 281.909 254.489 284.491 254.489 cv
287.073 254.489 289.167 256.468 289.167 258.91 cv
289.167 261.351 287.073 263.331 284.491 263.331 cv
281.909 263.331 279.816 261.351 279.816 258.91 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 279.816 254.489 ]ct
@
grestore newpath
279.576 154.512 mo
279.576 152.07 281.669 150.091 284.251 150.091 cv
286.833 150.091 288.926 152.07 288.926 154.512 cv
288.926 156.953 286.833 158.933 284.251 158.933 cv
281.669 158.933 279.576 156.953 279.576 154.512 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
279.576 154.512 mo
279.576 152.07 281.669 150.091 284.251 150.091 cv
286.833 150.091 288.926 152.07 288.926 154.512 cv
288.926 156.953 286.833 158.933 284.251 158.933 cv
281.669 158.933 279.576 156.953 279.576 154.512 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 279.576 150.091 ]ct
@
grestore newpath
199.871 313.598 mo
199.871 311.156 201.964 309.177 204.546 309.177 cv
207.128 309.177 209.221 311.156 209.221 313.598 cv
209.221 316.039 207.128 318.018 204.546 318.018 cv
201.964 318.018 199.871 316.039 199.871 313.598 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
199.871 313.598 mo
199.871 311.156 201.964 309.177 204.546 309.177 cv
207.128 309.177 209.221 311.156 209.221 313.598 cv
209.221 316.039 207.128 318.018 204.546 318.018 cv
201.964 318.018 199.871 316.039 199.871 313.598 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 199.871 309.177 ]ct
@
grestore newpath
200.111 207.67 mo
200.111 205.228 202.205 203.249 204.787 203.249 cv
207.369 203.249 209.462 205.228 209.462 207.67 cv
209.462 210.111 207.369 212.091 204.787 212.091 cv
202.205 212.091 200.111 210.111 200.111 207.67 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
200.111 207.67 mo
200.111 205.228 202.205 203.249 204.787 203.249 cv
207.369 203.249 209.462 205.228 209.462 207.67 cv
209.462 210.112 207.369 212.091 204.787 212.091 cv
202.205 212.091 200.111 210.112 200.111 207.67 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 200.111 203.249 ]ct
@
grestore newpath
200.111 101.633 mo
200.111 99.1918 202.205 97.2125 204.787 97.2125 cv
207.369 97.2125 209.462 99.1918 209.462 101.633 cv
209.462 104.075 207.369 106.054 204.787 106.054 cv
202.205 106.054 200.111 104.075 200.111 101.633 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
200.111 101.633 mo
200.111 99.1918 202.205 97.2125 204.787 97.2125 cv
207.369 97.2125 209.462 99.1918 209.462 101.633 cv
209.462 104.075 207.369 106.054 204.787 106.054 cv
202.205 106.054 200.111 104.075 200.111 101.633 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 200.111 97.2125 ]ct
@
grestore newpath
124.1 258.782 mo
124.1 256.341 126.193 254.361 128.775 254.361 cv
131.357 254.361 133.451 256.341 133.451 258.782 cv
133.451 261.224 131.357 263.203 128.775 263.203 cv
126.193 263.203 124.1 261.224 124.1 258.782 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
124.1 258.782 mo
124.1 256.341 126.193 254.361 128.775 254.361 cv
131.357 254.361 133.451 256.341 133.451 258.782 cv
133.451 261.224 131.357 263.203 128.775 263.203 cv
126.193 263.203 124.1 261.224 124.1 258.782 cv
cp
.686061 .353338 .0289006 0 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 124.1 254.361 ]ct
@
grestore newpath
122.47 153.54 mo
122.47 151.099 124.564 149.12 127.146 149.12 cv
129.728 149.12 131.821 151.099 131.821 153.54 cv
131.821 155.982 129.728 157.961 127.146 157.961 cv
124.564 157.961 122.47 155.982 122.47 153.54 cv
cp
.989349 .713832 .202213 .0462043 cmyk
ef
122.47 153.54 mo
122.47 151.099 124.564 149.12 127.146 149.12 cv
129.728 149.12 131.821 151.099 131.821 153.54 cv
131.821 155.982 129.728 157.961 127.146 157.961 cv
124.564 157.961 122.47 155.982 122.47 153.54 cv
cp
gsave
[7.86686e-05 0 0 7.86796e-05 122.47 149.12 ]ct
@
grestore newpath
288.655 359.673 mo
279.818 359.673 li
279.818 322.036 li
288.655 322.036 li
288.655 359.673 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 425 ]ct
[9.49091 0 0 38.2909 279.491 65 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 29 
/H 117 
/M[29 0 0 -117 0 117 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&Y5n=um/Zn^q>g-fp]9a^p]9d_o`=O^o`=R_!!)Zmn,WIhq?$Wsnc8Uh!!<'#!!<*"o)S^i
!!<'#!!<*"o)S^i!!<'#!<N<$!V6<j!<E6(qud-)!WiB'o)Jpp!<N?+"TAQ,"9\f.rW2Wk"T\W*!s8]*
"Tnl0!s8H&oDf$q!<N?*"TAQ,"9S`-rW2iqqZ$d#!WrQ/"o\]1"U,#2!W`>p!<*!$!sAf5rWi]5"p>#0
!<MinrW*'&"9n]."U,#2!W`>p!<*!#!sAf*#6b86!s/K(o`,-r!WiK.#65)0$3geA"U"o/!VQNm!=T&5
#71_G%1ERM#6Y/.!VZTn!=T&5"pbMC$k!@I"p>&-!VZTn!<`K-"pbP7$NpbA"p>&-!VZR+!<E6)"UGJF
%M'$Y$O?n=!W`9%pAbg,!<NB.#n.:T&J,H]#mUS7!<Mop&ci"7!sJr<%1a!\%LWOH!s/K(pAbF!!<N?,
#R_+@%gNOO#R1A4!<Mop&ci"8"U>DF&JPro&e59T"Tnf,p](9p&-2e6":#;F',;8t'+bNW"U"`)q#LBp
%Kch=$4[X]'GD&g$3p_:rW2fprW*0)":#8C&cNFI&Io-Q"U"`)q#D*0!<NB-#n@Ra)&aA/'+P?R"9JT)
q#LBp#Qt><%2'Eo)Arer'+P?R"9JT)q#LBp&H`1B$kO*h(`*ku%1*1?!W`>t!<*!&!sJr=&/>*[#S[j[
#mCD4!<Mur'EJ49"U>DH()n><*uc".$jQq<!<MurrW*Z8#7;"W)''b=)ANek#6Y)/!<<,s!<*!2"9o/B
',MQ+)Aj+t$3gV7!<MurrW*T6"pkbQ(E+52(D@8c"p=u.!Vl^0!<N<+#RqFb+!W$U+;kh&#R(;3!Vl^0
!<E6)#7M1[*$?CI*#B1r#6Y)/!Vl]u!<E6)#7h1R'H%o4*?#Y($jQn:!<Mur'EJ49":#;F'H%o4*>oS&
$O6e9!<Mur'EJ7;"UPYR)^-RW-R'NF%g`CA!Wi)s'EJ49":#AK(`jkG+s.[9%1!(=!<Mur%fl\4":#>H
()n><*ul%.$j6e<!s&Gu!#,G7!X&`9&/?-*+<DI;&I\mI!s&Gu!#,G8!sJuA(*+YL.OcYb(D$oW"9JW"
!#,G7!X/i=',_l:,pOKM'+G6O!s&Gu!#,G7!X/f;&JlE0+WqaA&e#$L!s&H"!#>P7!<E6*#7D+[)^$:H
*#B1q#R(;2!Vl^0!<N?-$4dpp,q:Gq-6O*9$O-_8!Vl^0!<E6*#RqFb+!`-X+;tn'#mCD3!Vl^0!<E6*
#7M4]*$HLL*>fCu#R(;2!Vl^$!<E6*#7M1\*"*l5+<;71%1!+>!<Mur'EJ7;"ptnX+!rKi.jlGU&ISdG
!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'*/+8"U>GJ(EFYC
+W_I5%1!+>!<</r!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7
!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!!**%&d&=F&/QH:/1rJ%+;b[u
"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r
+X/'N(_R8`"Tnc+q#Cg(!WrW6&/QH:/1rJ%#9Xiq$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0
!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=
$O-_8!WE)s!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;
&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!!NB(!X/i=%MKa',pjo])\`bg"Tnc+
q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%
+;b[u"p=u.q#Cs,!<NE1%20X&,pjo])\`bg!sJc-!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*
#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3
!Vud2!!**%"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m
/1;VX&ISdG!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur#lt&."U>GK(`ab,,9\*F&e,*M!s&Gu!#,G7
!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ
!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V
/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!!30%
!YGS@$kX9r+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg
"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#Cj)!<NE0$kX9r+X/'N(^:T^#R(;2!Vl^0!<N?-$4n!r
-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0
!<E6*#7M1\*?cUM*Z,M!#R(;2!W<#s!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS
'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!!WH*!sT)D
(C_K7/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+
q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+q#D!-!WrW6&/QH:/1rJ%+;b[u"p+o/!Vl^0!<E6*#RqFc+=/?\
+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-
$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!W<#s!#,G7!X/f;&f;W4,9\*F&e,*M
!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>
-7'fS'FkEQ!s&Gu!!WH)!X/f;&e,Zu+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+q#D*0
!WrW6&/QH:/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D!-!<NE0$kaBt+X8-O(_R8`
"Tec,!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc
+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0
!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!
#R(;2!Vl^&!<E6*#7M1\*?cU5+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s'EJ49"UGPN
)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'`e=:"U>GJ(EFYC+W_I5%1!+>!<E2s
!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F
&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!!<6'!sT;D&/QH:/1rJ%+;b[u"p=u.q#D*0!<NE1
%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+
q#Cm*!WrW6&/QH:/1rJ%+;b7o$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN
*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!W2rs!#,G7
!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M
!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!!`N*!X/i=',h9%,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt
+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%+;b[u"p=u.q#D$.
!<NE1%20X&,pjo])\`bg"U"c*q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`
"Tnc+q#D*0!WrW6&/QH:/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#CBq'*/.<#7M4^
*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0
!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^'!<E6*#7M4^*?cXN#Tafq%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5
%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur('+F;"U>GK
(`abE+W_I5%1!+>!<E0#qZ%<2!<NE0$kX9r+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%+;b[u"p=u.
q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#CNu!<NE0%h'$d*?cUM
*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*
#7M4^*?cXN*Z,M!#R(;2!Vl^+!<E6*#7M1\*?cUM*Z,M!":,/5!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG
!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC
+W_I5%1!+>!<N&t('"=8!WrW6&/QH:/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0
!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+q#C[$!WrW6&/QH:$S3n]-m0?=
$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\
*?cUM*Z,M!#R(;2!Vl^/!<N?-$4n!r-S-l$-m0?=$O-_8!!2lq'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur
'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX
&ISdG!Wi)srrE`6"UGPN)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ
(EFYC+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s$ipA1"UGPN)B^=Q,p<L4'FkEQ!s&Gu
!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn
(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&H%!;lg2!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*
#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3
!Vl^!!<E6*#7M(T(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m
/1;VX&ISdG!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur&-2e5"U>GK(`abE+W_I5%1!%>!s&Gu!#,G7
!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ
!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&H!!#5J7!<NE0$kX9r+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:
/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#C^%
!<NE0$kX9r+UTD:*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*
#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r
-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0
!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl]s!<N?8"ptnX+=A]m/1;VX&ISdG!Wi)s'EJ49"UGPN)B^=Q,p=3A
%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur%06M4"ptnX
+=A]m/1;VF(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu
!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW&!;um3!<E6*#RqFc+=/?\
+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-
$4n!r-S-l$-m0?=$O-_8!Vl^"!<E6*#RqFV)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>
!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s&HMn6"UGPN)B^=Q
,p=3A%LE:?!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8
!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M
!s&H$!;um3!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc
+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^"!<E6*#7M1R(EFYC+W_I5%1!+>!<Mur
'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5
%1!+>!<Mur&HMn6"U>GJ(EFYC+W_I5%1!+=!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=
',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu
!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F
&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!"&`.!sT)D(Eb(V/dX'W+;b[u"p=u.q#D*0!<NE1
%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+
q#D-1!WrW6&/QH:/1rJ%+;b[u"p=u.!;Z[0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN
*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl]t!<E6*
&-r^Y)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>
!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s%KQS3"UGPN)B^=Q,p=3A"V(hB!s&Gu!#,G7!X/f;&f;W4
,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7
!X/i=',hu>-7'fS'FkEQ!s&H#!<)s4!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!
#R(;2!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^#!<E6*#7M4^
$lpK9+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s
'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur&ci"7"U>GK(`abE+W_I5%1!+>rrMoq'EJ49"U>GJ(EFYC+W_I5
%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX&ISdG!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK
(`abE+W_I5%1!+>!<Mur!!*`6!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"
!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!"/f.!X/f;&JlH2+s@45
(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0!<NE0
$kaBt+X8-O(_R8`"Tnc+q#D02!<NE0$kX9r+X/'N(_R8`"Tnc+!!)lr'EJ7;"ptnX+=A]m/1;VX&ISdG
!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC
+W_I5%1!+>!<Mur"9AQ+"ptkP(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ!s&Gu!#,G7
!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;&JlH2+sA!E&e,*M!s&Gu!"T)3!sT)D(Eb(V/hACn(_HlY
"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r
+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%+;b[u"p=u.qZ%B3!!**%"UGPN)B^=Q,p=3A%LE:@!<Mur
'EJ49"U>GK(`abE+W_I5%1!+>!<Mur'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur'EJ7;"ptnX+=A]m/1;VX
&ISdG!Wi)s#QXr-"UGPN)B]D6-7'fS'FkEQ!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!#,G7!X/f;
&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!##A6!X/i=',hu>-7'fS'FkEQ!s&B&
q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0$kX9r+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%
+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#LEq&cr4A$kaBt+X8-O(_R8`"Tnc+q#D*0!<NE0
$kX9r+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+
q#Cg(!<NE0$kaBt+X8-O#8e'_#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vl^0!<N?-$4n!r-S-l$
-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!WE)s!#,G7
!X/f;&JlH2+sA!E&e,*M!s&Gu!#,G8!sT)D(Eb(V/hACn(_I,["9JW"!#,G7!X/i=',hu>-7'fS'FkEQ
!s&Gu!#,G7!X/f;&f;W4,9\*F&e,*M!s&Gu!!NB(!X/f;%M9Kt+X/'N(_R8`"Tnc+q#D*0!WrW6&/QH:
/1rJ%+;b[u"p=u.q#D*0!<NE1%20X&,pjo])\`bg"Tnc+q#D*0!<NE0$kaBt+X8-O(_R8`"Tnc+q#Cs,
!<NE0$kX9r+X/'N(_R8`!sJc-!Vl^0!<N?-$4n!r-S-l$-m0?=$O-_8!Vl^0!<E6*#RqFc+=/?\+WD+*
#mCD3!Vl^0!<E6*#7M4^*?cXN*Z,M!#R(;2!Vl^0!<E6*#7M1\*?cUM*Z,M!#R(;2!Vud2!!*-'"ptnX
+=A]m/1;VX&ISdG!Wi)s'EJ49"UGPN)B^=Q,p=3A%LE:@!<Mur'EJ49"U>GK(`abE+W_I5%1!+>!<Mur
'EJ49"U>GJ(EFYC+W_I5%1!+>!<Mur#lt)0"ptnX+=A]I/hACn(_I,["9JW"!#,G7!X/i=',_l;,pXTO
'FkEQ!s&Gu!#,G7!X/f;&f2N2+s@sD&e,*M!s&Gu!#,G7!X/f;&JlE0+s7mB&e,*M!s&Gu!#,G8!sT)D
(EXtS/Lr1k(_I,["9JW"!#,G7!X/i=',_l:,pOKM'+G6O!s&Gu!#,G7!X/f;&JlE0+WqaA&e#$L!s&Gu
!#,G7!X/f:&JlB/+Wqa@&I\pK!s&Gu!#,G8!sT)C(EXqQ/1Mth(D$rY"9JW"!!30%!YGP?%2'L!+sS9R
)&!Gb"9SZ*q#D*0!<NB/$kO0n+!;XF((gr["9SZ*q#D*0!<NB/$P4$l*ZuLC((gr["9SZ*q#D*0!WrT4
%i-02.4Qbm*Z#@p"U"l-q#Cj)!<NB/$kX9q+<_jI(BtK]#6Y,0!Vl^0!<E6)#7D(X)BBk>)ANel#6Y,0
!Vl^0!<E6)#7D%W)''b=)&3\j#6Y,0!Vl^0!<N?,#n@[i+t"cd+rh@/#mCG5!Vl`p!>,G>$4mpi*?Q:?
((^iY"9JT)r;ccrrW*T6"pkbQ(E+83(_dGe#6Y)/!Vl`p!>,G=#n@Ub)B0S2'+P?S"9JT)q#D*0!WiN2
%20U$,:+QW)A<Se"Tnf,q#LBp&Hi:F%2'Eo)As>)%LNCC!W`>t!<*!$!sJu>%1j3i(`*o!%1*1?!W`>t
!<*!&!sJu>&/>*[#Sdp\#mCD4!<Mur'EJ49"U>GI()n><*ul(/$jQq<!<MurrW*K2":#;F',;8t'+bQX
"U"`)q#LBp%Kch=$4[X]'GD&g$O6h;rW2fprW*K2":#8C&JGil&Io0R"U"`)q#D*0!<NB-#n@Ra)&jG0
'+P?R"9JT)p](p-!<NB.#n.=U&J,H]#mUS7!<Mop&ci"7!sJr<%M'*]%LWOH"9JT)p](R"!<E6("UGJF
rXT5C$O?q>!W`?"!;lg0!<E9+#7D"S'GV;p%LWOG!s/Mt!<*!-!sAi8$4I@P$OI%@"9&>q!<*!-!sAf6
#n%.L$4$h="9&>q!<*!%!sAf6$2t;8$4$h="9&>q!!NB(!X&Z4$k!LS%h9'W#R(>4!<Mlo&-2e5!sAf5
#RLbA"p>#0!<Min&-2e5!sAc4#7(P>"U"o/!<Min&-2e5!sAc4#7(P>"U"o/!<Min%fl_6"9f#:$4@1I
#6b54!WW8n!!NB(!WrQ.rWNB,"9S`)!V??q!<E6(!sJT,!sA].!r`5m!!NB(!WrN-rWNB,!s8W(!V??q
!<N?+"U4l0"pG/5!s/K(pAk0mr;cm"quZp#r;lKir;cm"quZp#r;lKir;cm"quZp#r;lKi"9AN)!X&?'
"9S],!<M`kq>pHonGr1^nGr1^nGrOhq?$Wsmf<+`q>g-fp]9a^p]9a^p]8eCJcLB&JcLB&h>i'~>

%%EndBinary
grestore
np
284.251 324.033 mo
284.251 354.549 li
.750271 .679713 .654902 .901945 cmyk
19050 lw
gsave
[7.86686e-05 0 0 7.86796e-05 284.251 324.033 ]ct
@
grestore newpath
365.236 359.346 mo
356.4 359.346 li
356.4 321.709 li
365.236 321.709 li
365.236 359.346 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 425 ]ct
[9.49091 0 0 38.2909 356.073 65.3273 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 29 
/H 117 
/M[29 0 0 -117 0 117 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcMJErW20^rrE*#k5bJ^k5bJ^l2^S[m/Zn^q>g-fp]9a^p]9g`qZ-ZuqZ63eqZ-ZuqZ63eqZ-Zu
qZ63erW3!"!!E3%rW2QirW*6*!WrQ.!s8W'!V6<j!WN6!!rrE$!V6<j!WN6!!s&H(rW2Tj%KQS3!s8Z0
"U"r1!WiB'oDnjk!s/Q-"o\]0"U"o/!<MfmrW*'%!sJN*"9S`-!<MfmrW*'%!sJN*"9S`-!<Murqu?p%
!<N?+"U=r2"U5,5!s/Mq!!WH)!X&Z3#lY,7#6k;5!W`>p!!WH)!WrT1#Q=u5#6b54!W`>p!!WH)!WrT1
#Q=u5#6b54!W`>p!!NB)!sJl7!"/]5"pkM<"9S]+p&P'm"9Sf4$4HhB":GM@"9\W(pAk0n"9Sf3#n$Y?
":>D="9\W(pAk0n$j-Y;#mq%K$OR.D"9\W(pAbd+!<NB.#Rh1R&.]6Y#R(>4!<</p!"o;5!X&`8%1j*a
&J#9V#6Y)/!VZR!!<E6)"pk\JrX];E$O?q=!W`>r!"o;5!X&]6$P![Y%h/mP"p4o-!VZR,!<N?,#Rh4W
'c%Ms%LWOG!s&Gt!!!$)!<E9+#Rh7XrY>YN%grXH"9&>s!<*!&!sJo;%MJaT"VD4O#6b5/!Vl`p!=f28
#7D"R',2)l%13=D"9&>s!#,G7!X&]7%MKWs)]BM*%LNCC!W`>t!"/f.!X&]7%MKWs)]8ep&e,0P"9&>s
!"f54!WrT4%2'Bm(`*kt$jd(>rW2fp&HMn6!sJu?&JZ*!(DIDh#mCG1!Vl^0!<E9+#7M1\*$?@G)\rtn
#6Y)/!Vl^-!<E6)#7D(Y)BBn?)AE_j#6b#,rrDor&HMn6":#8E'Gq`.)Aj(s$3gV3!Vl^-!<E6)#7:tT
(E+52(D72b"p=i*q#D*0!WrT4%MTg(,:+QW(_[Ab"Te`+q#D*0!<WH1%2'Ku+<hmI((gr["9JT)q#CNu
!<WH0%h'!b)BBn>)AE_j#6P#.!Vl^0!<E9*#7D(X)BBk=)&*Sh#6P#.!Vl^0!<NB-$4dmm,:=oe+r_7,
#mCD4!Vl^0!<E9+#RqFb+!MsS*Z,M!#6Y)/!Vl^+!<E9+#7M1\*$6=G)\rtn":#&2!<Mur'EJ4:"U>GJ
(E4G=*ZGh*$O6e9!<Mur'EJ7<"ptnX+!i?d.3ooL%g`CA!Wi)s'EJ4:"UPVO)BU1M+s.[9%1!(<!<Mur
'EJ4:"UGML(`XYA*ul%.$jQn:!<N&t('"=8!<WK2$kX9q+<_gG((goZ"9JT)q#D*0!X&]8&/QH9.P*"p
*Z#=o"Tnf,q#D*0!<WK3%MTg(,UFZW)&!Gb"9JT)q#D*0!<WK2%2'Ku+X/$K((q#\"9JT)q#C[$!<WK2
%2'Ht$QpW9*#9+p#6Y)/!Vl^0!<NB.$P=3u-S$bu-6<s7$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20
!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^/!<E9+#RqC`*[)^M*>]:r#6Y)/!!2lq'EJ7<"q)"[+=Jcn
.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:
"UGPM(`jhE+<;71$jQn:!<Mur!<E67"9o5G(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M
!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!"8l0"9o5G(a(4X
/h8:S*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0
!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,rW)ir'EJ4:"UPYQ)^-LS,Tms<
%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[
+=Jcn.jlDT&./RC!Wi)s"T\W+"UPYK'H82A-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t
!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW!s/N!!"]/3!sJu@'H82A-6s]O
'+G3L"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8
&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q>_61!<E9+#RqC`*[)aO*>]=s#6Y)/
!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg+XJH\
+;kh%#Qt20!Vl^%!<E9+#RqC`*[(k8+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<
"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:
!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS
,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur!W`<(&HrFL&f;Z5+s7mB&I\mI!W`>t!#,G8
"9o5G(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J
!W`>t!"Ar0!sJr>&f;Z5+s7mB"q_7K"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*
,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)r;ccr
'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3
$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur"p"c."q)"[%3R&M/h8:k(D$oW!s/N!!#,G7!sJu@
'H82A-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t
!"f55"9o5G(a(4X/h8:k(D$oW!WrK)q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N
(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3
%MTj*,pjl[)&!Gb"9JT)r;ccr'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:
!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur"p"`,"UGPM%2^-0
,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW!s/N!!#,G7
!sJu@'H82A-6s]O'+G3M!W`>t!"f54!sJr>&f;Z5,9\'D&e#!J!WiB'q#D*0!<WK2%2'L!+X/$L(D.&\
"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!
+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0
!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#Ca&!<WK2%2'L!+X.48*>]:r
#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`
*[)aO*>]=s#6Y)/!Vl^1!<E9+#RqC`*[)^M*>]:r#6Y)/!<Drr'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s
'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71
$jQn:!<Mur!s&H+"qV.S(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t!#,G7!sJr>
&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!"K#2"9o5G(a(4X/h8:k(Bk?W"Tnf,
q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L
(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,quH]r'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:
"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC
!Wi)s#6=i-"UPYQ)[ml9-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5
+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW!s/N!!"o;5!sJu@'H82A-6s]O'+G3M!ri;s!#,G7
!sJr>&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW
!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t!!!$5!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!
+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#Cd'
!<WK2%2'L!+X8-9*>]=s#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9
$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^2!<E9+#RqC`*[)aO*>]=s#6Y)/!<<,s!#,G7!sJr>
&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t
!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!!E<'!sJr@%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#
*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#Cp+!<WK2
%2'L!+X/$L(D.&Y#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20
!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!W)j4!!!$$"9o5G(a(4X
/h8:k(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!#,G7
!sJr>&f;Z5+s7mB&I\mI!W`>t!!iT,"9o5G(a(47/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb
"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D'/!X&]8&JuW=
/1rG#*u>Iq"Tnf+!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^0
!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl`q!>5J<#n@Xg+XJH\+;kh%
#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u
-nHu$-Qa-9$3^M5!Vl^(!<E9+#n@Xg+XJH\+9rbt%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur
'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<
%1!(<!<N0"qu@E3!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8
&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#CR!!<WK2%1X!f*[)aO*>]=s#6Y)/
!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg+XJH\
+;kh%#Qt20!Vl^,!<E9+#RqC`*[)aO*>]=s#6P)1!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<
"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:
!<N#s'`\78!sJr>&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A
-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!!rZ,!sJr>&f;Z5$6gT5(D.&\"9JT)q#D*0
!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]
"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*
,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#CHs
!X')>$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s
#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^)!<NB.$P=3u-nHu$-Q`O/&./RC!Wi)s'EJ4:"UPYQ
)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur
'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi6"r;[N4!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N
(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#CU"!<WK3
%MT?k+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/
!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^-!<E9+#n@Xg+XJH\+;kh%#Qt21!<Mur'EJ4:"UGPM(`jhF
+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:
"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<N-!r;[N4!<WK2%2'L!+X/$L(D.&\
"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!
+X8-N(D7,]"9JT)q#CU"!<WK2%2'*e*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0
!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^-!<E9+#RqC`*[)^M*>]:r
#6Y)0!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM
(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s
'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71
$jQn:!<Mur$3:22"q)"[+=Jcn#qIAF(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t!#,G7!sJr>
&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!#5M9"9o5G(a(4X/h8:k(D$oW!s/K'
q>_31!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L
(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#CKt!<WK:#n@Xg+XJH\+;kh%#Qt20!Vl^0!<E9+
#RqC`*[)aO*>]=s#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5
!Vl^*!<E9+#n@Xg+XJH\+;kgr%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE
+<;71$jQn:!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<N)urW!W5
!<WK2%2'L!+X8-N(D7,]"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq
"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#CX#!<WK2%2'Kd*[)aO*>]=s#6Y)/!Vl^0!<E9+#RqC`
*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^.
!<E9+#RqC`*[)aO*>]=s#6Y,.!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9
$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl]q!>>J9"UGPM
(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur
'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur$NU81"UGPM(`jhE+:&u(&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k
(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!#>S9!sJr>
&f;Z5+s7mB&I\mI!W`<%!;ca1!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg+XJH\+;kh%#Qt20
!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl]u!<NB.$P*gd+=Jcn
.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:
"UGPM(`jhE+<;71$jQn:!<Mur%fl_7"q)"[+=Jcn.jlDT&-N=D!s/N!!#,G7!sJu@'H82A-6s]O'+G3M
!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X
/h8:k(D$oW!s/N#!#>P7!<E9+#n@Xg+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^0
!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^0!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^$!<E9+#n@Xg+U]SC,Tms<
%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:!<Mur'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<"q)"[
+=Jcn.jlDT&./RC!Wi)s'*/+9"UPYQ)^-LS,Tms<%1!(<!<</r!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t
!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A-6s]O
'+G3M!W`>t!<3'4!sJr>&f;Z5,9\'D&e#!J!W`>t!#,G7!sJr>&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G
(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A-6s]O'+G3M!W`>t!"8l/!sJr>&f;Z5,9\'4(D7,]"9JT)
q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q#D*0!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[
)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]"9JT)rW)ir'EJ4:"UGPM(`jhE+<;71$jQn:!<Mur'EJ7<
"q)"[+=Jcn.jlDT&./RC!Wi)s'EJ4:"UPYQ)^-LS,Tms<%1!(<!<Mur'EJ4:"UGPM(`jhF+WV@3$jQn:
!<Mur"T\W+"UGPI&f;Z5+s7mB&I\mI!W`>t!#,G8"9o5G(a(4X/h8:k(D$oW!s/N!!#,G7!sJu@'H82A
-6s]O'+G3M!W`>t!#,G7!sJr>&f;Z5,9\'D&e#!J!W`>t!"]/3!sJr>&f;Z5+s7mB&I\mH"9JT)q#D*0
!X&]8&JuW=/1rG#*u>Iq"Tnf,q#D*0!<WK3%MTj*,pjl[)&!Gb"9JT)q#D*0!<WK2%2'L!+X8-N(D7,]
"9JT)q#D*0!<WK2%2'L!+X/$L(D.&\"9JT)q>_61!<NB.$P=3u-nHu$-Qa-9$3^M5!Vl^0!<E9+#n@Xg
+XJH\+;kh%#Qt20!Vl^0!<E9+#RqC`*[)aO*>]=s#6Y)/!Vl^0!<E9+#RqC`*[)^M*>]:r#6Y)/!Vl^%
!<NB.$P=3u-nG]X.jlDT&./RC!Wi)s'EJ4:"UPYP)B^:O,9Id:%1!(<!<Mur'EJ4:"UGPM(`abD+<2./
$jQn:!<Mur'EJ4:"UGPL(EFVB+<2./$jQn:!<Mur'EJ7<"q)"Z+=AZk.OH2Q&./RC!Wi)s'EJ4:"UPVO
)':(L+s.[9%1!(<!<Mur'EJ4:"UGML(E=P@*ul%.$jQn:!<Mur'EJ4:"UGMK(E=P@*ubt-$O6e9!<Mur
'EJ7<"q(tY+!rHg.4$#O%giIB!Wi)s!W`<(&Hi@K',_i8,9\*E&e,'K!W`>t!#,G7!sAi;&Jc<-+<DI:
&.AdH!W`>t!#,G7!sAi:&Jc<,+<DI:&.8^G!W`>t!#,G8"9f,C(EOhN.OZP^((U]T!s/N!!"Ar0!X&`:
&JlE/+Wh[>"qV.I"9JT)q#D*0!<NB/$P4$k*$-(;'FtNU!s/K(q#D*0!<NB/$P*si*$-%:'+YET!s/K(
q#D*0!WrT4%M]s--7C/`)AEYf"Tnf,q#D!-!<NB/$P4$j*$-(;'FtNU"TAH#!;um0!<E6("pthR(E+51
(D72a"p=i*q#D!-!<N?-$4[^c)&jG0&e,-O"9&>s!#,G8!sJr?',_l9,U"6H&e,*M!W`>t!"f54!X&]7
%2'Eo)Aj5%%1*1?rW2fp"p"`+!sJu>$4mme(`!es$j["=rW2fp&HMn6!sJu>&/5lr'b_)d#R(>0!Vl^0
!<E9+#7M.Z)]g+B)ANek"p=u.!Vl`p!=f28#R_.U'GV;p%LNFD!r`5r!<*!/!sJo:%M06d&eGKY#6Y,-
!Vl`p!=f28#7:nO&eblh%1*7B!r`5r!#,G7!X&]7%MBNo)&O,$%1*1?!W`>s!!`N*!X&]6$kE7J#7_+I
"p=u.!VZR,!<E6("UGJF%M'$Y$3p_:!W`>s!##>5!<N?,#R_(O%h9$U#6b22!<N)uqu@?1!WrT2$P!a^
'GD&g$3p_:!<MoprW*E0":#2>$OdCM#R1D6rW2`nrW*E0"9o);$4@1I#6b54rW2`nrW*E0"9o);$4@1I
#6b54rW2`n"T\W*"9f&3$4ZtE#7LqE"U"l-!VQL&!<E6("9o)9#R:S<"9\W(o`,0s!<N?+"U=r2!sSo3
"9&>o!!WH)!WrQ/#6"i0"pG,3rW2Zl%fl_6"9f#9#mptE"pG,2!<</n!<*!&!WrQ."U4l.!!<-#oDnjk
#m(22"9er3"9S`)!V?Bk!=8f0!sAc2"9\f.rW2Wk#QXr-!sAc2"pY&1!s8T*!VQNm!;uru!r`<%!r`5k
!;uru!r`<%!r`5k!;uru!r`<%!r`5k!<*!#!WrQ("9\f/!W`>k!;cfp!Ug$^!Ug$^!Ug$f!W3#u!U]s`
!Vl`f!;QZ^!;QZ^!;QZC!.k3&!.k3&!8[^+~>

%%EndBinary
grestore
np
360.783 323.645 mo
360.783 354.161 li
.750271 .679713 .654902 .901945 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 360.783 323.645 ]ct
@
grestore newpath
441.818 359.018 mo
432.982 359.018 li
432.982 321.382 li
441.818 321.382 li
441.818 359.018 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 425 ]ct
[9.49091 0 0 38.2909 432.655 65.6546 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 29 
/H 117 
/M[29 0 0 -117 0 117 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcMMFquQ$^rW3$"klCV^klCV^li?b\mJut^q>g0gpAs[^pAs^_r;liuquQ<fr;liuquQ<fr;liu
quQ<frrN-$r<*'$rW2QirW*$$"8r?(!s/Q'!V6<j!<<2u"9/H%!V6<j!<<2u"9/H%!V69o!<E6("T8K-
"9S`-!<MfmrW*E/"9\o6#6k>7!s/K(oDnjk$j$M6"U5/7"U"o/!<MfmrW*E/!sAc3"pG/5!s/K(q#L<m
%fl\4!sJi5#RCY>"U"o/!VHHl!<`H,"pYJ6$3gb@"9S]+!VQNm!<`H+"U>>4#mLV="9S]+!VQNm!<`H+
"U>>4#mLV="9S]+!VQKt!<E6("U>>6$iUP=$4$e<!s/Ms!"f54!X&Z4$4RIT%1<II"9SZ*p&G[*!<N?,
#71eJ%1ERL"p>#/!VQL*!<E6("U>>A%1N^Q#R1D6!<Mlo&HMq8"U5;C%hTBb%LWOG"9JVt!"o;5!sAi9
%1j0d&e>BW"p=u.!VZR,!<E9*#71eL&J5Qa$O?n<!W`>r!"o;5!sAi8$kEp^&.K!Q"Tnf,!VZR,!<NB-
#n7F[(Ddi"%LWLF!s&Gt!!!$2!<E<-#n7I](Ddi#%grUF"9&>s!<*!/!sJr=&/,cn'G1f^#6Y/.!Vl`p
!=f28#Rh4W'bqDp%13=C"9&>s!#,G7!X/f:&/?'&*#f\,%LE:A!W`>t!"/f.!X&`9&/6!$*#\tr&e,-N
"9&>s!"f54!X&]7%MBNo)&O&!$j["=rW2fp&HMn6"9o2C&f)<%(DIDg#R(>0!Vl^0!<E9+#S%Lb*ZuUK
)\rql"p=u.!Vl^-!<E6*#Rh=]*$67C)&*Sg"pFo+rrDor&HMn6"U>DH'H%l1)Aa"r#mCG1!Vl^-!<E6*
#7D(W)&jP6(D7/`"U"`)q#D*0!WrW6%Mg!,,pjiY(_R5^"Te]*q#D*0!<WK3%20U#+X/$K((^fX"9JT)
q#CNu!<WK2%h''d)]g(A)&*Pe"p4o-!Vl^0!<E9+#Rh:\)]g%@)&!Jd"p4o-!Vl^0!<NB.$P4*q,Ub)h
+W;"'#R(;2!Vl^0!<E9+#n@Xf+!W$T*>]:q#6Y)/!Vl^+!<E9+#RqC`*$?CH)ANej"9nu1!<Mur'EJ4:
"UGPM(E=P?*Z>b($3gV7!<Mur'EJ7<"q)"[+=8Qg.3ffI%L<4?!<Mur'EJ4:"pthT)^-IQ,9@[6$O6e9
!<Mur'EJ4:"UPVO(`jhD+<)(-$3p\8!<N&t('"=8!<WK3%20R"+<_jH'b:WV"9JT)q#D*0!X&`:&K)]>
.kE.q*>K%j"Tnc+q#D*0!<WN5%i-*-,pacW)%m>_"9JT)q#D*0!<WK3%MTa$+X/$J((^iY"9JT)q#C[$
!<WK3%20R"$R$]:)\rtm#6Y)/!Vl^0!<NB/$kaI$-nHr",T[^2#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"
#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl^/!<E9+#n7Oc*[2dN)\rtm#6Y)/!!2lq'EJ7<#7M4`
+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur
'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur!<E67":#>J)BgO]/h84h((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN
&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!"8l0":#>J
)BgO]/h84Q*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)
q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+rW)ir'EJ4:"ptkV*$Q[U
,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<
#7M4`+Xnuq.jZ5P%LE:@!<Mur"T\W+"ptkN(*"ME-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G
!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h((LWS!s&Gu!"]/3!sT)C(*"ME
-6sZN&e#!I"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0
!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q>_61!<E9+#n@Xe+!MpQ*#9(n
#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,$4dml
+seQ]*uP\"#6Y)/!Vl^%!<E9+#n@Xe+!M%:+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur
'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/
$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV
*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur!W`<(&HrIM',_i8+s7g?&.8^G!W`>t
!#,G8":#>J)BgO]/h84h((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B
&.8^G!W`>t!"Ar0!sJu?',_i8+s7g?"qV.I"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5
%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)
r;ccr'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I
+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur"p"c.#7M4`%3[/P/h84h((LWS!s&Gu!#,G7
!sT)C(*"ME-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G
!W`>t!"f55":#>J)BgO]/h84h((LWS!WrH(q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&
+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0
!<WN5%i--/,pjlZ)%m>_"9JT)r;ccr'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-
$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur"p"`,"UPYQ
%2g63,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h((LWS!s&Gu
!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!"f54!sJu@'H%u:,9\$B&.8^G!WiB'q#D*0!<WK3%20U#+sJ-K
((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3
%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+
q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#Ca&!<WK3%20U#+sI=9
)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"#6Y)/!Vl^0!<E9+
#n@Xe+!MpQ*#9(n#6Y)/!Vl^1!<E9+#n7Oc*[2dN)\rtm#6Y)/!<Drr'EJ7<#7M4`+Xnuq.jZ5P%LE:@
!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG
+<)(-$O6e9!<Mur!s&H+#7q:V)BgO]/h84h((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!#,G7
!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!"K#2":#>J)BgO]/h84h('P0S
"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#
+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+quH]r'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur
'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P
%LE:@!<Mur#6=i-"ptkV*"4#;-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?
',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h((LWS!s&Gu!"o;5!sT)C(*"ME-6sZN&e#!J!ri;s
!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h
((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!!!$5!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3
%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)
q#Cd'!<WK3%MTd&+sS6:*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&
,p!g3#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"#6Y)/!Vl^2!<E9+#n@Xe+!MpQ*#9(n#6Y)/!<<,s!#,G7
!sJu?',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J
!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!!E<'!sJuA%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB
/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#Cp+
!<WK3%20U#+sJ-K((^iV#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"
#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!W)j4!!!$$":#>J
)BgO]/h84h((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t
!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!!iT,":#>J)BgO;/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ
)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D'/!X&`:
&fMoB/M8P"*Yo4l"Tnc*!Vl^0!<E9,$4dml+seQ]*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/
!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl`q!>5J=$4dml+seQ]
*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/
$kaI%.4m/&,p!g3#mCD3!Vl^(!<E9,$4dml+seQ]*sWYr$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9
!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U
,Tdm:$jQn:!<N0"qu@E3!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0
!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#CR!!<WK3%Ls0j+!MpQ*#9(n
#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,$4dml
+seQ]*uP\"#6Y)/!Vl^,!<E9+#n@Xe+!MpQ*#9(n#6P)1!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur
'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/
$O6e9!<N#s'`\78!sJu?',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h((LWS!s&Gu!#,G7!sT)C
(*"ME-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!!rZ,!sJu?',_i8$6gT3((^iY"9JT)
q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N
((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5
%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)
q#CHs!X')?$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!MpQ
*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^)!<NB/$kaI%.4m/&,p!7+%LE:@!<Mur'EJ4:
"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9
!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<N-!r;[N4!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&
+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#CU"
!<WN5%i,To+seQ]*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm
#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^-!<E9,$4dml+seQ]*uP\"#6Y)0!<Mur'EJ4:"UPYQ
)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur
'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<N-!r;[N4!<WK3%20U#+sJ-K
((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3
%MTd&+sS6N((^iY"9JT)q#CU"!<WK3%200g*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3
!Vl^0!<E9,$4dml+seQ]*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl^-!<E9+#n7Oc*[2dN
)\rtm#6Y)0!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:
"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@
!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG
+<)(-$O6e9!<Mur$3:22#7M4`+Xnuq#qI;C((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!#,G7
!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!#5M9":#>J)BgO]/h84h((LWS
!s&E&q>_31!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#
+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#CKt!<WN;$4dml+seQ]*uP\"#6Y)/!Vl^0
!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3
#mCD3!Vl^*!<E9,$4dml+seQ]*uP[p$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO
)'0tG+<)(-$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<N)u
rW!W5!<WK3%MTd&+sS6N((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"
*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#CX#!<WK3%MTch+!MpQ*#9(n#6Y)/!Vl^0!<E9+
#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"#6Y)/
!Vl^.!<E9+#n@Xe+!MpQ*#9(n#6Y,.!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&
,p!g3#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl]q!>>J9
"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:
!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur$NU81"UPVO)'0tG+:&o%&.8^G!W`>t!#,G8":#>J)BgO]
/h84h((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!#>S9
!sJu?',_i8+s7g?&.8^G!W`<%!;ca1!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,$4dml+seQ]*uP\"
#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl]u!<NB/$kEsh
+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur
'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur%fl_7#7M4`+Xnuq.jZ5P%Km(A!s&Gu!#,G7!sT)C(*"ME-6sZN
&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!#,G8":#>J
)BgO]/h84h((LWS!s&H"!#>P7!<E9,$4dml+seQ]*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!MpQ*#9(n#6Y)/
!Vl^0!<E9+#n7Oc*[2dN)\rtm#6Y)/!Vl^0!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^$!<E9,$4dml+q#\D
,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/$O6e9!<Mur'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur'EJ7<
#7M4`+Xnuq.jZ5P%LE:@!<Mur'*/+9"ptkV*$Q[U,Tdm:$jQn:!<</r!#,G7!sJu@'H%u:,9\$B&.8^G
!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h((LWS!s&Gu!#,G7!sT)C(*"ME
-6sZN&e#!J!W`>t!<3'4!sJu@'H%u:,9\$B&.8^G!W`>t!#,G7!sJu?',_i8+s7g?&.8^G!W`>t!#,G8
":#>J)BgO]/h84h((LWS!s&Gu!#,G7!sT)C(*"ME-6sZN&e#!J!W`>t!"8l/!sJu@'H%u:,9\$3((^iY
"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/
,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N((^iY"9JT)rW)ir'EJ4:"UPVO)'0tG+<)(-$O6e9!<Mur
'EJ7<#7M4`+Xnuq.jZ5P%LE:@!<Mur'EJ4:"ptkV*$Q[U,Tdm:$jQn:!<Mur'EJ4:"UPYQ)':%I+WM7/
$O6e9!<Mur"T\W+"UPVJ',_i8+s7g?&.8^G!W`>t!#,G8":#>J)BgO]/h84h((LWS!s&Gu!#,G7!sT)C
(*"ME-6sZN&e#!J!W`>t!#,G7!sJu@'H%u:,9\$B&.8^G!W`>t!"]/3!sJu?',_i8+s7g?&.8^F"9JT)
q#D*0!X&`:&fMoB/M8P"*Yo4l"Tnc+q#D*0!<WN5%i--/,pjlZ)%m>_"9JT)q#D*0!<WK3%MTd&+sS6N
((^iY"9JT)q#D*0!<WK3%20U#+sJ-K((^iY"9JT)q>_61!<NB/$kaI%.4m/&,p!g3#mCD3!Vl^0!<E9,
$4dml+seN[*uP\"#6Y)/!Vl^0!<E9+#n@Xe+!DgN*#9(n#6Y)/!Vl^0!<E9+#n7Oc*[)^M)\rtm#6Y)/
!Vl^%!<NB/$kaI%.4bfX.O?,O%LE:@!<Mur'EJ4:"ptkU)^-LR,9@[6$jQn:!<Mur'EJ4:"UPYP(`jhE
+<)(-$O6e9!<Mur'EJ4:"UPVO(`jhE+<)%+$O6e9!<Mur'EJ7<#7M4_+=Jcm.O6#L%LE:@!<Mur'EJ4:
"pkbS)B^:N+rqI3$O6e9!<Mur'EJ4:"UGPN(`abC*uYk*$3p\8!<Mur'EJ4:"UGPN(EFV@*uYk)$3p\8
!<Mur'EJ7<#7D+]+=AZi.3ffI%LE:@!<Mur!W`<(&HrIM',_l9+s@pA&.8^G!W`>t!#,G7!sJr=&f2N0
+!):6%giLC!W`>t!#,G7!sJr=&JlB-+!):6%giLC!W`>t!#,G8"9o5F(EXqP.4?>Y'FkBP!s&Gu!"Ar0
!X/i=',MW1+<ML:"qM%F"9JT)q#D*0!<NE0$kX3m*$$"9'+P<P!s/K(q#D*0!<NE0$P=*k*$#t7'+G6O
!s/K(q#D*0!WrW6%i630-7:)^)%mA`"Tnc+q#D!-!<NB/$P4$j*$$"8'+G6P"TAH#!;um0!<E6)#7:tT
(E+20'bLi["U"`)q#D!-!<NB/$4ddd)&aA-&I\pK"9&>s!#,G8!sJu@'H%u:,9\$C&.8^H!W`>t!"f54
!X&]7%MBNp)&Etu$j["=rW2fp"p"`+!sJu?$4mme()7Gm$O6h;rW2fp&HMn6!sJu?&/,fp'bV#b#6b5/
!Vl^0!<E9+#7M1[)BKq>(_dGe"p=u.!Vl`p!>#>:#R_.U'GM2l%13=C!W`>s!<*!&!sJo:%M8UP"V2"J
"p4r,!VcZo!>#>:#7:nO&eYce$jd+?!W`>s!##A6!X&]7%MBNo(`*kt$j["=!Wi#q&HMn6"9o/?%M00^
%13=D!s/Ms!!`N*!WrT3$4ZtE"q1eC"Tnf,pAbg+!<E6("UGGE%LrpU#mUV9!Wi/uqu@<0!WrT2$P!a^
'+tfb#mLM7!VQNm!=f27#7(YE$OR1F"U"l-!VQNm!=f27"pYGA$4-tC"Tnf,!VQNm!=f27"pYGA$4-tC
"Tnf,!VQKs!<E6)"UGJC$k<aV$OI"@!s/Mr!!NB(!WrQ/r<EE/"U"o+!VHF%!<E6("9eu7#6k>8!s8H&
o`,F%!<N?+"U52:"pG/4!r`5n!"T)3!sAc3#RLeC#6k>6!W`9%oDnjk!!E*$!<WE&!V6<j!WN9#"9JZ-
!r`5l!<*$!"8r?(!s8W(!V69n!<N<*qZR**!s/K(p&P'lr;lm!!WrK*r;lHhr;lm!!WrK*r;lHhr;lm!
!WrK*r;lHhrW*!#rW<?-!s8T+!<MZiqZ6Tqmf<%^mf<%^mf<=fr;uoum/Zt`q#L!dq>om^q>om^q>ntD
JcLB&JcLB&h>i'~>

%%EndBinary
grestore
np
437.316 323.257 mo
437.316 353.773 li
.750271 .679713 .654902 .901945 cmyk
gsave
[7.86686e-05 0 0 7.86796e-05 437.316 323.257 ]ct
@
grestore newpath
286.22 339.033 mo
358.192 339.388 li
25400 lw
gsave
[7.86686e-05 0 0 7.86796e-05 284.237 339.023 ]ct
@
grestore newpath
284.237 339.023 mo
291.732 334.699 li
292.21 334.424 292.821 334.588 293.097 335.066 cv
293.373 335.544 293.209 336.155 292.731 336.431 cv
288.203 339.042 li
292.705 341.699 li
293.18 341.979 293.338 342.592 293.057 343.067 cv
292.777 343.543 292.164 343.701 291.689 343.42 cv
cp
ef
360.174 339.398 mo
352.679 343.721 li
352.201 343.997 351.59 343.833 351.314 343.355 cv
351.039 342.877 351.203 342.266 351.681 341.99 cv
356.209 339.378 li
351.707 336.722 li
351.232 336.441 351.073 335.829 351.354 335.353 cv
351.634 334.878 352.247 334.72 352.722 335.001 cv
cp
ef
363.261 339.023 mo
434.983 339.023 li
gsave
[7.86686e-05 0 0 7.86796e-05 361.278 339.023 ]ct
@
grestore newpath
361.278 339.023 mo
368.752 334.662 li
369.229 334.384 369.841 334.545 370.119 335.022 cv
370.397 335.499 370.236 336.111 369.759 336.389 cv
365.244 339.023 li
369.759 341.657 li
370.236 341.935 370.397 342.547 370.119 343.024 cv
369.841 343.5 369.229 343.661 368.752 343.383 cv
cp
ef
436.966 339.023 mo
429.492 343.383 li
429.015 343.661 428.404 343.5 428.125 343.024 cv
427.848 342.547 428.009 341.935 428.485 341.657 cv
433 339.023 li
428.485 336.389 li
428.009 336.111 427.848 335.499 428.125 335.022 cv
428.404 334.545 429.015 334.384 429.492 334.662 cv
cp
ef
.750271 .679713 .654902 .901945 cmyk
ZHYQEX+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
379.581 364.525 mo
(!)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
391.146 364.525 mo
(x)sh
399.128 364.525 mo
( )sh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
403.624 364.525 mo
(/ 2)
[4.99585 4.49591 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
422.108 364.525 mo
(\000\001)sh
119.782 161.345 mo
82.1455 161.345 li
82.1455 152.509 li
119.782 152.509 li
119.782 161.345 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 425 ]ct
[38.2909 0 0 9.49091 81.8182 263.327 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 117 
/H 29 
/M[117 0 0 -29 0 29 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&Q2p:Q])h$oirR+"joF'8cN3/.cN2]"klAR$hZ<*E\,kgp
m/X9io)\4YquNf!!!3$!mf<7drW92(r;uouquHBiquQcuXTSM'r;lHhrrDrtrW92(r;uoun,WFgrrW0%
XT\S)rrW3$nGrOh!WiH+rWMs![KZX5!<WE%!V6<j!<<3#"9/Mk"i(9A"TAK'!rW/k!<*!!!r`<%"QK[.
"TS])!rrE$!V69p!<E6("9e]-f`oq1rWN?+!s8H&oDnjk"p+o1"pYA=cO&J8"pbG="pG,3rW2WkrW*3)
!sAc3#7&3Rkm.Iu#6k>8!sAN'oDnjk"p+l0"U52:]*S!6"pYA;"U+u1rW2iqqZ$p'!<N?,"U>;>$EX[B
$4-tC"pG,2!WhrorW*$$"9o#7#mq(M%Bg6I%1N^R$3pb<"9&>p!<*!)!WrT2#RLkI%/p^A%1!@N$OR1F
"U"r,!VQNm!=/`/"U>;>$O[C8%D3,U$k!FM#mUV:"9&>p!"/f.!WrT1#n%1P%hS"<`XrRi%h9'X#mUV:
!W`>q!"/f.!X&Z3$4RLX&ek6Yit]uW%29Ki'+kcb$O?q>!W`>q!"&`-!WrT2#n.:T&H*6p'AO9#&df3^
%L`[L"Tnf,!VQL$!<E6("U>>A%1a!^rY!NjjqA1:&eP]d%L`[L"Tnf,!VQL$!<N?,"pk_L&eu/urYWTl
n/2ZP(`*u''+bW\#6b22!VQL%!<E9*#7:nO'G_N')S$g^)[mT%(DRPm$O?n<!W`>r!"/f.!sAi8$kEsb
()O.k!#H"Y'b_,f$3p_:!W`>r!"8l/!sAi8$kEsb'c.[j(^_&p'b_,f$3p_:!ri;q!"/f/"9f)@&/5s#
*?VI-$m-N1)&<eo$3gV8!<Mur%KHJ0!X&]6$kO*i)]^"CYosQ!+!)C>((q&`#6Y)/!VZR!!<N?,#R_.U
";Vgm*$):*%36E-)&Etu$jd+?!W`>r!"8l0!sJr<%h]To)B0^p*k!+!*?6"9(D@>g#mLJ5!<Mop$ipG6
#7D"U(`a_D,q&73^aKX>-6s`V)AWkm#R(;2!VcX(!<E6)#7:nQ()n>=+sc@uas@KB,9e3L(_[Df#6Y)/
!VcX'!<E6("pk\L'Gqf2+5J*h+UfJ8*#]S*%LNFD!W`>s!"Ar0!WrW5$kO*i)]g(De03Zl%3Qc7*#TJ'
%13=C!W`>s!"Ar1!sJr=&/H3-,q(2mat2a-%4`nW-6aHH&e53O!s/Mu!"K#1!X&`8%MKWu+!MsV-,Cr"
-4V=J,U+?O)&*Vi#6Y,0!VcX)!<E6("pk_N'c@u5+X&&=,Q/hs+sJ0P*?#\+%LNFD!s&Gt!"Ar0!WrW5
%1s<m*$-4GYTa/l*uu7*((q)a#6Y,0!VcX)!<N?,#Rq@^*$HXX.kE9Y/e9Nc.k)hj*Z,P##mCG5!<Doq
%06J2"9o2B&f)B,+<i&8,RktB+Wh[?'+YET"9JT)p]1<p$N^D6#n.@Z(`OJ;+L*(!+<MXE)&3bo#mLM6
!<Mrq$NU80!sJu>&/5p"*<7.a+:K>5)]9A&%1*4A!W`>s!"Ar1!sJo<&/H3-,UY#jq('!+%4WeT,p=6E
&e,*M!s/Mt!"/f/!sJr=&/,iu*$4Mi_B01-*#f_0&If'O"9JT)pAbR%!WrT2$P!da(`F@S*6]B2)]BP/
'+bQY"Tnf,!VZR&!<N?,#7D"R'c.`,)qu@a*"<i+)&O)%%gr[I!s/K(pAbU&!sAf8%MKWu+<i'Wd3dg!
%4*8D+<;=7%h&[H!s&Gs!"/f.!sAi9%1j0f()Y%/l59mF(D[Yq%13=D"9&>q!"8l/!sAf7$k<j_'G_It
(\JRO()@W!&e>BW#6b5/!W2rq!"8l/!sAf7$P!a^'GVCg(CCom'b_/i$jd.B"9&>q!!E<("9f&9$kF!f
)&jS;YoaDr*?5t6'G(]["p=u.!VZR%!<E6("U>AC%M03brY)RN$PF$_%LiaM"p=u.!VQL$!<E6("U58@
%1Wp\oF\_J$P3jZ%1EOJ"Tnf,!VQL$!<E6("U58@%1Wm[l4M#J$P3gY%1<II"Tnf,!VQL$!<N?+"pbVI
&JGlpi"s`V$PjHj&J#<W#6b22!VQNm!=/`0":#2>$4@9n%GD6s$k*LN#R:M9!r`5o!<*!)!WrQ0#71\D
$d9%?$j[4K$4-qA"Tni*!VQNm!=&Z."9o);#n"KVljF")#mUY<!s8H&p&GI$!<N?,"UGGD%1WlX&,6\7
%L<IM#R1G7!W`>p!<*!%!WrQ/#6"k2#QP)6#6tG:"9\f*!V?Bk!<iN,!sJi4Ws8e4"U,#2!r`5m!<*!&
!WrN."U;"4"U5,6"9S`)!VZTn!"&`-!WrQ/"pYD?$*O[C#mgkB"pG/4!W`>n!;up!!X#>'!WrK*rW2Qi
r;cm"rWDs!ZNU70rrW0#nc8Uh!!<-%mf^<,rWE0%rW2Qi"T\W*!WrSc"iUWK"9S`-!<M]jqZ5CPciX(F
n,W=dciVo&qZ60dqZ4\<j9#2Zn,WFgrW9_7mK<FirW2EeXo\.qli<g^rW2?cT`Ouio)PHbn,W4`Wr_2[
!!0/%iW/ZQ[K5@fliFm&_Z58gJcLB&JcOd1JcLB&JcLB&JcLB&JcLB&JcLB&n,Rt~>

%%EndBinary
grestore
np
85.5929 155.309 mo
116.105 155.309 li
.750271 .679713 .654902 .901945 cmyk
19050 lw
gsave
[0 -7.86796e-05 7.86686e-05 0 85.5929 155.309 ]ct
@
grestore newpath
119.782 213.055 mo
82.1455 213.055 li
82.1455 204.218 li
119.782 204.218 li
119.782 213.055 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 425 ]ct
[38.2909 0 0 9.49091 81.8182 211.618 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 117 
/H 29 
/M[117 0 0 -29 0 29 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&Q2p:Q])h$oirR+"joF'8cN3/.cN2]"klAR$hZ<*E\,kgp
m/X9io)\4YquNi"rrN'!mf<7dr;s/)r;ultquHBiquQ`tY64_)quQ?grrDrtr;s/)r;ultn,WFgrrW0%
!!BD-r<*$#rrMWirW*'%!X&E)pBA#0r<*-'!rW/k!<*$!!riB&"RQB/"oe`)!rrE$!V6<j!WN6$"9/Ma
"j7)L"TAK'!rW/k!!NB(!WrN-rWUsZeHYsU!X&T,rW2WkrW*0(!sAc4#Q>"V$/c*p#RCY?"p>&2rW2Wk
rW*-'!sAc3r<L@Kl3R@o"9o#4!sAN'oDnjk"9JZ."U=o1]a469rW`Q1"U"o0rW2iqqZ$m&!<N?+"U55=
rX,k;$47+H#R:M:"9JT)o`4sl!<NB,"U>>@$iLO@%fHh@$jm:G"p>&-!VQNm!<rT-"U55=$N1A5%C?TC
$jI(G#R:M9"9&>p!<*!(!WrT1#RLhGrXAK0^((&M#7CnG#R:M9"9&>p!"&`-!WrT1#R_(O&,m.,&]bR`
&./pX%1<II"U"l-!VQL%!<E6)"U>AD%hK?e'B'YQ'FYWg&ePW`$4$h=!W`>q!"/f.!WrT2#n.:S&/!J+
fb+W'&.T*T#6b22!<Mlo$ipA1!sJo9$OmUX&J<8#jUqt6&J,H^$jd.B!s/K(p&GL%!WrT1#n.=W'G_K$
_\hhZ$l9]q'bV&e$3p_:!Whup$NU81":#8C&/,fr)?(Pd)u:K`)B'J1().>j$O?n<!W`>r!"/f.!sAi8
$kEsb()F(j!#H"Y'G:rd$3p_:!W`>r!"/f.!sAi8$kEp`'c-cbZl&cY#o+-e%h/jN"Tni+!VZR%!<NB-
#n.@Z(E+;8Y945q*?,h1&Io-P"9SZ*q#Cs+!!*-("pk\L'Gqc0+!2UJZloo%+<MXE)&3_m$3p\8!<Mop
#6=l."UGJH&dB*g)B9_;*OHjt*??+=)&<ks$jd+?!W`>r!"K#2!sJr<%h]To)B0Y:*W@+h*Y'22)]KY1
'+YKX"p4o-!VZR(!<WK1$P!jf*?ZRQ-7:25.)@;A-RU2c+W_L9&.AgJ!s&Gt!"K#1!X&`8%2'Eq*ZuXO
,j?Vu,n;1G,9e3L(_[Df#6Y,0!VcX(!<E6("pk\L'Gqc0+!BD`dif,B*ul.6&e56R"9SZ*p](d)!<N?-
#n.@Z(`OJ;+<]2Xh]_tA$Q^6)'bLl^#6Y,0!VcX)!<E9+#Rh7[)^$CR.4Qjk/En\q.k<(u,p=9F&e53O
"9JW!!"8l/!X&`8%MKWu+!N!0-,M##-4V=J,U+?O)&*Vi#6Y,0!VcX*!<E6("pk_N'c@u5+X&$R\0Lqs
%O*)?*uu78&e56R"9SZ*p](a(!<N?-#n7I])&s\?+g<-m+<MUB#Sn$_$3p\9!<Mrq%fl\5"UGPL(E=SF
.4Zr$/[R,@/M/J%-R0ZL'+P<P"9JT(q#Cp+!<NB.$4RU`)BL"F,:"PA,n;1F+sA$J(_[De#6Y,0!VcZp
!=Jr2"UPSK'Gqc0+!@g3%3Q`6*#TM)%LE@C!s&Gt!"/f.!WrT4$kO*h)]\o#rZJQk%Nll9*ZGt3&If$O
"9SZ*p](g*!<WK1$kO0n+=&<`.P!%H/@mAB.k2tr,p=9F&e,-N"9JVu!"/f/!sJr=&/,iu*$5)$nK>am
rZ;Lg)]9A&%13:B!W`>r!"/f/!sJo;%MBKn)B8Yqk8hhgrYu:a(`!br$jd(>!W`>r!"K#2!sJo;%M9El
)&jM7*8MXf*=a&/)]BP/'+YKX"Tnf,!VZR(!<WH/$4[^c*$?FN,pjtf-fQK`-71#`+<DC8&.AdI!s&Gs
!"&`-!sAi9%1j0g(]>5n)XJCA)%.8s'+k]]#6b22!<Mop$NU81"9o/@%M9Bi(B,,b)"ndV(Ddi&'G:rd
#mUV9!W`?"!;lg)!<E9*"pkYI&JGlpY87T_'b_/i%1*7C!s/K(pAb<s!X&Z4"q2"U(E+87rZAKi%Ncc6
*?#_/&If$N"9SZ*pAbR%!<NB-#7:kL&.oQS'<r2X&eGQ_$4$h=!W`>q!"8l/!WrT2#n%1P&.fHH'"nnd
&J5Qb%L`XK"Tnf,!VQL$!<E6("U>>A%1Wm[l4LuI$4m^W$OI%A!s/K(p&GI$!WrT1#n.:U',;;@(XEm)
().Al%13=D!s/Ms!<*!(!X&Z3#RUqJeIC1@#7LtI#mUV:"9&>p!<*!(!WrT1#71_Fb7*D>#7CkF#R:M8
"9&>p!<*!'!WrT1#71b:$c<DA%/pV=$4-tC"Tnl+!VQL%!<E6("U55>$k<aX&%N8I&.B'[%LrpU#mLP9
!W`>p!<*!'!WrQ/"pYC8#lY&2"U"r0rW2WkrW*0(!sAc2#-%n2"pG,3!r`5m!<*!&!WrQ/"U:t3"9o#4
!s8H&pAk0m#lt&.!sAc3#7(X<$4."F#R1G9!s/K(o)S^i!<NB#"LA:/"9JZ,!r`5k!;uou!r`<#"T8M5
"oJN'"9/H%!V-6h!<<3#"8rAo"i1B?"TJT(!r`5k!!NB(!WiH,qZZ3gb6IhI"U"o0!W`>l!;cfN!m^rG
!Up*d!RLo$!rN)g!;cf:!oj@[!Up*g!WE/5"763j!r`5g!3Q@p!UKf^!WE,d!20Gi!:p3e!NlM$!Up*b
!3$"[!<3)#!TX7R!OVsh!:'[#!Q4ti!.k3&!.k41!.k3&!.k3&!.k3&!.k3&!.k3&!:Tu=~>

%%EndBinary
grestore
np
85.593 207.043 mo
116.105 207.043 li
.750271 .679713 .654902 .901945 cmyk
gsave
[0 -7.86796e-05 7.86686e-05 0 85.593 207.043 ]ct
@
grestore newpath
119.782 264.764 mo
82.1455 264.764 li
82.1455 256.255 li
119.782 256.255 li
119.782 264.764 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 425 ]ct
[38.2909 0 0 9.16363 81.8182 159.909 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 117 
/H 28 
/M[117 0 0 -28 0 28 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 117 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img

JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&QiQFQ\,kmqi;pdrlN#N;bQ7#0blQArm/Zt`a9(H)q>p$b
q>n;3mfN=dmf<1bZi^%)q>p$brW2s!X98J(!!<*"nGrLg!WiE*W<<8)!s8E%r;cNkr;lp"q?+)-q?$^!
r;lKi!!)rurrW$!Zip4-!!<*"nc8Xi"Tec."9et0"U5)4!s/N)!V6<j!<iN,"9\l4p'8#2"U5,5"9S`)
!V?Bk!<iN,!sAc2rW_fr_?U;M"pG/5!s8W(!V?Bk!<iN,!sAc2rW_HhbQe@W"pG/5!s8W(!V??t!<E6(
"9er5#Q>"`$.]Ci#RCY>"U,#2!W`>o!"/f.!WrQ0#71_E$Ob>ji=$##$OR4I#6k;6!r`5n!"/f.!WrQ/
#7(VB$4=f]lO+"+$4."E#6b54!r`5n!"/f.!WrQ/#7(VB$4=HSoa;'5$4."E#6b54!r`5t!;ca&!<N?+
"U>>A$k9<K$4RCO#mUV;!s/K(p&P'm!<WH/#71bI%M03N&[W/[&J5Qc%h/mR#6b53!<MlorW*9,"9o,=
$k3[WrXc@H$P*^W$jm:G"Tnf,!VQNm!=&]0"pbPD%1`=IpCP%MrXT>G%1ERM#6b22!<Mlo$NU80"9f&=
%M'-b'`Jj7(<@7#'bqDr&eGN]#mLP8!Whup$ipA1":#5A%h]Ql()PpHckm'*().Dn%13=C"9&>q!"8l/
!X&]5$P!^\'GM;6(>9N1'bh8m%L`XK"9\W(pAbR%!<NB.#R_(Q&ebu'(#p#7'+tle$OI%@"9&>q!"8l0
!sJr<%MBNo)B0[6*UXpV*#]Y1'+YKX"U"l-!VZR(!<E9+#R_.V()\&2*?H96+8R&h*Zc:@)&Eqt%1*4A
!W`>r!"K#1!sJo:%M9Bj(`F;3)mgRd)]K\')&F##%h&^I!s/K(pAbU&!<WK1$4RR]()Ro-YT!oe)&F#"
%grXH!s8K'pAb[(!X&]7%MBQs*ZuXO,UB`C%O<;D+Wh[?'FtQV"Tnc+q#Cm)!<E6)"pteO()e28+X409
%3cu=*ZGn/%LNFD!W`>s!!iT+!WrT4$kO*U(`FA8+0cpt+!2LB(_mVl#mLM6!<Mrq%06J2!sJu>%hf`t
*$-4"+LWC%+!)FA(_mVl#mLM6!<Mrq%06J3"U>GI'cJ2>-7C>6._mMC.4HVi+<210%1!+>!Wi&r$ipA1
":#8D',MW1+sZ7saX%?@+s7jC'G(WW"9SZ*p](a(!<N?-#n7I])&s_@+l4Em+q5\=*uu78&e56R"9SZ*
p](a(!<N?-#n7I])&s\?+k.^m+q5\<*uu47&e56R"9SZ*p](a(!<WK2$kX9q+XSWf/BTR./Ia6].46;\
(_[Ac"U"l-p](a(!<NB/$4[^c)]p4J,et_r,n)"B*ul+3%grUF!s&Gt!"8l/!WrW5%1s<l*$-7%+h/`p
+q>b>+<MRA((q)a#6Y,0!VcX*!<E6("pk_N'c7l2+<VgNZm#Ys+WqgG)$gri%13=C!s&Gt!"T)2!sJr=
&JlE0,q(5n/1e.[%kK7].4-5Z(_R;b"U"l-!;HO&!<NB.#n7F\)&s\>+gE4#+WqjH)&<hp$3p\8!<Mop
!!*H/!sJr=%hf]r)]Tp(*t983*#]V-&.JpM"9JT)pAbO$!WrT3$P*md)&iPqY9")m)]9G*&.JpM"9JT)
pAbU&!sJo;%hom&+XAB_q'ij'%4ESM+s.^=&If!L!s&Gs!"/f.!sJo:%M9El)&qu`_Ait')&O,&%h&^I
"9JT)pAbU&!<WK1#n7FZ'c.])jVlA^%2g!!().>j$O6h;!W`>r!"/f.!sJo9%1a*e(DtjDeenl5(DRSq
%1<CE!s/K(pAbU&!X&]6%1s<m*$6:Hd3@Nn%3Zi9*?#_,%LNCD!s&Gs!"8l/!X&]5$4ROZ',22%(?uYA
'bh;m%L`XK"9\W(pAbU&!<N?,#71eK&/#Th]bL)Q#nmp`%h/mP"p>&-!W2rq!"/f.!WrT2#n.:T&JD5[
#SI^[%1<FG"9\W(pAb<s!WrT2#7:nO',DB$)6b"f)&O/(&Io0S"U"l-!VZTn!=Ju4"pYJC%1NdX&.l/Z
$kEjY%1ERL#6Y,1!<MlorW*9,"9f#:$4I=PoFAJC$4RCO#mUY;!s/K(p&P'm#m1;6#71_F$k3[3%`](Y
%1*FN#mUY;!s/K(p&GL%!<NB-#71eK%hK<ci=jTP$ka0b&.T-V#R(>5!WhrorW*3*"9eu7#RT#gfa8#l
#R:S<"9S]+!V?Bk!<rW."U,,9#g3P7#mgkB#6k>7!s/K(oDnjk"p4r2"U>8<_$TK8#m^b@"pG,3!W`>o
!!rZ,!X&Z2#71_Fr=$:Iq@3E4#n%(H#R1G8!s/Mq!;up%!WrQ."U2"4"U,&4"9S`(!V?Bj!<WB*!sGS,
!sA].!rW/l!;up#!WrN-W<EA,!s8W'!VZTn!<*!'!WrQ/"U515#71S="U,#2!WiB'nc8Uh!!3-%W<</%
quQ<fr;lp"p]If(rrW*!nGrLgrrVTj]EA08quQ<frrN-$rr_<b`WZ;DrrW0#n,Uu>b5q#2b5p,omJt'(
hZ<-Fr;jM3m/m4elN"-ip&X@WV?$YtkQ%F[p]0gaV#fuaJcLB&JcLB&JcLB&JcLB&iW+Q1JcLB&JcLB&
JcNjlJ,~>

%%EndBinary
grestore
np
85.5931 258.885 mo
116.105 258.885 li
.750271 .679713 .654902 .901945 cmyk
gsave
[0 -7.86796e-05 7.86686e-05 0 85.5931 258.885 ]ct
@
grestore newpath
102.202 158.263 mo
102.202 206.117 li
25400 lw
gsave
[7.86686e-05 0 0 7.86796e-05 102.202 156.28 ]ct
@
grestore newpath
102.202 156.28 mo
106.561 163.755 li
106.839 164.232 106.678 164.844 106.202 165.122 cv
105.725 165.4 105.113 165.239 104.835 164.762 cv
102.202 160.246 li
99.5677 164.762 li
99.2897 165.239 98.678 165.4 98.2013 165.122 cv
97.7247 164.844 97.5637 164.232 97.8418 163.755 cv
cp
ef
102.202 208.1 mo
97.8418 200.625 li
97.5637 200.148 97.7247 199.536 98.2013 199.258 cv
98.678 198.98 99.2897 199.141 99.5677 199.618 cv
102.202 204.133 li
104.835 199.618 li
105.113 199.141 105.725 198.98 106.202 199.258 cv
106.678 199.536 106.839 200.148 106.561 200.625 cv
cp
ef
101.813 209.159 mo
101.813 257.012 li
gsave
[7.86686e-05 0 0 7.86796e-05 101.813 207.176 ]ct
@
grestore newpath
101.813 207.176 mo
106.172 214.651 li
106.45 215.127 106.289 215.739 105.813 216.017 cv
105.336 216.295 104.724 216.134 104.446 215.658 cv
101.813 211.142 li
99.1786 215.658 li
98.9006 216.134 98.2889 216.295 97.8122 216.017 cv
97.3356 215.739 97.1746 215.127 97.4527 214.651 cv
cp
ef
101.813 258.995 mo
97.4527 251.52 li
97.1746 251.044 97.3356 250.432 97.8122 250.154 cv
98.2889 249.876 98.9006 250.037 99.1786 250.513 cv
101.813 255.029 li
104.446 250.513 li
104.724 250.037 105.336 249.876 105.813 250.154 cv
106.289 250.432 106.45 251.044 106.172 251.52 cv
cp
ef
ZHYQEX+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
51.5095 188.683 mo
(!)sh
%ADOBeginSubsetFont: MAAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ZHYQEU+TimesNewRomanPS-ItalicMT gcheck setglobal} if
1 1046 4 <00010054ffe802630481001e0106b90005ffde40710f390f400f39a405ef
02fb0e03551b8a00f60103241d3a005b0e030f201d20027f20ef20021e00
0e0f0104050707001d1c1e1b011a1c1d1e18051904010800161a19190404
039300a0020106130b0007071f161914161619161f2819161002490f031f
0302ff0301036c2000af070f8a0eba010100070203400c121640363934c0
16d0160216b8013b400a1f091617161f0a774c182b2b103c2b2b10f65d2b
435c58400f164028143f16401c113f16401e123f2b2b2b5901fdf6ed10e4
10f45d71e42b103c2b10c0870e2e2b057d10c400183f3f3ce4fd3c103c10
3c011112173900111239113939870e7d10c4053c3c0110c910c93130015d
715d5d5d2b2b010333072303061514163332373637170607062322263534
3713233736363702144e9d119cac1c100b19291853215c5238392c3820a7
970a6e925a0481fef03ffdb25f1c111223146719863726372b366f024327
1e779300>ZHYQEU+TimesNewRomanPS-ItalicMT AddT42Char 
ZHYQEU+TimesNewRomanPS-ItalicMT /CharStrings get begin
/t 4 def
end
ZHYQEU+TimesNewRomanPS-ItalicMT /Encoding get
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHYQEU+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 73{/.notdef}rp /j 3{/.notdef}rp /n 5{/.notdef}rp /t 
3{/.notdef}rp /x 135{/.notdef}rp]
ZHYQEU+TimesNewRomanPS-ItalicMT nf
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
63.0742 188.683 mo
(t)sh
68.0706 188.683 mo
( )sh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
72.5665 188.683 mo
(/ 2)
[4.99585 4.49591 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
91.0507 188.683 mo
(\000\001)sh
ZHYQEX+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
51.1204 238.694 mo
(!)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
62.6851 238.694 mo
(t)sh
67.6815 238.694 mo
( )sh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
72.1774 238.694 mo
(/ 2)
[4.99585 4.49591 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
90.6616 238.694 mo
(\000\001)sh
ZHYQEU+TimesNewRomanPS-ItalicMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
110.789 87.1089 mo
(j )
[4.99585 0 ]xsh
ZHYQEW+TimesNewRomanPSMT*1 [17.9836 0 0 -17.9862 0 0 ]msf
120.281 87.1089 mo
(- 3/2)
[5.98842 4.49591 8.99181 4.99585 0 ]xsh
ZHYQET+PMingLiU [17.9836 0 0 -17.9862 0 0 ]msf
153.746 87.1089 mo
(\000\001)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ZHYQEX+TimesNewRomanPSMT*1 uf
/ZHYQEX+TimesNewRomanPSMT uf
/PAAAAA+TimesNewRomanPSMT uf
/ZHYQEU+TimesNewRomanPS-ItalicMT*1 uf
/ZHYQEU+TimesNewRomanPS-ItalicMT uf
/MAAAAA+TimesNewRomanPS-ItalicMT uf
/ZHYQEW+TimesNewRomanPSMT*1 uf
/ZHYQEW+TimesNewRomanPSMT uf
/OAAAAA+TimesNewRomanPSMT uf
/ZHYQEV+PMingLiU-Identity-H uf
/ZHYQEV+PMingLiU /CIDFont ur
/ZHYQET+PMingLiU-Identity-H uf
/ZHYQET+PMingLiU /CIDFont ur
/ZHYQES+Calibri*1 uf
/ZHYQES+Calibri uf
/KAAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 1020 3302 a Ff(Figure)f(4:)36 b(The)28 b(mesh)g(and)f
(conserv)-5 b(ation)26 b(elemen)n(ts.)77 3598 y Fp(According)f(to)g
(the)g(CESE)h(metho)s(d,)h(the)e(future)g(status)h(of)e(gas)h(in)g(eac)
m(h)h(p)s(osition)f(can)g(b)s(e)g(ev)-5 b(aluated)-70
3754 y(b)m(y)29 b(using)f(the)g(information)f(of)g(its)i(previous)g
(status.)42 b(If)28 b(the)g(sho)s(c)m(k)g(tub)s(e)g(starts)g(to)g(ev)m
(olv)m(e)h(at)e Fo(t)h Fp(=)g Fo(t)3666 3718 y Fi(n)p
Fl(\000)p Fj(1)3803 3754 y Fp(,)-70 3911 y(then)j(w)m(e)h(can)f(ev)-5
b(aluate)31 b(the)g(status)g(of)f(gas)h(at)f Fo(t)e Fp(=)g
Fo(t)1896 3875 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)2134
3911 y Fp(through)i(one)h(time)g(n)m(umerical)i(calculation.)-70
4067 y(Here,)47 b(w)m(e)d(attempt)f(to)g(ev)-5 b(aluate)44
b(the)f(status)h(of)e(gas)h(for)g(all)g Fo(n)g Fp(with)h
Fo(t)2714 4031 y Fi(n)2806 4067 y Fk(\024)i Fp(0)p Fo(:)p
Fp(2)d(and)g(then)h(w)m(e)g(can)-70 4224 y(compare)35
b(our)f(results)i(with)f(analytic)g(solution)g(and)f(also)g(those)h
(sho)m(wn)h(in)f(section)g(7)f(of)g(Prof.)48 b(S.)35
b(C.)-70 4380 y(Chang's)g(CESE)g(pap)s(er)f([)899 4380
y
SDict begin H.S end
 899 4380 a Fp(1)948 4316 y
SDict begin H.R end
 948 4316 a 948 4380 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 948
4380 a Fp(].)48 b(Hence,)35 b(w)m(e)g(will)g(ev)-5 b(aluate)34
b(the)g(status)h(of)e(gas)h(b)m(y)h(using)g(CESE)g(metho)s(d)-70
4537 y(iterativ)m(ely)-8 b(.)45 b(There)34 b(will)g(b)s(e)e(100)g
(times)i(of)e(iteration)h(in)f(our)h(for)f(lo)s(op.)77
4693 y(F)-8 b(or)26 b(e\016ciency)j(concern,)g(w)m(e)f(c)m(ho)s(ose)g
(a)e(widely)j(used)f(Pyton)f(pac)m(k)-5 b(age)28 b('Nump)m(y')g(for)f
(all)g(the)g(matrix)-70 4850 y(calculation.)83 b(W)-8
b(e)46 b(then)g(create)h(man)m(y)f(of)f(asymmetric)j(matrices)e(for)f
(di\013eren)m(t)i(usages.)83 b(T)-8 b(able)3782 4850
y
SDict begin H.S end
 3782 4850 a Fp(1)3830 4786 y
SDict begin H.R end
 3830 4786 a 3830 4850
a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (table.caption.6) cvn H.B /ANN pdfmark end
 3830 4850 a -70 5006 a Fp(sho)m(ws)38 b(the)e(relationship)h(b)s(et)m
(w)m(een)h(matrices)f(in)g(Python)f(co)s(de)h(and)f(those)g(in)g
(section)h(4)f(of)g(Prof.)53 b(S.)-70 5163 y(C.)33 b(Chang's)h(CESE)g
(pap)s(er)e([)1025 5163 y
SDict begin H.S end
 1025 5163 a Fp(1)1074 5099
y
SDict begin H.R end
 1074 5099 a 1074 5163 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 1074 5163 a Fp(].)44 b(It)32
b(should)i(b)s(e)e(noted)h(that)g(b)s(oth)f('m)m(tx)p
2632 5163 30 4 v 36 w(q')h(and)g('m)m(tx)p 3163 5163
V 36 w(qn')g(are)g(used)h(to)-70 5319 y(stored)h(the)g(information)f
(of)g(\()p Fo(u)1132 5334 y Fi(m)1198 5319 y Fp(\))1236
5283 y Fi(n)1236 5344 y(j)1283 5319 y Fp(.)49 b(The)35
b(only)g(di\013erence)h(is)e(that)h('m)m(tx)p 2728 5319
V 36 w(q')g(is)f(for)g(curren)m(t)i(status)f(of)1856
5695 y(8)p eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -78 -269 a -70 146
a Fp(gas)33 b(while)h('m)m(tx)p 554 146 30 4 v 36 w(qn')f(is)g(for)f
(the)h(status)h(of)e(gas)g(after)g(one)h(time)h(iteration)e(\()p
Fo(dt=)p Fp(2\).)-70 227 y
SDict begin H.S end
 -70 227 a -70 227 a
SDict begin 14.5 H.A end
 -70 227
a -70 227 a
SDict begin [/View [/XYZ H.V]/Dest (table.caption.6) cvn /DEST pdfmark
end
 -70 227 a 448 357 a Ff(T)-7 b(able)27 b(1:)36
b(Comparison)26 b(table)i(of)f(matrices)g(in)h(Python)f(co)r(de)h(and)f
(matrices)g(in)h(pap)r(er.)p 1299 473 1162 4 v 1299 490
V 1349 574 a Fp(Python)34 b(co)s(de)p 2020 610 4 121
v 185 w(P)m(ap)s(er)p 1299 613 1162 4 v 1349 698 a(m)m(tx)p
1522 698 30 4 v 36 w(f)p 2020 734 4 121 v 490 w Fo(f)2120
713 y Fi(m;k)1349 818 y Fp(m)m(tx)p 1522 818 30 4 v 36
w(q,)f(m)m(tx)p 1836 818 V 37 w(qn)p 2020 856 4 122 v
100 w(\()p Fo(u)2166 833 y Fi(m)2232 818 y Fp(\))2270
782 y Fi(n)2270 843 y(j)1349 940 y Fp(m)m(tx)p 1522 940
30 4 v 36 w(qx)p 2020 977 4 122 v 418 w(\()p Fo(u)2166
955 y Fi(k)r(x)2248 940 y Fp(\))2286 904 y Fi(n)2286
964 y(j)1349 1062 y Fp(m)m(tx)p 1522 1062 30 4 v 36 w(qt)p
2020 1099 4 122 v 431 w(\()p Fo(u)2166 1077 y Fi(mt)2257
1062 y Fp(\))2295 1025 y Fi(n)2295 1086 y(j)1349 1183
y Fp(m)m(tx)p 1522 1183 30 4 v 36 w(s)p 2020 1221 4 122
v 482 w(\()p Fo(s)2156 1198 y Fi(m)2222 1183 y Fp(\))2260
1147 y Fi(n)2260 1208 y(j)1349 1305 y Fp(uxl)p 2020 1343
V 591 w(\()p Fo(u)2166 1320 y Fi(mx)p Fl(\000)2327 1305
y Fp(\))2365 1269 y Fi(n)2365 1330 y(j)1349 1427 y Fp(uxr)p
2020 1465 V 580 w(\()p Fo(u)2166 1442 y Fi(mx)p Fj(+)2327
1427 y Fp(\))2365 1391 y Fi(n)2365 1452 y(j)p 1299 1468
1162 4 v 1299 1485 V 77 1840 a Fp(No)m(w)26 b(let's)h(start)e(to)h(use)
h(CESE)g(metho)s(d)f(for)f(solving)i(this)f(sho)s(c)m(k)h(tub)s(e)f
(problem.)42 b(There)27 b(are)f(man)m(y)-70 1997 y(steps)34
b(of)e(calculation)i(in)e(eac)m(h)i(iteration.)-70 2156
y
SDict begin H.S end
 -70 2156 a -70 2156 a
SDict begin 18.85004 H.A end
 -70 2156 a -70 2156 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.1.1) cvn /DEST
pdfmark end
 -70 2156
a 137 x Fq(4.1.1)113 b(First)37 b(step)-70 2514 y Fp(First,)44
b(w)m(e)f(ha)m(v)m(e)g(to)e(extract)h(some)h(necessary)h(information)d
(from)g(the)h(curren)m(t)h(status)f(of)f(gas.)71 b(By)-70
2670 y(referring)33 b(to)f(Eq.\(4.7\))h(of)g([)959 2670
y
SDict begin H.S end
 959 2670 a Fp(1)1007 2606 y
SDict begin H.R end
 1007 2606 a 1007 2670 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end

1007 2670 a Fp(],)1094 2670 y
SDict begin H.S end
 1094 2670 a 1094 2670 a
SDict begin 18.85004 H.A end

1094 2670 a 1094 2670 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.1) cvn /DEST pdfmark
end
 1094 2670 a 1179 2926 a Fo(f)1227
2941 y Fi(m;k)1379 2926 y Fk(\021)28 b Fo(@)5 b(f)1588
2941 y Fi(m)1656 2926 y Fo(=@)g(u)1817 2941 y Fi(k)1860
2926 y Fo(;)49 b(m;)h(k)30 b Fp(=)e(1)p Fo(;)49 b Fp(2)p
Fo(;)g Fp(3)1124 b(\(1\))-70 3182 y(w)m(e)34 b(can)f(easily)h(extract)f
(the)g(Jacobian)g(matrix)g Fo(F)46 b Fp(of)32 b Fo(f)2016
3197 y Fi(m;k)2141 3182 y Fp(:)2211 3182 y
SDict begin H.S end
 2211 3182
a 2211 3182 a
SDict begin 18.85004 H.A end
 2211 3182 a 2211 3182 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.2) cvn /DEST pdfmark
end
 2211 3182 a 268
3734 a Fo(F)42 b Fk(\021)478 3474 y Fe(2)478 3649 y(6)478
3709 y(6)478 3773 y(4)586 3584 y Fo(f)634 3599 y Fj(1)p
Fi(;)p Fj(1)811 3584 y Fo(f)859 3599 y Fj(1)p Fi(;)p
Fj(2)1037 3584 y Fo(f)1085 3599 y Fj(1)p Fi(;)p Fj(3)586
3741 y Fo(f)634 3756 y Fj(2)p Fi(;)p Fj(1)811 3741 y
Fo(f)859 3756 y Fj(2)p Fi(;)p Fj(2)1037 3741 y Fo(f)1085
3756 y Fj(2)p Fi(;)p Fj(3)586 3897 y Fo(f)634 3912 y
Fj(3)p Fi(;)p Fj(1)811 3897 y Fo(f)859 3912 y Fj(3)p
Fi(;)p Fj(2)1037 3897 y Fo(f)1085 3912 y Fj(3)p Fi(;)p
Fj(3)1221 3474 y Fe(3)1221 3649 y(7)1221 3709 y(7)1221
3773 y(5)1315 3734 y Fp(=)1418 3325 y Fe(2)1418 3500
y(6)1418 3560 y(6)1418 3620 y(6)1418 3679 y(6)1418 3739
y(6)1418 3799 y(6)1418 3859 y(6)1418 3922 y(4)1540 3384
y Fi(@)t(f)1615 3393 y Fg(1)p 1536 3405 117 4 v 1536
3462 a Fi(@)t(u)1618 3471 y Fg(1)1759 3384 y Fi(@)t(f)1834
3393 y Fg(1)p 1756 3405 V 1756 3462 a Fi(@)t(u)1838 3471
y Fg(2)1979 3384 y Fi(@)t(f)2054 3393 y Fg(1)p 1975 3405
V 1975 3462 a Fi(@)t(u)2057 3471 y Fg(3)1540 3697 y Fi(@)t(f)1615
3706 y Fg(2)p 1536 3718 V 1536 3775 a Fi(@)t(u)1618 3784
y Fg(1)1759 3697 y Fi(@)t(f)1834 3706 y Fg(2)p 1756 3718
V 1756 3775 a Fi(@)t(u)1838 3784 y Fg(2)1979 3697 y Fi(@)t(f)2054
3706 y Fg(2)p 1975 3718 V 1975 3775 a Fi(@)t(u)2057 3784
y Fg(3)1540 4010 y Fi(@)t(f)1615 4019 y Fg(3)p 1536 4031
V 1536 4088 a Fi(@)t(u)1618 4097 y Fg(1)1759 4010 y Fi(@)t(f)1834
4019 y Fg(3)p 1756 4031 V 1756 4088 a Fi(@)t(u)1838 4097
y Fg(2)1979 4010 y Fi(@)t(f)2054 4019 y Fg(3)p 1975 4031
V 1975 4088 a Fi(@)t(u)2057 4097 y Fg(3)2143 3325 y Fe(3)2143
3500 y(7)2143 3560 y(7)2143 3620 y(7)2143 3679 y(7)2143
3739 y(7)2143 3799 y(7)2143 3859 y(7)2143 3922 y(5)1308
4527 y Fp(=)1411 4267 y Fe(2)1411 4442 y(6)1411 4502
y(6)1411 4566 y(4)1868 4367 y Fp(0)770 b(1)511 b(0)1779
4479 y Fi(\015)t Fl(\000)p Fj(3)p 1779 4500 131 4 v 1827
4557 a(2)1930 4472 y Fi(u)1971 4448 y Fg(2)1971 4492
y(2)p 1930 4500 76 4 v 1930 4559 a Fi(u)1971 4536 y Fg(2)1971
4580 y(1)2474 4523 y Fk(\000)p Fp(\()p Fo(\015)28 b Fk(\000)22
b Fp(3\))2864 4483 y Fi(u)2905 4492 y Fg(2)p 2864 4500
V 2864 4557 a Fi(u)2905 4566 y Fg(1)3158 4523 y Fo(\015)27
b Fk(\000)c Fp(1)1519 4690 y(\()p Fo(\015)k Fk(\000)c
Fp(1\))1832 4638 y Fi(u)1873 4615 y Fg(3)1873 4659 y(2)p
1832 4667 V 1832 4726 a Fi(u)1873 4703 y Fg(3)1873 4747
y(1)1939 4690 y Fk(\000)g Fo(\015)2105 4650 y Fi(u)2146
4659 y Fg(2)2180 4650 y Fi(u)2221 4659 y Fg(3)p 2105
4667 151 4 v 2142 4726 a Fi(u)2183 4703 y Fg(2)2183 4747
y(1)2349 4690 y Fo(\015)2415 4650 y Fi(u)2456 4659 y
Fg(3)p 2415 4667 76 4 v 2415 4724 a Fi(u)2456 4733 y
Fg(1)2522 4690 y Fk(\000)2632 4651 y Fj(3)p 2632 4667
36 4 v 2632 4724 a(2)2677 4690 y Fp(\()p Fo(\015)k Fk(\000)c
Fp(1\))2990 4638 y Fi(u)3031 4615 y Fg(2)3031 4659 y(2)p
2989 4667 76 4 v 2989 4726 a Fi(u)3030 4703 y Fg(2)3030
4747 y(1)3195 4690 y Fo(\015)3261 4650 y Fi(u)3302 4659
y Fg(2)p 3261 4667 V 3261 4724 a Fi(u)3302 4733 y Fg(1)3426
4267 y Fe(3)3426 4442 y(7)3426 4502 y(7)3426 4566 y(5)3706
4057 y Fp(\(2\))-70 4937 y(where)34 b Fo(u)268 4952 y
Fj(1)335 4937 y Fk(\021)28 b Fo(\032;)49 b(u)622 4952
y Fj(2)689 4937 y Fk(\021)28 b Fo(\032\027)q(;)50 b(u)1026
4952 y Fj(3)1092 4937 y Fk(\021)1255 4893 y Fi(p)p 1208
4914 131 4 v 1208 4971 a(\015)t Fl(\000)p Fj(1)1370 4937
y Fp(+)1478 4898 y Fj(1)p 1478 4914 36 4 v 1478 4971
a(2)1523 4937 y Fo(\032\027)1627 4901 y Fj(2)1668 4937
y Fo(;)-70 5094 y Fp(and)33 b Fo(f)168 5109 y Fj(1)235
5094 y Fk(\021)28 b Fo(u)396 5109 y Fj(2)435 5094 y Fo(;)50
b(f)560 5109 y Fj(2)627 5094 y Fk(\021)28 b Fp(\()p Fo(\015)f
Fk(\000)c Fp(1\))p Fo(u)1091 5109 y Fj(3)1151 5094 y
Fp(+)1259 5050 y Fj(3)p Fl(\000)p Fi(\015)p 1259 5071
131 4 v 1307 5128 a Fj(2)1410 5042 y Fi(u)1451 5019 y
Fg(2)1451 5063 y(2)p 1410 5071 76 4 v 1410 5128 a Fi(u)1451
5137 y Fg(1)1495 5094 y Fo(;)49 b(f)1619 5109 y Fj(3)1687
5094 y Fk(\021)28 b Fo(\015)1858 5053 y Fi(u)1899 5062
y Fg(2)1933 5053 y Fi(u)1974 5062 y Fg(3)p 1858 5071
151 4 v 1895 5128 a Fi(u)1936 5137 y Fg(1)2041 5094 y
Fk(\000)2150 5050 y Fi(\015)t Fl(\000)p Fj(1)p 2150 5071
131 4 v 2198 5128 a(2)2301 5042 y Fi(u)2342 5019 y Fg(3)2342
5063 y(2)p 2301 5071 76 4 v 2301 5130 a Fi(u)2342 5107
y Fg(2)2342 5151 y(1)2386 5094 y Fp(.)-70 5250 y(Also,)35
b(with)g(the)f(aid)g(of)f(Eq.\(4.12\),)i(Eq.\(4.17\))f(and)g
(Eq.\(4.25\))g(of)g([)2491 5250 y
SDict begin H.S end
 2491 5250 a Fp(1)2539
5186 y
SDict begin H.R end
 2539 5186 a 2539 5250 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 2539 5250 a Fp(],)h(w)m(e)g(then)f(can)g
(ev)-5 b(aluate)35 b(\()p Fo(u)3654 5265 y Fi(mt)3745
5250 y Fp(\))3783 5214 y Fi(n)3783 5275 y(j)1856 5695
y Fp(9)p eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 -78 -269 a -70 146
a Fp(and)33 b(\()p Fo(s)204 161 y Fi(m)270 146 y Fp(\))308
110 y Fi(n)308 171 y(j)355 146 y Fp(:)426 146 y
SDict begin H.S end
 426 146
a 426 146 a
SDict begin 18.85004 H.A end
 426 146 a 426 146 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.3) cvn /DEST pdfmark
end
 426 146 a 1181 302 a
Fp(\()p Fo(u)1275 317 y Fi(mt)1367 302 y Fp(\))1405 261
y Fi(n)1405 327 y(j)1479 302 y Fp(=)28 b Fk(\000)p Fp(\()p
Fo(f)1746 317 y Fi(mx)1852 302 y Fp(\))1890 261 y Fi(n)1890
327 y(j)1965 302 y Fp(=)g Fk(\000)p Fp(\()p Fo(f)2232
317 y Fi(m;k)2357 302 y Fo(u)2413 317 y Fi(k)r(x)2495
302 y Fp(\))2533 261 y Fi(n)2533 327 y(j)3706 302 y Fp(\(3\))-70
513 y
SDict begin H.S end
 -70 513 a -70 513 a
SDict begin 18.85004 H.A end
 -70 513 a -70 513 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.4) cvn /DEST pdfmark
end
 -70 513
a 618 669 a Fp(\()p Fo(s)702 684 y Fi(m)768 669 y Fp(\))806
628 y Fi(n)806 694 y(j)881 669 y Fk(\021)996 602 y Fp(\001)p
Fo(x)p 996 646 137 4 v 1040 738 a Fp(4)1143 669 y(\()p
Fo(u)1237 684 y Fi(mx)1343 669 y Fp(\))1381 628 y Fi(n)1381
694 y(j)1450 669 y Fp(+)1568 602 y(\001)p Fo(t)p 1558
646 V 1558 738 a Fp(\001)p Fo(x)1704 669 y Fp(\()p Fo(f)1790
684 y Fi(m)1857 669 y Fp(\))1895 628 y Fi(n)1895 694
y(j)1964 669 y Fp(+)2072 602 y(\(\001)p Fo(t)p Fp(\))2264
566 y Fj(2)p 2072 646 232 4 v 2095 738 a Fp(4\001)p Fo(x)2314
669 y Fp(\()p Fo(f)2400 684 y Fi(m)2466 669 y Fp(\))2504
628 y Fi(n)2504 694 y(j)2551 669 y Fo(;)49 b(m)28 b Fp(=)g(1)p
Fo(;)49 b Fp(2)p Fo(;)g Fp(3)563 b(\(4\))77 880 y(The)33
b(corresp)s(onding)h(Python)f(co)s(de)g(is)g(here,)h(where)g(index)f
('j')g(is)g(the)g(index)h(of)e(for)g(lo)s(op.)43 b(The)34
b(for)-70 1036 y(lo)s(op)e(go)s(es)h(through)g(sp)s(eci\014c)h(elemen)m
(ts)h(of)d(matrix)h(with)g(resp)s(ect)h(to)e(v)-5 b(arying)33
b(in)m(terv)-5 b(als:)-70 1106 y
SDict begin H.S end
 -70 1106 a -70 1106
a
SDict begin 18.85004 H.A end
 -70 1106 a -70 1106 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-1) cvn /DEST pdfmark
end
 -70 1106 a -70 1098 3900 4 v
-70 1232 a
SDict begin H.S end
 -70 1232 a -70 1232 a
SDict begin 18.85004 H.A end
 -70 1232 a -70 1232
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.1) cvn /DEST pdfmark
end
 -70 1232 a 930 w Fb(.)-70 1389 y
SDict begin H.S end
 -70 1389 a -70 1389
a
SDict begin 18.85004 H.A end
 -70 1389 a -70 1389 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.2) cvn /DEST pdfmark
end
 -70 1389 a 930 w Fb(.)-70 1545
y
SDict begin H.S end
 -70 1545 a -70 1545 a
SDict begin 18.85004 H.A end
 -70 1545 a -70 1545 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.3) cvn /DEST pdfmark
end
 -70 1545
a 930 w Fb(.)-70 1702 y
SDict begin H.S end
 -70 1702 a -70 1702 a
SDict begin 18.85004 H.A end
 -70 1702
a -70 1702 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.4) cvn /DEST pdfmark
end
 -70 1702 a 266 w Fb(w2)43 b(=)g(mtx)p 551
1702 25 4 v 29 w(q)o([1,)f(j])h(/)g(mtx)p 1147 1702 V
29 w(q[0,)f(j])h Fh(#)34 b(u2/u1)-70 1858 y
SDict begin H.S end
 -70 1858
a -70 1858 a
SDict begin 18.85004 H.A end
 -70 1858 a -70 1858 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.5) cvn /DEST pdfmark
end
 -70 1858 a 266 w Fb(w3)43
b(=)g(mtx)p 551 1858 25 4 v 29 w(q)o([2,)f(j])h(/)g(mtx)p
1147 1858 V 29 w(q[0,)f(j])h Fh(#)34 b(u3/u1)-70 2015
y
SDict begin H.S end
 -70 2015 a -70 2015 a
SDict begin 18.85004 H.A end
 -70 2015 a -70 2015 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.6) cvn /DEST pdfmark
end
 -70 2015
a 266 w Fb(mtx)p 333 2015 25 4 v 29 w(f)o([0,)43 b(0])f(=)h(0.0)-70
2171 y
SDict begin H.S end
 -70 2171 a -70 2171 a
SDict begin 18.85004 H.A end
 -70 2171 a -70 2171 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.7) cvn /DEST pdfmark
end
 -70
2171 a 266 w Fb(mtx)p 333 2171 25 4 v 29 w(f)o([0,)g(1])f(=)h(1.0)-70
2328 y
SDict begin H.S end
 -70 2328 a -70 2328 a
SDict begin 18.85004 H.A end
 -70 2328 a -70 2328 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.8) cvn /DEST pdfmark
end
 -70
2328 a 266 w Fb(mtx)p 333 2328 25 4 v 29 w(f)o([0,)g(2])f(=)h(0.0)-70
2484 y
SDict begin H.S end
 -70 2484 a -70 2484 a
SDict begin 18.85004 H.A end
 -70 2484 a -70 2484 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.9) cvn /DEST pdfmark
end
 -70
2484 a 266 w Fb(mtx)p 333 2484 25 4 v 29 w(f)o([1,)g(0])f(=)h
Fk(\000)p Fb(0.5)g Fk(\003)h Fb(\(3.0)e Fk(\000)i Fb(ga)o(\))f
Fk(\003)g Fb(w2)p Fk(\003\003)p Fb(2)-70 2641 y
SDict begin H.S end
 -70 2641
a -70 2641 a
SDict begin 18.85004 H.A end
 -70 2641 a -70 2641 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.10) cvn /DEST pdfmark
end
 -70 2641 a 266 w Fb(mtx)p
333 2641 25 4 v 29 w(f)o([1,)g(1])f(=)h(\(3.0)f Fk(\000)i
Fb(ga\))f Fk(\003)g Fb(w2)-70 2797 y
SDict begin H.S end
 -70 2797 a -70 2797
a
SDict begin 18.85004 H.A end
 -70 2797 a -70 2797 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.11) cvn /DEST pdfmark
end
 -70 2797 a 266 w Fb(mtx)p 333
2797 25 4 v 29 w(f)o([1,)g(2])f(=)h(ga)g Fk(\000)h Fb(1.0)-70
2954 y
SDict begin H.S end
 -70 2954 a -70 2954 a
SDict begin 18.85004 H.A end
 -70 2954 a -70 2954 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.12) cvn /DEST pdfmark
end
 -70
2954 a 266 w Fb(mtx)p 333 2954 25 4 v 29 w(f)o([2,)f(0])f(=)h(\(ga)g
Fk(\000)h Fb(1.0\))e Fk(\003)h Fb(w2)o Fk(\003\003)p
Fb(3)g Fk(\000)h Fb(ga)f Fk(\003)g Fb(w2)g Fk(\003)h
Fb(w3)-70 3110 y
SDict begin H.S end
 -70 3110 a -70 3110 a
SDict begin 18.85004 H.A end
 -70 3110 a -70
3110 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.13) cvn /DEST pdfmark
end
 -70 3110 a 266 w Fb(mtx)p 333 3110 25 4 v 29 w(f)o([2,)f(1])f(=)
h(ga)g Fk(\003)h Fb(w3)e Fk(\000)i Fb(1.5)f Fk(\003)g
Fb(\(ga)g Fk(\000)h Fb(1.0\))e Fk(\003)h Fb(w2)o Fk(\003\003)p
Fb(2)-70 3267 y
SDict begin H.S end
 -70 3267 a -70 3267 a
SDict begin 18.85004 H.A end
 -70 3267 a -70
3267 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.14) cvn /DEST pdfmark
end
 -70 3267 a 266 w Fb(mtx)p 333 3267 25 4 v 29 w(f)o([2,)g(2])f(=)
h(ga)g Fk(\003)h Fb(w2)-70 3423 y
SDict begin H.S end
 -70 3423 a -70 3423
a
SDict begin 18.85004 H.A end
 -70 3423 a -70 3423 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.15) cvn /DEST pdfmark
end
 -70 3423 a -70 3580 a
SDict begin H.S end
 -70 3580
a -70 3580 a
SDict begin 18.85004 H.A end
 -70 3580 a -70 3580 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.16) cvn /DEST pdfmark
end
 -70 3580 a 266 w Fb(mtx)p
333 3580 25 4 v 29 w(qt)o([:,)o(j)o(])f(=)g Fk(\000)p
Fb(1.0)g Fk(\003)h Fb(mtx)p 1275 3580 V 28 w(f)g Fk(\003)f
Fb(mtx)p 1616 3580 V 29 w(qx)o([:,)o(j)o(])-70 3736 y
SDict begin H.S end

-70 3736 a -70 3736 a
SDict begin 18.85004 H.A end
 -70 3736 a -70 3736 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.17) cvn /DEST pdfmark
end
 -70 3736
a -70 3893 a
SDict begin H.S end
 -70 3893 a -70 3893 a
SDict begin 18.85004 H.A end
 -70 3893 a -70 3893
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.18) cvn /DEST pdfmark
end
 -70 3893 a 266 w Fb(mtx)p 333 3893 25 4 v 29 w(s)o([:,)g(j)o(])g(=)g
(0.25)f Fk(\003)i Fb(dx)f Fk(\003)g Fb(mtx)p 1465 3893
V 29 w(qx)o([:,)f(j])h(+)g(\(dt)f(/)i(dx)o(\))f Fk(\003)g
Fb(mtx)p 2634 3893 V 29 w(f)g Fk(\003)h Fb(mtx)p 2976
3893 V 28 w(q[:,)o(j)o(])f Fk(n)-70 4049 y
SDict begin H.S end
 -70 4049 a
-70 4049 a
SDict begin 18.85004 H.A end
 -70 4049 a -70 4049 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.19) cvn /DEST pdfmark
end
 -70 4049 a 864 w Fk(\000)h
Fb(0.25)e Fk(\003)h Fb(dt)g Fk(\003)g Fb(\(dt)g(/)g(dx)o(\))g
Fk(\003)h Fb(mtx)p 2117 4049 25 4 v 28 w(f)f Fk(\003)h
Fb(mtx)p 2458 4049 V 28 w(f)g Fk(\003)f Fb(mtx)p 2799
4049 V 29 w(qx)o([:,)o(j)o(])-70 4206 y
SDict begin H.S end
 -70 4206 a -70
4206 a
SDict begin 18.85004 H.A end
 -70 4206 a -70 4206 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.20) cvn /DEST pdfmark
end
 -70 4206 a 930 w Fb(.)-70
4362 y
SDict begin H.S end
 -70 4362 a -70 4362 a
SDict begin 18.85004 H.A end
 -70 4362 a -70 4362 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.21) cvn /DEST pdfmark
end
 -70
4362 a 930 w Fb(.)-70 4519 y
SDict begin H.S end
 -70 4519 a -70 4519 a
SDict begin 18.85004 H.A end
 -70
4519 a -70 4519 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.22) cvn /DEST pdfmark
end
 -70 4519 a 930 w Fb(.)p -70 4594 3900
4 v 77 4772 a Fp(It's)29 b(w)m(orth)h(to)f(pa)m(y)h(atten)m(tion)f(to)g
(the)h(lo)s(op)e(range)h(of)g(the)h(ab)s(o)m(v)m(e)g(calculation.)43
b(Instead)30 b(of)f(k)m(eeping)-70 4928 y(visiting)40
b(ev)m(ery)g(p)s(osition)e(from)h(the)f(b)s(eginning,)j(w)m(e)e(c)m(ho)
s(ose)g(a)f(di\013eren)m(t)i(w)m(a)m(y)f(to)f(construct)i(this)f(for)
-70 5085 y(lo)s(op.)68 b(F)-8 b(rom)40 b(the)h(essence)i(of)e(this)g
(sho)s(c)m(k)h(tub)s(e)f(problem,)j(c)m(hanges)e(of)e(gas)h(statuses)h
(happ)s(en)g(from)-70 5241 y(the)d(cen)m(ter)h(of)d(th)i(tub)s(e)f
(\(con)m(tact)h(discon)m(tin)m(uit)m(y\))i(to)d(b)s(oth)g(sides)h(as)g
(time)g(go)s(es)f(on)g(after)g(remo)m(ving)-70 5398 y(diaphragm.)67
b(These)41 b(calculation)g(fo)s(cus)f(on)h(the)f(cen)m(tral)h(t)m(w)m
(o)g(SE)f(p)s(oin)m(ts)h(in)f(\014rst)h(lo)s(op.)66 b(Then)41
b(the)1832 5695 y(10)p eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 -78 -269 a -70 146
a Fp(range)42 b(of)e(lo)s(op)h(will)h(extend)h(b)m(y)f(one)g(p)s(oin)m
(t)f(on)g(eac)m(h)h(side)h(ev)m(ery)g(t)m(w)m(o)f(lo)s(op.)69
b(That)42 b(is,)i(the)d(cen)m(tral)-70 302 y(four)d(p)s(oin)m(ts)g
(will)h(b)s(e)f(visited)h(in)f(next)h(lo)s(op.)59 b(But)38
b(actually)g(this)h(mo)s(di\014cation)f(w)m(on't)g(decrease)i(the)-70
459 y(space)e(complexit)m(y)i(to)s(o)c(m)m(uc)m(h.)58
b(It)37 b(is)g(still)h Fo(O)s Fp(\()p Fo(n)1763 423 y
Fj(2)1802 459 y Fp(\))e(as)i(if)e(w)m(e)i(start)f(to)g(lo)s(op)f(ev)m
(ery)j(p)s(osition)e(from)g(the)-70 615 y(b)s(eginning.)-70
774 y
SDict begin H.S end
 -70 774 a -70 774 a
SDict begin 18.85004 H.A end
 -70 774 a -70 774 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.1.2) cvn /DEST
pdfmark end
 -70 774
a 137 x Fq(4.1.2)113 b(Second)38 b(step)-70 1132 y Fp(Next,)47
b(w)m(e)d(ev)-5 b(aluate)43 b(the)h(future)f(status)h(of)e(gas)h(after)
g(time)g(stamp)h(mo)m(v)m(es)h(forw)m(ard)e(b)m(y)h Fo(dt=)p
Fp(2.)74 b(By)-70 1289 y(referring)40 b(to)g(Eq.\(4.24\))g(of)f([)1036
1289 y
SDict begin H.S end
 1036 1289 a Fp(1)1085 1224 y
SDict begin H.R end
 1085 1224 a 1085
1289 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 1085 1289 a Fp(],)j(the)e(status)h(of)e(gas)h(after)f
Fo(dt=)p Fp(2)g(can)h(b)s(e)g(ev)-5 b(aluated)41 b(through)f(the)g(its)
-70 1445 y(curren)m(t)34 b(status.)595 1445 y
SDict begin H.S end
 595 1445
a 595 1445 a
SDict begin 18.85004 H.A end
 595 1445 a 595 1445 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.5) cvn /DEST pdfmark
end
 595 1445 a 352 1701
a Fp(\()p Fo(u)446 1716 y Fi(m)512 1701 y Fp(\))550 1660
y Fi(n)550 1726 y(j)625 1701 y Fp(=)738 1634 y(1)p 738
1678 49 4 v 738 1770 a(2)797 1701 y([\()p Fo(u)918 1716
y Fi(m)984 1701 y Fp(\))1022 1650 y Fi(n)p Fl(\000)p
Fj(1)p Fi(=)p Fj(2)1022 1733 y Fi(j)t Fl(\000)p Fj(1)p
Fi(=)p Fj(2)1252 1701 y Fp(+)22 b(\()p Fo(u)1444 1716
y Fi(m)1510 1701 y Fp(\))1548 1650 y Fi(n)p Fl(\000)p
Fj(1)p Fi(=)p Fj(2)1548 1733 y Fi(j)t Fj(+1)p Fi(=)p
Fj(2)1778 1701 y Fp(+)g(\()p Fo(s)1960 1716 y Fi(m)2026
1701 y Fp(\))2064 1650 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p
Fj(2)2064 1733 y Fi(j)t Fl(\000)p Fj(1)p Fi(=)p Fj(2)2294
1701 y Fk(\000)h Fp(\()p Fo(s)2478 1716 y Fi(m)2544 1701
y Fp(\))2582 1650 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)2582
1733 y Fi(j)t Fj(+1)p Fi(=)p Fj(2)2790 1701 y Fp(])p
Fo(;)49 b(m)28 b Fp(=)g(1)p Fo(;)49 b Fp(2)p Fo(;)g Fp(3)297
b(\(5\))77 1957 y(Besides,)37 b(w)m(e)f(also)e(need)i(to)e(calculate)i
(\()p Fo(u)1650 1972 y Fi(mx)1756 1957 y Fp(\))1794 1921
y Fi(n)1794 1982 y(j)1875 1957 y Fp(for)e(next)i(iteration)e(b)m(y)i
(using)f(curren)m(t)h(and)f(future)-70 2114 y(status)g(of)f(gas.)47
b(In)35 b(order)f(to)f(ac)m(hiev)m(e)j(our)e(goal,)g(Eq.\(4.27\),)h
(Eq.\(4.36\),)f(Eq.\(4.38\))g(and)h(Eq.\(4.39\))f(of)-70
2270 y([)-43 2270 y
SDict begin H.S end
 -43 2270 a Fp(1)6 2206 y
SDict begin H.R end
 6 2206 a
6 2270 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 6 2270 a Fp(])f(pla)m(y)g(imp)s(ortan)m(t)g(roles)g(here.)1215
2270 y
SDict begin H.S end
 1215 2270 a 1215 2270 a
SDict begin 18.85004 H.A end
 1215 2270 a 1215 2270
a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.6) cvn /DEST pdfmark
end
 1215 2270 a 1070 2539 a Fp(\()p Fo(u)1164 2498 y Fl(0)1164
2563 y Fi(m)1230 2539 y Fp(\))1268 2498 y Fi(n)1268 2563
y(j)t Fl(\006)p Fj(1)p Fi(=)p Fj(2)1492 2539 y Fk(\021)c
Fp(\()p Fo(u)1692 2554 y Fi(m)1758 2539 y Fp(\))1796
2488 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)1796 2570
y Fi(j)t Fl(\006)p Fj(1)p Fi(=)p Fj(2)2025 2539 y Fp(+)2133
2471 y(\001)p Fo(t)p 2133 2516 117 4 v 2167 2607 a Fp(2)2260
2539 y(\()p Fo(u)2354 2554 y Fi(mt)2445 2539 y Fp(\))2483
2488 y Fi(n)p Fl(\000)p Fj(1)p Fi(=)p Fj(2)2483 2570
y Fi(j)t Fl(\006)p Fj(1)p Fi(=)p Fj(2)3706 2539 y Fp(\(6\))-70
2795 y
SDict begin H.S end
 -70 2795 a -70 2795 a
SDict begin 18.85004 H.A end
 -70 2795 a -70 2795 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.7) cvn /DEST pdfmark
end
 -70
2795 a 957 2963 a Fp(\()p Fo(u)1051 2978 y Fi(mx)p Fl(\006)1212
2963 y Fp(\))1250 2922 y Fi(n)1250 2988 y(j)1325 2963
y Fk(\021)1440 2878 y Fp(\()p Fo(u)1534 2842 y Fl(0)1534
2902 y Fi(m)1600 2878 y Fp(\))1638 2842 y Fi(n)1638 2907
y(j)t Fl(\006)p Fj(1)p Fi(=)p Fj(2)1857 2878 y Fk(\000)23
b Fp(\()p Fo(u)2051 2893 y Fi(m)2117 2878 y Fp(\))2155
2842 y Fi(n)2155 2902 y(j)p 1440 2940 762 4 v 1704 3031
a Fp(\001)p Fo(x=)p Fp(2)2212 2963 y Fo(;)49 b(m)28 b
Fp(=)f(1)p Fo(;)49 b Fp(2)p Fo(;)g Fp(3)903 b(\(7\))-70
3173 y
SDict begin H.S end
 -70 3173 a -70 3173 a
SDict begin 18.85004 H.A end
 -70 3173 a -70 3173 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.8) cvn /DEST pdfmark
end
 -70
3173 a 858 3330 a Fp(\()p Fo(u)952 3289 y Fi(W)1019 3298
y Fg(0)952 3354 y Fi(mx)1057 3330 y Fp(\))1095 3289 y
Fi(n)1095 3354 y(j)1170 3330 y Fk(\021)28 b Fo(W)1367
3345 y Fj(0)1407 3330 y Fp(\(\()p Fo(u)1539 3345 y Fi(mx)p
Fl(\000)1699 3330 y Fp(\))1737 3289 y Fi(n)1737 3354
y(j)1784 3330 y Fo(;)17 b Fp(\()p Fo(u)1922 3345 y Fi(mx)p
Fj(+)2082 3330 y Fp(\))2120 3289 y Fi(n)2120 3354 y(j)2167
3330 y Fp(;)g Fo(\013)q Fp(\))p Fo(;)49 b(m)28 b Fp(=)f(1)p
Fo(;)49 b Fp(2)p Fo(;)g Fp(3)803 b(\(8\))-70 3540 y(Here)23
b Fo(\013)f Fp(is)g(an)g(adjustable)h(constan)m(t)f(for)f(w)m(eigh)m
(ting)i(and)f(the)g(function)h Fo(W)2653 3555 y Fj(0)2714
3540 y Fp(is)f(de\014ned)h(b)m(y)g(\(i\))f Fo(W)3468
3555 y Fj(0)3507 3540 y Fp(\(0)p Fo(;)17 b Fp(0)p Fo(;)g(\013)q
Fp(\))26 b(=)-70 3697 y(0)33 b(and)f(\(ii\))364 3697
y
SDict begin H.S end
 364 3697 a 364 3697 a
SDict begin 18.85004 H.A end
 364 3697 a 364 3697 a
SDict begin [/View [/XYZ H.V]/Dest (equation.4.9) cvn /DEST pdfmark
end
 364 3697
a 708 3872 a Fo(W)800 3887 y Fj(0)840 3872 y Fp(\()p
Fo(x)933 3887 y Fl(\000)992 3872 y Fo(;)17 b(x)1091 3887
y Fj(+)1150 3872 y Fp(;)g Fo(\013)q Fp(\))27 b(=)1436
3805 y Fk(j)p Fo(x)1519 3820 y Fj(+)1578 3805 y Fk(j)1606
3769 y Fi(\013)1655 3805 y Fo(x)1710 3820 y Fl(\000)1792
3805 y Fp(+)22 b Fk(j)p Fo(x)1973 3820 y Fl(\000)2032
3805 y Fk(j)2060 3769 y Fi(\013)2109 3805 y Fo(x)2164
3820 y Fj(+)p 1436 3849 788 4 v 1523 3940 a Fk(j)p Fo(x)1606
3955 y Fj(+)1665 3940 y Fk(j)1693 3912 y Fi(\013)1764
3940 y Fp(+)g Fk(j)p Fo(x)1945 3955 y Fj(+)p Fl(\000)2059
3940 y Fk(j)2087 3912 y Fi(\013)2233 3872 y Fo(;)50 b
Fp(\()p Fk(j)p Fo(x)2431 3887 y Fj(+)2490 3872 y Fk(j)22
b Fp(+)g Fk(j)p Fo(x)2721 3887 y Fl(\000)2780 3872 y
Fk(j)27 b Fo(>)h Fp(0\))p Fo(;)653 b Fp(\(9\))-70 4097
y(where)34 b Fo(x)267 4112 y Fj(+)359 4097 y Fp(and)f
Fo(x)604 4112 y Fl(\000)696 4097 y Fp(are)f(an)m(y)i(t)m(w)m(o)f(real)g
(v)-5 b(ariables.)77 4253 y(As)32 b(men)m(tioned)i(b)m(y)f([)856
4253 y
SDict begin H.S end
 856 4253 a Fp(1)905 4189 y
SDict begin H.R end
 905 4189 a 905 4253
a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 905 4253 a Fp(],)g(it)f(dev)m(elops)i(w)m(eigh)m(ted)g(a)m(v)m(erage)
g(instead)f(of)f(using)g(the)h(cen)m(tral-di\013erence)-70
4410 y(appro)m(ximation)h(for)f Fo(@)5 b(u)843 4425 y
Fi(m)910 4410 y Fo(=@)g(x)p Fp(.)47 b(This)34 b(w)m(eigh)m(ted)h(a)m(v)
m(erage)g(is)f(v)-5 b(alid)33 b(ev)m(en)i(in)e(the)h(presence)i(of)c
(discon)m(ti-)-70 4566 y(n)m(uit)m(y)-8 b(.)45 b(It)33
b(should)g(b)s(e)g(noted)g(that)f(w)m(e)i(set)f(the)g(w)m(eigh)m(ting)h
(factor)e Fo(\013)i Fp(to)e(b)s(e)h('1')f(in)h(our)f(solv)m(er.)77
4723 y(The)h(corresp)s(onding)h(Python)f(co)s(de)g(is)g(here,)h(where)g
(index)f('j')g(is)g(the)g(index)h(of)e(for)g(lo)s(op.)43
b(The)34 b(for)-70 4879 y(lo)s(op)i(go)s(es)g(through)g(sp)s(eci\014c)i
(elemen)m(ts)g(of)e(matrix)g(with)h(resp)s(ect)g(to)f(v)-5
b(arying)36 b(in)m(terv)-5 b(als.)55 b(The)37 b(range)-70
5036 y(of)32 b(lo)s(op)g(is)i(v)m(ery)g(similar)f(to)f(the)h(lo)s(op)f
(of)g(the)h(\014rst)g(step.)-70 5105 y
SDict begin H.S end
 -70 5105 a -70
5105 a
SDict begin 18.85004 H.A end
 -70 5105 a -70 5105 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-2) cvn /DEST pdfmark
end
 -70 5105 a -70 5097 3900
4 v -70 5232 a
SDict begin H.S end
 -70 5232 a -70 5232 a
SDict begin 18.85004 H.A end
 -70 5232 a -70 5232
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.1) cvn /DEST pdfmark
end
 -70 5232 a 930 w Fb(.)-70 5388 y
SDict begin H.S end
 -70 5388 a -70 5388
a
SDict begin 18.85004 H.A end
 -70 5388 a -70 5388 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.2) cvn /DEST pdfmark
end
 -70 5388 a 930 w Fb(.)1832 5695
y Fp(11)p eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 -78 -269 a -70 156
a
SDict begin H.S end
 -70 156 a -70 156 a
SDict begin 18.85004 H.A end
 -70 156 a -70 156 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.3) cvn /DEST pdfmark
end
 -70 156 a 930
w Fb(.)-70 312 y
SDict begin H.S end
 -70 312 a -70 312 a
SDict begin 18.85004 H.A end
 -70 312 a -70 312
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.4) cvn /DEST pdfmark
end
 -70 312 a 266 w Fb(mtx)p 333 312 25 4 v 29 w(qn)o([:,)42
b(j+1])g(=)h(0.5)g Fk(\003)g Fb(\(mtx)p 1372 312 V 28
w(q[:,)f(j])h(+)g(mtx)p 1968 312 V 29 w(q)o([:,)g(j)o(+1])g(+)g(mtx)p
2652 312 V 28 w(s[:,)f(j])h Fk(\000)h Fb(mtx)p 3282 312
V 29 w(s)o([:,)f(j)o(+1]\))-70 469 y
SDict begin H.S end
 -70 469 a -70 469
a
SDict begin 18.85004 H.A end
 -70 469 a -70 469 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.5) cvn /DEST pdfmark
end
 -70 469 a 266 w Fb(uxl)f(=)h(np.)o(asarray)m
(\(\(mtx)p 1118 469 25 4 v 28 w(qn)o([:,)g(j)o(+1])g
Fk(\000)h Fb(mtx)p 1879 469 V 28 w(q[:,)e(j])h Fk(\000)h
Fb(0.5)e Fk(\003)i Fb(dt)f Fk(\003)g Fb(mtx)p 3001 469
V 29 w(qt)o([:,)f(j]\))h Fk(n)-70 625 y
SDict begin H.S end
 -70 625 a -70
625 a
SDict begin 18.85004 H.A end
 -70 625 a -70 625 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.6) cvn /DEST pdfmark
end
 -70 625 a 2258 w Fb(/)h(\()o(dx)f(/)g
(2.0\)\))-70 782 y
SDict begin H.S end
 -70 782 a -70 782 a
SDict begin 18.85004 H.A end
 -70 782 a -70
782 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.7) cvn /DEST pdfmark
end
 -70 782 a 266 w Fb(uxr)f(=)h(np.)o(asarray)m(\(\(mtx)p
1118 782 25 4 v 28 w(q[:,)f(j+1])g(+)h(0.5)g Fk(\003)g
Fb(dt)g Fk(\003)g Fb(mtx)p 2293 782 V 29 w(qt)o([:,)f(j+1])g
Fk(\000)i Fb(mtx)p 3054 782 V 29 w(qn)o([:,)e(j+1]\))g
Fk(n)-70 938 y
SDict begin H.S end
 -70 938 a -70 938 a
SDict begin 18.85004 H.A end
 -70 938 a -70 938
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.8) cvn /DEST pdfmark
end
 -70 938 a 2391 w Fb(/)h(\(dx)g(/)g(2.0\)\))-70 1095
y
SDict begin H.S end
 -70 1095 a -70 1095 a
SDict begin 18.85004 H.A end
 -70 1095 a -70 1095 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.9) cvn /DEST pdfmark
end
 -70 1095
a 266 w Fb(mtx)p 333 1095 25 4 v 29 w(qx)o([:,)f(j+1])g(=)h(np)o
(.asmatrix)m(\(\()o(uxl)f Fk(\003)i Fb(\()o Fa(abs)o
Fb(\(uxr)n(\)\))p Fk(\003\003)o Fb(weight)d(+)i(uxr)g
Fk(\003)g Fb(\()p Fa(abs)n Fb(\(uxl)o(\)\))p Fk(\003\003)o
Fb(weight)m(\))g Fk(n)-70 1251 y
SDict begin H.S end
 -70 1251 a -70 1251
a
SDict begin 18.85004 H.A end
 -70 1251 a -70 1251 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.10) cvn /DEST pdfmark
end
 -70 1251 a 1262 w Fb(/)g(\(\()p
Fa(abs)n Fb(\(uxl)o(\)\))p Fk(\003\003)n Fb(weight)f(+)h(\()o
Fa(abs)o Fb(\(uxr)n(\)\))p Fk(\003\003)o Fb(weight)e(+)j(10)p
Fk(\003\003)p Fb(\()p Fk(\000)p Fb(60\)\)\))-70 1408
y
SDict begin H.S end
 -70 1408 a -70 1408 a
SDict begin 18.85004 H.A end
 -70 1408 a -70 1408 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.11) cvn /DEST pdfmark
end
 -70 1408
a 930 w Fb(.)-70 1564 y
SDict begin H.S end
 -70 1564 a -70 1564 a
SDict begin 18.85004 H.A end
 -70 1564
a -70 1564 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.12) cvn /DEST pdfmark
end
 -70 1564 a 930 w Fb(.)-70 1721 y
SDict begin H.S end
 -70 1721
a -70 1721 a
SDict begin 18.85004 H.A end
 -70 1721 a -70 1721 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.13) cvn /DEST pdfmark
end
 -70 1721 a 930 w Fb(.)p
-70 1796 3900 4 v -70 1985 a
SDict begin H.S end
 -70 1985 a -70 1985 a
SDict begin 18.85004 H.A end
 -70
1985 a -70 1985 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.1.3) cvn /DEST
pdfmark end
 -70 1985 a 128 x Fq(4.1.3)113 b(Third)38
b(step)-70 2334 y Fp(Basically)-8 b(,)31 b(all)d(the)g(needed)i
(calculation)f(of)e(CESE)j(metho)s(d)f(for)e(ev)-5 b(aluating)29
b(the)f(status)h(of)f(gas)g(in)g(eac)m(h)-70 2491 y(iteration)d(is)h
(done)f(b)m(y)h(the)f(previous)i(t)m(w)m(o)e(steps.)43
b(The)25 b(rest)h(thing)f(is)g(to)g(reset)h(the)f(p)s(osition)g
(information)-70 2647 y(whic)m(h)35 b(is)e(stored)h(in)f('m)m(tx)p
916 2647 30 4 v 36 w(q')g(for)g(next)g(iteration.)45
b(Hence,)34 b(the)f(information)g(stored)h(in)f('m)m(tx)p
3483 2647 V 36 w(qn')h(will)-70 2804 y(b)s(e)42 b(assigned)i(bac)m(k)f
(to)e('m)m(tx)p 1033 2804 V 37 w(q'.)72 b(It)42 b(should)g(b)s(e)h
(noted)f(that)g(b)s(oth)f('m)m(tx)p 2757 2804 V 37 w(q')h(and)g('m)m
(tx)p 3307 2804 V 36 w(qx')h(ha)m(v)m(e)h(to)-70 2960
y(b)s(e)d(translated)g(bac)m(kw)m(ard)i(1)d(dx)h(p)s(er)g(1)f(dt)h(\(2)
f(iterations\).)68 b(This)42 b(is)f(simply)h(due)g(to)e(the)h(nature)g
(of)-70 3117 y(CESE)31 b(metho)s(d)f(and)g(also)g(the)g(matrix)g(op)s
(eration)g(in)f(our)h(program.)42 b(After)30 b(that,)g(it's)g(time)h
(to)e(exp)s(ort)-70 3273 y(the)42 b(results)h(for)e(visualization.)71
b(The)42 b(complete)h(Python)f(co)s(de)g(of)f(CESE)i(solv)m(er)f(can)g
(b)s(e)g(found)f(in)-70 3430 y(Section)272 3430 y
SDict begin H.S end
 272
3430 a Fp(4.2)396 3366 y
SDict begin H.R end
 396 3366 a 396 3430 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (subsection.4.2) cvn H.B /ANN pdfmark end
 396 3430
a Fp(.)-70 3569 y
SDict begin H.S end
 -70 3569 a -70 3569 a
SDict begin 18.85004 H.A end
 -70 3569 a -70
3569 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.2) cvn /DEST pdfmark
end
 -70 3569 a 194 x Fn(4.2)136 b(Python)44 b(co)t(de)-70
3901 y
SDict begin H.S end
 -70 3901 a -70 3901 a
SDict begin 18.85004 H.A end
 -70 3901 a -70 3901 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-3) cvn /DEST pdfmark
end
 -70
3901 a -70 3889 3900 4 v -70 4024 a
SDict begin H.S end
 -70 4024 a -70 4024
a
SDict begin 18.85004 H.A end
 -70 4024 a -70 4024 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.1) cvn /DEST pdfmark
end
 -70 4024 a -72 w Fg(1)e Fa(import)f
Fb(matplotlib)-70 4180 y
SDict begin H.S end
 -70 4180 a -70 4180 a
SDict begin 18.85004 H.A end
 -70 4180
a -70 4180 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.2) cvn /DEST pdfmark
end
 -70 4180 a -72 w Fg(2)h Fb(matplotlib)l(.use)o(\()o
('TKAgg)n(')o(\))-70 4337 y
SDict begin H.S end
 -70 4337 a -70 4337 a
SDict begin 18.85004 H.A end
 -70
4337 a -70 4337 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.3) cvn /DEST pdfmark
end
 -70 4337 a -72 w Fg(3)-70 4493 y
SDict begin H.S end
 -70
4493 a -70 4493 a
SDict begin 18.85004 H.A end
 -70 4493 a -70 4493 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.4) cvn /DEST pdfmark
end
 -70 4493 a -72
w Fg(4)g Fa(import)f Fb(numpy)h(as)h(np)-70 4650 y
SDict begin H.S end
 -70
4650 a -70 4650 a
SDict begin 18.85004 H.A end
 -70 4650 a -70 4650 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.5) cvn /DEST pdfmark
end
 -70 4650 a -72
w Fg(5)f Fa(import)f Fb(matplotlib)l(.pyplot)g(as)i(plt)-70
4806 y
SDict begin H.S end
 -70 4806 a -70 4806 a
SDict begin 18.85004 H.A end
 -70 4806 a -70 4806 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.6) cvn /DEST pdfmark
end
 -70
4806 a -72 w Fg(6)f Fa(import)f Fb(matplotlib)l(.animation)f(as)i
(animation)-70 4963 y
SDict begin H.S end
 -70 4963 a -70 4963 a
SDict begin 18.85004 H.A end
 -70 4963
a -70 4963 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.7) cvn /DEST pdfmark
end
 -70 4963 a -72 w Fg(7)-70 5119 y
SDict begin H.S end
 -70 5119
a -70 5119 a
SDict begin 18.85004 H.A end
 -70 5119 a -70 5119 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.8) cvn /DEST pdfmark
end
 -70 5119 a -72 w Fg(8)g
Fh(#)35 b(glob)-5 b(al)34 b(variable)-70 5276 y
SDict begin H.S end
 -70 5276
a -70 5276 a
SDict begin 18.85004 H.A end
 -70 5276 a -70 5276 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.9) cvn /DEST pdfmark
end
 -70 5276 a -72 w Fg(9)42
b Fb(it)h(=)g(100)314 b Fh(#)35 b(numb)-5 b(er)35 b(of)f(iter)-5
b(ations)-70 5432 y
SDict begin H.S end
 -70 5432 a -70 5432 a
SDict begin 18.85004 H.A end
 -70 5432 a
-70 5432 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.10) cvn /DEST pdfmark
end
 -70 5432 a -102 w Fg(10)42 b Fb(npx)h(=)g(it)g(+)g(2)140
b Fh(#)35 b(numb)-5 b(er)35 b(of)f(p)-5 b(oints)35 b(\()o(x)p
Fk(\000)q Fh(axis)o(\))1832 5695 y Fp(12)p eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 -78 -269 a -70 156
a
SDict begin H.S end
 -70 156 a -70 156 a
SDict begin 18.85004 H.A end
 -70 156 a -70 156 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.11) cvn /DEST pdfmark
end
 -70 156 a -102
w Fg(11)42 b Fb(dt)h(=)g(0.4)g Fk(\003)g Fb(10)p Fk(\003\003)p
Fb(\()p Fk(\000)p Fb(2\))f Fh(#)34 b(time)h(interval)f(=)h(0.004)-70
312 y
SDict begin H.S end
 -70 312 a -70 312 a
SDict begin 18.85004 H.A end
 -70 312 a -70 312 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.12) cvn /DEST pdfmark
end
 -70 312
a -102 w Fg(12)42 b Fb(dx)h(=)g(0.1)g Fk(\003)g Fb(10)p
Fk(\003\003)p Fb(\()p Fk(\000)p Fb(1\))f Fh(#)34 b(sp)-5
b(ac)g(e)34 b(interval)h(=)f(0.01)-70 469 y
SDict begin H.S end
 -70 469 a
-70 469 a
SDict begin 18.85004 H.A end
 -70 469 a -70 469 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.13) cvn /DEST pdfmark
end
 -70 469 a -102 w Fg(13)42
b Fb(ga)h(=)g(1.4)314 b Fh(#)35 b(gamma)f(=)g(Cp/Cv)-70
625 y
SDict begin H.S end
 -70 625 a -70 625 a
SDict begin 18.85004 H.A end
 -70 625 a -70 625 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.14) cvn /DEST pdfmark
end
 -70 625
a -102 w Fg(14)-70 782 y
SDict begin H.S end
 -70 782 a -70 782 a
SDict begin 18.85004 H.A end
 -70 782
a -70 782 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.15) cvn /DEST pdfmark
end
 -70 782 a -102 w Fg(15)42 b Fb(rhol)g(=)h(1.0)-70
938 y
SDict begin H.S end
 -70 938 a -70 938 a
SDict begin 18.85004 H.A end
 -70 938 a -70 938 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.16) cvn /DEST pdfmark
end
 -70 938
a -102 w Fg(16)f Fb(pl)78 b(=)44 b(1.0)-70 1095 y
SDict begin H.S end
 -70
1095 a -70 1095 a
SDict begin 18.85004 H.A end
 -70 1095 a -70 1095 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.17) cvn /DEST pdfmark
end
 -70 1095 a -102
w Fg(17)e Fb(vl)78 b(=)44 b(0.0)-70 1251 y
SDict begin H.S end
 -70 1251 a
-70 1251 a
SDict begin 18.85004 H.A end
 -70 1251 a -70 1251 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.18) cvn /DEST pdfmark
end
 -70 1251 a -102 w Fg(18)e
Fb(rhor)g(=)h(0.125)-70 1408 y
SDict begin H.S end
 -70 1408 a -70 1408 a
SDict begin 18.85004 H.A end

-70 1408 a -70 1408 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.19) cvn /DEST pdfmark
end
 -70 1408 a -102 w Fg(19)f Fb(pr)78
b(=)44 b(0.1)-70 1564 y
SDict begin H.S end
 -70 1564 a -70 1564 a
SDict begin 18.85004 H.A end
 -70 1564
a -70 1564 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.20) cvn /DEST pdfmark
end
 -70 1564 a -102 w Fg(20)e Fb(vr)78 b(=)44
b(0.0)-70 1721 y
SDict begin H.S end
 -70 1721 a -70 1721 a
SDict begin 18.85004 H.A end
 -70 1721 a -70
1721 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.21) cvn /DEST pdfmark
end
 -70 1721 a -102 w Fg(21)-70 1877 y
SDict begin H.S end
 -70 1877 a
-70 1877 a
SDict begin 18.85004 H.A end
 -70 1877 a -70 1877 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.22) cvn /DEST pdfmark
end
 -70 1877 a -102 w Fg(22)e
Fb(weight)f(=)j(1)f Fh(#)34 b(weighting)g(factor)h(of)f(Eq.\(4.39\))-70
2034 y
SDict begin H.S end
 -70 2034 a -70 2034 a
SDict begin 18.85004 H.A end
 -70 2034 a -70 2034 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.23) cvn /DEST pdfmark
end
 -70
2034 a -102 w Fg(23)-70 2190 y
SDict begin H.S end
 -70 2190 a -70 2190 a
SDict begin 18.85004 H.A end

-70 2190 a -70 2190 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.24) cvn /DEST pdfmark
end
 -70 2190 a -102 w Fg(24)42 b Fh(#)35
b(ne)-5 b(c)g(essary)34 b(matric)-5 b(es)34 b(for)h(CESE)g(c)-5
b(alculation)-70 2347 y
SDict begin H.S end
 -70 2347 a -70 2347 a
SDict begin 18.85004 H.A end
 -70 2347
a -70 2347 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.25) cvn /DEST pdfmark
end
 -70 2347 a -102 w Fg(25)42 b Fb(mtx)p 67
2347 25 4 v 29 w(q)h(=)g(np)o(.asmatrix)m(\()o(np.)o(zeros)n(\(shape)n
(=\(3,)e(npx)o(\)\)\))-70 2503 y
SDict begin H.S end
 -70 2503 a -70 2503
a
SDict begin 18.85004 H.A end
 -70 2503 a -70 2503 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.26) cvn /DEST pdfmark
end
 -70 2503 a -102 w Fg(26)h Fb(mtx)p
67 2503 25 4 v 29 w(qn)h(=)g(np)o(.asmatrix)l(\(np)o(.zeros)n(\()o
(shape)n(=\(3,)f(npx)o(\)\)\))-70 2660 y
SDict begin H.S end
 -70 2660 a -70
2660 a
SDict begin 18.85004 H.A end
 -70 2660 a -70 2660 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.27) cvn /DEST pdfmark
end
 -70 2660 a -102 w Fg(27)g
Fb(mtx)p 67 2660 25 4 v 29 w(qx)h(=)g(np)o(.asmatrix)l(\(np)o(.zeros)n
(\()o(shape)n(=\(3,)f(npx)o(\)\)\))-70 2816 y
SDict begin H.S end
 -70 2816
a -70 2816 a
SDict begin 18.85004 H.A end
 -70 2816 a -70 2816 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.28) cvn /DEST pdfmark
end
 -70 2816 a -102 w
Fg(28)g Fb(mtx)p 67 2816 25 4 v 29 w(f)h(=)g(np)o(.asmatrix)m(\()o(np.)
o(zeros)n(\(shape)n(=\(3,)e(3\)\)\))-70 2973 y
SDict begin H.S end
 -70 2973
a -70 2973 a
SDict begin 18.85004 H.A end
 -70 2973 a -70 2973 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.29) cvn /DEST pdfmark
end
 -70 2973 a -102 w
Fg(29)h Fb(mtx)p 67 2973 25 4 v 29 w(qt)h(=)g(np)o(.asmatrix)l(\(np)o
(.zeros)n(\()o(shape)n(=\(3,)f(npx)o(\)\)\))-70 3129
y
SDict begin H.S end
 -70 3129 a -70 3129 a
SDict begin 18.85004 H.A end
 -70 3129 a -70 3129 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.30) cvn /DEST pdfmark
end
 -70 3129
a -102 w Fg(30)g Fb(mtx)p 67 3129 25 4 v 29 w(s)h(=)g(np)o(.asmatrix)m
(\()o(np.)o(zeros)n(\(shape)n(=\(3,)e(npx)o(\)\)\))-70
3286 y
SDict begin H.S end
 -70 3286 a -70 3286 a
SDict begin 18.85004 H.A end
 -70 3286 a -70 3286 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.31) cvn /DEST pdfmark
end
 -70
3286 a -102 w Fg(31)h Fb(uxl)h(=)g(np)o(.zeros)n(\()o(shape)n
(=\(3,1\)\))-70 3442 y
SDict begin H.S end
 -70 3442 a -70 3442 a
SDict begin 18.85004 H.A end
 -70 3442
a -70 3442 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.32) cvn /DEST pdfmark
end
 -70 3442 a -102 w Fg(32)f Fb(uxr)h(=)g(np)o(.zeros)n(\()o
(shape)n(=\(3,1\)\))-70 3599 y
SDict begin H.S end
 -70 3599 a -70 3599 a
SDict begin 18.85004 H.A end

-70 3599 a -70 3599 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.33) cvn /DEST pdfmark
end
 -70 3599 a -102 w Fg(33)-70 3755
y
SDict begin H.S end
 -70 3755 a -70 3755 a
SDict begin 18.85004 H.A end
 -70 3755 a -70 3755 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.34) cvn /DEST pdfmark
end
 -70 3755
a -102 w Fg(34)f Fh(#)35 b(output)h(lists)-70 3912 y
SDict begin H.S end

-70 3912 a -70 3912 a
SDict begin 18.85004 H.A end
 -70 3912 a -70 3912 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.35) cvn /DEST pdfmark
end
 -70 3912
a -102 w Fg(35)42 b Fb(xx)j(=)e([0.)g Fa(for)f Fb(idx)g
Fa(in)h(range)n Fb(\(npx)n(\)])g Fh(#)35 b(x)p Fk(\000)p
Fh(axis)-70 4068 y
SDict begin H.S end
 -70 4068 a -70 4068 a
SDict begin 18.85004 H.A end
 -70 4068 a -70
4068 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.36) cvn /DEST pdfmark
end
 -70 4068 a -102 w Fg(36)42 b Fb(status)p 199 4068
25 4 v 28 w(rho)g(=)h([rhor)f Fa(if)h Fb(idx)f Fo(>)p
Fb(=)h(npx)f(/)h(2)h Fa(else)e Fb(rhol)f Fa(for)i Fb(idx)f
Fa(in)h(range)n Fb(\()o(npx)o(\)])g Fh(#)35 b(rho)-70
4225 y
SDict begin H.S end
 -70 4225 a -70 4225 a
SDict begin 18.85004 H.A end
 -70 4225 a -70 4225 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.37) cvn /DEST pdfmark
end
 -70
4225 a -102 w Fg(37)42 b Fb(status)p 199 4225 25 4 v
28 w(vel)g(=)h([0.)g Fa(for)f Fb(idx)g Fa(in)h(range)n
Fb(\(npx)n(\)])g Fh(#)35 b(v)-70 4381 y
SDict begin H.S end
 -70 4381 a -70
4381 a
SDict begin 18.85004 H.A end
 -70 4381 a -70 4381 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.38) cvn /DEST pdfmark
end
 -70 4381 a -102 w Fg(38)42
b Fb(status)p 199 4381 25 4 v 28 w(p)h(=)g([pr)f Fa(if)h
Fb(idx)g Fo(>)p Fb(=)g(npx)f(/)h(2)g Fa(else)f Fb(pl)h
Fa(for)f Fb(idx)h Fa(in)f(range)n Fb(\(npx)o(\)])g Fh(#)35
b(p)-70 4538 y
SDict begin H.S end
 -70 4538 a -70 4538 a
SDict begin 18.85004 H.A end
 -70 4538 a -70 4538
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.39) cvn /DEST pdfmark
end
 -70 4538 a -102 w Fg(39)-70 4694 y
SDict begin H.S end
 -70 4694 a -70 4694
a
SDict begin 18.85004 H.A end
 -70 4694 a -70 4694 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.40) cvn /DEST pdfmark
end
 -70 4694 a -102 w Fg(40)42 b
Fh(#)35 b(initialization)f(of)g(matrix)h(u)-70 4851 y
SDict begin H.S end

-70 4851 a -70 4851 a
SDict begin 18.85004 H.A end
 -70 4851 a -70 4851 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.41) cvn /DEST pdfmark
end
 -70 4851
a -102 w Fg(41)42 b Fa(for)h Fb(j)g Fa(in)g(xrange)m
Fb(\(0,)f(npx)o(\):)-70 5007 y
SDict begin H.S end
 -70 5007 a -70 5007 a
SDict begin 18.85004 H.A end

-70 5007 a -70 5007 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.42) cvn /DEST pdfmark
end
 -70 5007 a -102 w Fg(42)175 b Fh(#)35
b(Eq)g(\(4.1\),)e(u1)q(,)h(u2)h(and)g(u3)-70 5164 y
SDict begin H.S end
 -70
5164 a -70 5164 a
SDict begin 18.85004 H.A end
 -70 5164 a -70 5164 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.43) cvn /DEST pdfmark
end
 -70 5164 a -102
w Fg(43)175 b Fa(if)43 b Fb(j)g Fo(<)h Fb(npx)e(/)h(2:)-70
5320 y
SDict begin H.S end
 -70 5320 a -70 5320 a
SDict begin 18.85004 H.A end
 -70 5320 a -70 5320 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.44) cvn /DEST pdfmark
end
 -70
5320 a -102 w Fg(44)308 b Fb(mtx)p 333 5320 25 4 v 29
w(q)o([0,)43 b(j)o(])g(=)g(rhol)1832 5695 y Fp(13)p eop
end
%%Page: 14 14
TeXDict begin 14 13 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 -78 -269 a -70 156
a
SDict begin H.S end
 -70 156 a -70 156 a
SDict begin 18.85004 H.A end
 -70 156 a -70 156 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.45) cvn /DEST pdfmark
end
 -70 156 a -102
w Fg(45)308 b Fb(mtx)p 333 156 25 4 v 29 w(q)o([1,)43
b(j)o(])g(=)g(rhol)f Fk(\003)i Fb(vl)-70 312 y
SDict begin H.S end
 -70 312
a -70 312 a
SDict begin 18.85004 H.A end
 -70 312 a -70 312 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.46) cvn /DEST pdfmark
end
 -70 312 a -102 w Fg(46)308
b Fb(mtx)p 333 312 25 4 v 29 w(q)o([2,)43 b(j)o(])g(=)g(pl)g(/)g(\(ga)g
Fk(\000)h Fb(1.0\))e(+)h(0.5)f Fk(\003)i Fb(rhol)e Fk(\003)h
Fb(vl)o Fk(\003\003)p Fb(2)-70 469 y
SDict begin H.S end
 -70 469 a -70 469
a
SDict begin 18.85004 H.A end
 -70 469 a -70 469 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.47) cvn /DEST pdfmark
end
 -70 469 a -102 w Fg(47)175 b Fa(else)n
Fb(:)-70 625 y
SDict begin H.S end
 -70 625 a -70 625 a
SDict begin 18.85004 H.A end
 -70 625 a -70 625
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.48) cvn /DEST pdfmark
end
 -70 625 a -102 w Fg(48)308 b Fb(mtx)p 333 625 25 4
v 29 w(q)o([0,)43 b(j)o(])g(=)g(rhor)-70 782 y
SDict begin H.S end
 -70 782
a -70 782 a
SDict begin 18.85004 H.A end
 -70 782 a -70 782 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.49) cvn /DEST pdfmark
end
 -70 782 a -102 w Fg(49)308
b Fb(mtx)p 333 782 25 4 v 29 w(q)o([1,)43 b(j)o(])g(=)g(rhor)f
Fk(\003)i Fb(vr)-70 938 y
SDict begin H.S end
 -70 938 a -70 938 a
SDict begin 18.85004 H.A end
 -70 938
a -70 938 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.50) cvn /DEST pdfmark
end
 -70 938 a -102 w Fg(50)308 b Fb(mtx)p 333
938 25 4 v 29 w(q)o([2,)43 b(j)o(])g(=)g(pr)g(/)g(\(ga)g
Fk(\000)h Fb(1.0\))e(+)h(0.5)f Fk(\003)i Fb(rhor)e Fk(\003)h
Fb(vr)o Fk(\003\003)p Fb(2)-70 1095 y
SDict begin H.S end
 -70 1095 a -70
1095 a
SDict begin 18.85004 H.A end
 -70 1095 a -70 1095 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.51) cvn /DEST pdfmark
end
 -70 1095 a -102 w Fg(51)-70
1251 y
SDict begin H.S end
 -70 1251 a -70 1251 a
SDict begin 18.85004 H.A end
 -70 1251 a -70 1251 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.52) cvn /DEST pdfmark
end
 -70
1251 a -102 w Fg(52)f Fh(#)35 b(setting)g(the)g(x)o Fk(\000)q
Fh(axis)o(,)g(fr)-5 b(om)34 b Fk(\000)p Fh(0.505)h(to)g(0.505)-70
1408 y
SDict begin H.S end
 -70 1408 a -70 1408 a
SDict begin 18.85004 H.A end
 -70 1408 a -70 1408 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.53) cvn /DEST pdfmark
end
 -70
1408 a -102 w Fg(53)42 b Fb(xx)o([0])h(=)g Fk(\000)p
Fb(0.5)g Fk(\003)g Fb(dx)g Fk(\003)g Fa(float)n Fb(\(it)g(+)g(1\))-70
1564 y
SDict begin H.S end
 -70 1564 a -70 1564 a
SDict begin 18.85004 H.A end
 -70 1564 a -70 1564 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.54) cvn /DEST pdfmark
end
 -70
1564 a -102 w Fg(54)f Fa(for)h Fb(j)g Fa(in)g(xrange)m
Fb(\(0,)f(npx)h Fk(\000)h Fb(1\):)-70 1721 y
SDict begin H.S end
 -70 1721
a -70 1721 a
SDict begin 18.85004 H.A end
 -70 1721 a -70 1721 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.55) cvn /DEST pdfmark
end
 -70 1721 a -102 w
Fg(55)175 b Fb(xx)o([j)o(+1])43 b(=)g(xx)o([j)o(])h(+)f(dx)-70
1877 y
SDict begin H.S end
 -70 1877 a -70 1877 a
SDict begin 18.85004 H.A end
 -70 1877 a -70 1877 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.56) cvn /DEST pdfmark
end
 -70
1877 a -102 w Fg(56)-70 2034 y
SDict begin H.S end
 -70 2034 a -70 2034 a
SDict begin 18.85004 H.A end

-70 2034 a -70 2034 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.57) cvn /DEST pdfmark
end
 -70 2034 a -102 w Fg(57)f Fh(#)35
b(initialization)f(of)g(output)i(plots)-70 2190 y
SDict begin H.S end
 -70
2190 a -70 2190 a
SDict begin 18.85004 H.A end
 -70 2190 a -70 2190 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.58) cvn /DEST pdfmark
end
 -70 2190 a -102
w Fg(58)42 b Fb(fig)h(=)g(plt)o(.)o(figure)n(\(\))-70
2347 y
SDict begin H.S end
 -70 2347 a -70 2347 a
SDict begin 18.85004 H.A end
 -70 2347 a -70 2347 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.59) cvn /DEST pdfmark
end
 -70
2347 a -102 w Fg(59)f Fb(frame)p 155 2347 25 4 v 28 w(seq)g(=)i([])-70
2503 y
SDict begin H.S end
 -70 2503 a -70 2503 a
SDict begin 18.85004 H.A end
 -70 2503 a -70 2503 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.60) cvn /DEST pdfmark
end
 -70
2503 a -102 w Fg(60)-70 2660 y
SDict begin H.S end
 -70 2660 a -70 2660 a
SDict begin 18.85004 H.A end

-70 2660 a -70 2660 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.61) cvn /DEST pdfmark
end
 -70 2660 a -102 w Fg(61)e Fh(#)35
b(variables)f(of)g(lo)-5 b(op)-70 2816 y
SDict begin H.S end
 -70 2816 a -70
2816 a
SDict begin 18.85004 H.A end
 -70 2816 a -70 2816 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.62) cvn /DEST pdfmark
end
 -70 2816 a -102 w Fg(62)42
b Fb(mtx)p 67 2816 25 4 v 29 w(length)f(=)i(npx)-70 2973
y
SDict begin H.S end
 -70 2973 a -70 2973 a
SDict begin 18.85004 H.A end
 -70 2973 a -70 2973 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.63) cvn /DEST pdfmark
end
 -70 2973
a -102 w Fg(63)f Fb(start)p 155 2973 25 4 v 28 w(point)g(=)h(npx)f(/)h
(2)h Fk(\000)g Fb(1)-70 3129 y
SDict begin H.S end
 -70 3129 a -70 3129 a
SDict begin 18.85004 H.A end

-70 3129 a -70 3129 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.64) cvn /DEST pdfmark
end
 -70 3129 a -102 w Fg(64)e Fb(stepping)f(=)i(2)-70
3286 y
SDict begin H.S end
 -70 3286 a -70 3286 a
SDict begin 18.85004 H.A end
 -70 3286 a -70 3286 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.65) cvn /DEST pdfmark
end
 -70
3286 a -102 w Fg(65)-70 3442 y
SDict begin H.S end
 -70 3442 a -70 3442 a
SDict begin 18.85004 H.A end

-70 3442 a -70 3442 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.66) cvn /DEST pdfmark
end
 -70 3442 a -102 w Fg(66)f Fh(#)35
b(start)g(to)g(evaluate)g(the)g(solution)f(iter)-5 b(atively)-70
3599 y
SDict begin H.S end
 -70 3599 a -70 3599 a
SDict begin 18.85004 H.A end
 -70 3599 a -70 3599 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.67) cvn /DEST pdfmark
end
 -70
3599 a -102 w Fg(67)42 b Fa(for)h Fb(i)g Fa(in)g(xrange)m
Fb(\(0,)f(it\):)-70 3755 y
SDict begin H.S end
 -70 3755 a -70 3755 a
SDict begin 18.85004 H.A end
 -70
3755 a -70 3755 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.68) cvn /DEST pdfmark
end
 -70 3755 a -102 w Fg(68)-70 3912 y
SDict begin H.S end

-70 3912 a -70 3912 a
SDict begin 18.85004 H.A end
 -70 3912 a -70 3912 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.69) cvn /DEST pdfmark
end
 -70 3912
a -102 w Fg(69)175 b Fh(#)35 b(evaluate)f(the)h(curr)-5
b(ent)35 b(status)h(of)e(gas)-70 4068 y
SDict begin H.S end
 -70 4068 a -70
4068 a
SDict begin 18.85004 H.A end
 -70 4068 a -70 4068 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.70) cvn /DEST pdfmark
end
 -70 4068 a -102 w Fg(70)175
b Fa(for)42 b Fb(j)i Fa(in)e(xrange)n Fb(\(start)p 986
4068 25 4 v 27 w(point)n(,)h(start)p 1538 4068 V 28 w(point)f(+)h
(stepping)m(\):)-70 4225 y
SDict begin H.S end
 -70 4225 a -70 4225 a
SDict begin 18.85004 H.A end
 -70
4225 a -70 4225 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.71) cvn /DEST pdfmark
end
 -70 4225 a -102 w Fg(71)-70 4381 y
SDict begin H.S end

-70 4381 a -70 4381 a
SDict begin 18.85004 H.A end
 -70 4381 a -70 4381 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.72) cvn /DEST pdfmark
end
 -70 4381
a -102 w Fg(72)308 b Fh(#)35 b(Eq)o(.)g(\(4.7\):)f(c)-5
b(onstructing)35 b(the)g(matrix)f(fm,k)-70 4538 y
SDict begin H.S end
 -70
4538 a -70 4538 a
SDict begin 18.85004 H.A end
 -70 4538 a -70 4538 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.73) cvn /DEST pdfmark
end
 -70 4538 a -102
w Fg(73)308 b Fh(#)35 b(other)f(r)-5 b(efer)g(enc)g(e)o(:)35
b(Y)-7 b(ung)p Fk(\000)q Fh(Y)g(u's)34 b(notes)h Fk(\000)p
Fo(>)g Fh(Se)-5 b(c.3.1,)34 b(Eq.)h(\(3.14\))-70 4694
y
SDict begin H.S end
 -70 4694 a -70 4694 a
SDict begin 18.85004 H.A end
 -70 4694 a -70 4694 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.74) cvn /DEST pdfmark
end
 -70 4694
a -102 w Fg(74)308 b Fb(w2)43 b(=)g(mtx)p 551 4694 25
4 v 29 w(q)o([1,)f(j])h(/)g(mtx)p 1147 4694 V 29 w(q[0,)f(j])h
Fh(#)34 b(u2/u1)-70 4851 y
SDict begin H.S end
 -70 4851 a -70 4851 a
SDict begin 18.85004 H.A end
 -70
4851 a -70 4851 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.75) cvn /DEST pdfmark
end
 -70 4851 a -102 w Fg(75)308 b Fb(w3)43
b(=)g(mtx)p 551 4851 25 4 v 29 w(q)o([2,)f(j])h(/)g(mtx)p
1147 4851 V 29 w(q[0,)f(j])h Fh(#)34 b(u3/u1)-70 5007
y
SDict begin H.S end
 -70 5007 a -70 5007 a
SDict begin 18.85004 H.A end
 -70 5007 a -70 5007 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.76) cvn /DEST pdfmark
end
 -70 5007
a -102 w Fg(76)308 b Fb(mtx)p 333 5007 25 4 v 29 w(f)o([0,)43
b(0])f(=)h(0.0)-70 5164 y
SDict begin H.S end
 -70 5164 a -70 5164 a
SDict begin 18.85004 H.A end
 -70 5164
a -70 5164 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.77) cvn /DEST pdfmark
end
 -70 5164 a -102 w Fg(77)308 b Fb(mtx)p 333
5164 25 4 v 29 w(f)o([0,)43 b(1])f(=)h(1.0)-70 5320 y
SDict begin H.S end

-70 5320 a -70 5320 a
SDict begin 18.85004 H.A end
 -70 5320 a -70 5320 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.78) cvn /DEST pdfmark
end
 -70 5320
a -102 w Fg(78)308 b Fb(mtx)p 333 5320 25 4 v 29 w(f)o([0,)43
b(2])f(=)h(0.0)1832 5695 y Fp(14)p eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 -78 -269 a -70 156
a
SDict begin H.S end
 -70 156 a -70 156 a
SDict begin 18.85004 H.A end
 -70 156 a -70 156 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.79) cvn /DEST pdfmark
end
 -70 156 a -102
w Fg(79)308 b Fb(mtx)p 333 156 25 4 v 29 w(f)o([1,)43
b(0])f(=)h Fk(\000)p Fb(0.5)g Fk(\003)h Fb(\(3.0)e Fk(\000)i
Fb(ga)o(\))f Fk(\003)g Fb(w2)p Fk(\003\003)p Fb(2)-70
312 y
SDict begin H.S end
 -70 312 a -70 312 a
SDict begin 18.85004 H.A end
 -70 312 a -70 312 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.80) cvn /DEST pdfmark
end
 -70 312
a -102 w Fg(80)308 b Fb(mtx)p 333 312 25 4 v 29 w(f)o([1,)43
b(1])f(=)h(\(3.0)f Fk(\000)i Fb(ga\))f Fk(\003)g Fb(w2)-70
469 y
SDict begin H.S end
 -70 469 a -70 469 a
SDict begin 18.85004 H.A end
 -70 469 a -70 469 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.81) cvn /DEST pdfmark
end
 -70 469
a -102 w Fg(81)308 b Fb(mtx)p 333 469 25 4 v 29 w(f)o([1,)43
b(2])f(=)h(ga)g Fk(\000)h Fb(1.0)-70 625 y
SDict begin H.S end
 -70 625 a
-70 625 a
SDict begin 18.85004 H.A end
 -70 625 a -70 625 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.82) cvn /DEST pdfmark
end
 -70 625 a -102 w Fg(82)308
b Fb(mtx)p 333 625 25 4 v 29 w(f)o([2,)43 b(0])f(=)h(\(ga)g
Fk(\000)h Fb(1.0\))e Fk(\003)h Fb(w2)o Fk(\003\003)p
Fb(3)g Fk(\000)h Fb(ga)f Fk(\003)g Fb(w2)g Fk(\003)h
Fb(w3)-70 782 y
SDict begin H.S end
 -70 782 a -70 782 a
SDict begin 18.85004 H.A end
 -70 782 a -70 782
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.83) cvn /DEST pdfmark
end
 -70 782 a -102 w Fg(83)308 b Fb(mtx)p 333 782 25 4
v 29 w(f)o([2,)43 b(1])f(=)h(ga)g Fk(\003)h Fb(w3)e Fk(\000)i
Fb(1.5)f Fk(\003)g Fb(\(ga)g Fk(\000)h Fb(1.0\))e Fk(\003)h
Fb(w2)o Fk(\003\003)p Fb(2)-70 938 y
SDict begin H.S end
 -70 938 a -70 938
a
SDict begin 18.85004 H.A end
 -70 938 a -70 938 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.84) cvn /DEST pdfmark
end
 -70 938 a -102 w Fg(84)308 b Fb(mtx)p
333 938 25 4 v 29 w(f)o([2,)43 b(2])f(=)h(ga)g Fk(\003)h
Fb(w2)-70 1095 y
SDict begin H.S end
 -70 1095 a -70 1095 a
SDict begin 18.85004 H.A end
 -70 1095 a -70
1095 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.85) cvn /DEST pdfmark
end
 -70 1095 a -102 w Fg(85)-70 1251 y
SDict begin H.S end
 -70 1251 a
-70 1251 a
SDict begin 18.85004 H.A end
 -70 1251 a -70 1251 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.86) cvn /DEST pdfmark
end
 -70 1251 a -102 w Fg(86)308
b Fh(#)35 b(Eq)o(.\(4.17\),)f(\(u)p 873 1251 30 4 v 36
w(mt\)nj)h(=)f Fk(\000)p Fh(\()q(f)p 1438 1251 V 35 w(mx\)nj)g(=)h
Fk(\000)p Fh(\(fm,k)p Fk(\003)o Fh(u)p 2270 1251 V 37
w(kx)o(\)nj,)f(\(u)p 2677 1251 V 36 w(mt)q(\))o(nj)h
Fk(\000)p Fo(>)g Fh(qt,)g(\(u)p 3407 1251 V 36 w(kx\)nj)f
Fk(\000)p Fo(>)h Fh(qx)-70 1408 y
SDict begin H.S end
 -70 1408 a -70 1408
a
SDict begin 18.85004 H.A end
 -70 1408 a -70 1408 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.87) cvn /DEST pdfmark
end
 -70 1408 a -102 w Fg(87)308 b
Fb(mtx)p 333 1408 25 4 v 29 w(qt)o([:,)o(j)o(])43 b(=)g
Fk(\000)p Fb(1.0)g Fk(\003)h Fb(mtx)p 1275 1408 V 28
w(f)g Fk(\003)f Fb(mtx)p 1616 1408 V 29 w(qx)o([:,)o(j)o(])-70
1564 y
SDict begin H.S end
 -70 1564 a -70 1564 a
SDict begin 18.85004 H.A end
 -70 1564 a -70 1564 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.88) cvn /DEST pdfmark
end
 -70
1564 a -102 w Fg(88)-70 1721 y
SDict begin H.S end
 -70 1721 a -70 1721 a
SDict begin 18.85004 H.A end

-70 1721 a -70 1721 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.89) cvn /DEST pdfmark
end
 -70 1721 a -102 w Fg(89)308 b Fh(#)35
b(Eq)o(.\(4.25\),)f(\(u)p 873 1721 30 4 v 36 w(m\)nj)g
Fk(\000)p Fo(>)i Fh(q)o(,)f(\(u)p 1538 1721 V 36 w(mt\)nj)g
Fk(\000)p Fo(>)g Fh(qt,)g(\(u)p 2268 1721 V 36 w(kx)o(\)nj)g
Fk(\000)p Fo(>)g Fh(qx)-70 1877 y
SDict begin H.S end
 -70 1877 a -70 1877
a
SDict begin 18.85004 H.A end
 -70 1877 a -70 1877 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.90) cvn /DEST pdfmark
end
 -70 1877 a -102 w Fg(90)308 b
Fb(mtx)p 333 1877 25 4 v 29 w(s)o([:,)43 b(j)o(])g(=)g(0.25)f
Fk(\003)i Fb(dx)f Fk(\003)g Fb(mtx)p 1465 1877 V 29 w(qx)o([:,)f(j])h
(+)g(\(dt)f(/)i(dx)o(\))f Fk(\003)g Fb(mtx)p 2634 1877
V 29 w(f)g Fk(\003)h Fb(mtx)p 2976 1877 V 28 w(q[:,)o(j)o(])f
Fk(n)-70 2034 y
SDict begin H.S end
 -70 2034 a -70 2034 a
SDict begin 18.85004 H.A end
 -70 2034 a -70
2034 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.91) cvn /DEST pdfmark
end
 -70 2034 a -102 w Fg(91)906 b Fk(\000)44 b Fb(0.25)e
Fk(\003)h Fb(dt)g Fk(\003)g Fb(\(dt)g(/)g(dx)o(\))g Fk(\003)h
Fb(mtx)p 2117 2034 25 4 v 28 w(f)f Fk(\003)h Fb(mtx)p
2458 2034 V 28 w(f)g Fk(\003)f Fb(mtx)p 2799 2034 V 29
w(qx)o([:,)o(j)o(])-70 2190 y
SDict begin H.S end
 -70 2190 a -70 2190 a
SDict begin 18.85004 H.A end
 -70
2190 a -70 2190 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.92) cvn /DEST pdfmark
end
 -70 2190 a -102 w Fg(92)-70 2347 y
SDict begin H.S end

-70 2347 a -70 2347 a
SDict begin 18.85004 H.A end
 -70 2347 a -70 2347 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.93) cvn /DEST pdfmark
end
 -70 2347
a -102 w Fg(93)175 b Fh(#)35 b(evaluate)f(the)h(status)h(of)e(gas)h
(after)f(time)h(stamp)g(moves)e(forwar)-5 b(d)35 b(by)g(1)f(dt)q(/2)-70
2503 y
SDict begin H.S end
 -70 2503 a -70 2503 a
SDict begin 18.85004 H.A end
 -70 2503 a -70 2503 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.94) cvn /DEST pdfmark
end
 -70
2503 a -102 w Fg(94)175 b Fb(ssm1)42 b(=)h(start)p 593
2503 25 4 v 28 w(point)f(+)h(stepping)d Fk(\000)k Fb(1)-70
2660 y
SDict begin H.S end
 -70 2660 a -70 2660 a
SDict begin 18.85004 H.A end
 -70 2660 a -70 2660 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.95) cvn /DEST pdfmark
end
 -70
2660 a -102 w Fg(95)175 b Fa(for)42 b Fb(j)i Fa(in)e(xrange)n
Fb(\(start)p 986 2660 25 4 v 27 w(point)n(,)h(ssm1)o(\):)g
Fh(#)34 b(j)h Fk(\000)p Fo(>)g Fh(1)g(dx)o(/2)-70 2816
y
SDict begin H.S end
 -70 2816 a -70 2816 a
SDict begin 18.85004 H.A end
 -70 2816 a -70 2816 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.96) cvn /DEST pdfmark
end
 -70 2816
a -102 w Fg(96)308 b Fh(#)35 b(Eq)o(.\(4.24\),)f('qn')g(=)h(the)g(next)
g(state)g(of)f('q',)-70 2973 y
SDict begin H.S end
 -70 2973 a -70 2973 a
SDict begin 18.85004 H.A end

-70 2973 a -70 2973 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.97) cvn /DEST pdfmark
end
 -70 2973 a -102 w Fg(97)308 b Fh(#)35
b(wher)-5 b(e)34 b(\(u)p 684 2973 30 4 v 36 w(m)o(\)nj)h
Fk(\000)p Fo(>)g Fh(qn,)g(\()o(u)p 1403 2973 V 37 w(m)o(\)\(n)p
Fk(\000)p Fh(1/2\)\()o(j+)p Fk(\000)p Fh(1/2\))g Fk(\000)p
Fo(>)g Fh(q)-70 3129 y
SDict begin H.S end
 -70 3129 a -70 3129 a
SDict begin 18.85004 H.A end
 -70 3129
a -70 3129 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.98) cvn /DEST pdfmark
end
 -70 3129 a -102 w Fg(98)308 b Fb(mtx)p 333
3129 25 4 v 29 w(qn)o([:,)42 b(j+1])g(=)h(0.5)g Fk(\003)g
Fb(\(mtx)p 1372 3129 V 28 w(q[:,)f(j])h(+)g(mtx)p 1968
3129 V 29 w(q)o([:,)g(j)o(+1])g(+)g(mtx)p 2652 3129 V
28 w(s[:,)f(j])h Fk(\000)h Fb(mtx)p 3282 3129 V 29 w(s)o([:,)f(j)o
(+1]\))-70 3286 y
SDict begin H.S end
 -70 3286 a -70 3286 a
SDict begin 18.85004 H.A end
 -70 3286 a -70
3286 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.99) cvn /DEST pdfmark
end
 -70 3286 a -102 w Fg(99)308 b Fh(#)35 b(Eq)o(.\(4.27\))f(and)h
(Eq)o(.\(4.36\),)f('l')h(me)-5 b(ans)34 b(')p Fk(\000)p
Fh(')h(and)f('r')h(me)-5 b(ans)34 b('+'.)-70 3442 y
SDict begin H.S end
 -70
3442 a -70 3442 a
SDict begin 18.85004 H.A end
 -70 3442 a -70 3442 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.100) cvn /DEST pdfmark
end
 -70 3442 a -133
w Fg(100)309 b Fb(uxl)42 b(=)h(np.)o(asarray)m(\(\(mtx)p
1118 3442 25 4 v 28 w(qn)o([:,)g(j)o(+1])g Fk(\000)h
Fb(mtx)p 1879 3442 V 28 w(q[:,)e(j])h Fk(\000)h Fb(0.5)e
Fk(\003)i Fb(dt)f Fk(\003)g Fb(mtx)p 3001 3442 V 29 w(qt)o([:,)f(j]\))h
Fk(n)-70 3599 y
SDict begin H.S end
 -70 3599 a -70 3599 a
SDict begin 18.85004 H.A end
 -70 3599 a -70
3599 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.101) cvn /DEST pdfmark
end
 -70 3599 a -133 w Fg(101)2301 b Fb(/)44 b(\()o(dx)f(/)g(2.0\)\))
-70 3755 y
SDict begin H.S end
 -70 3755 a -70 3755 a
SDict begin 18.85004 H.A end
 -70 3755 a -70 3755
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.102) cvn /DEST pdfmark
end
 -70 3755 a -133 w Fg(102)309 b Fb(uxr)42 b(=)h(np.)o(asarray)m
(\(\(mtx)p 1118 3755 25 4 v 28 w(q[:,)f(j+1])g(+)h(0.5)g
Fk(\003)g Fb(dt)g Fk(\003)g Fb(mtx)p 2293 3755 V 29 w(qt)o([:,)f(j+1])g
Fk(\000)i Fb(mtx)p 3054 3755 V 29 w(qn)o([:,)e(j+1]\))g
Fk(n)-70 3912 y
SDict begin H.S end
 -70 3912 a -70 3912 a
SDict begin 18.85004 H.A end
 -70 3912 a -70
3912 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.103) cvn /DEST pdfmark
end
 -70 3912 a -133 w Fg(103)2434 b Fb(/)43 b(\(dx)g(/)g(2.0\)\))-70
4068 y
SDict begin H.S end
 -70 4068 a -70 4068 a
SDict begin 18.85004 H.A end
 -70 4068 a -70 4068 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.104) cvn /DEST pdfmark
end
 -70
4068 a -133 w Fg(104)309 b Fh(#)35 b(Eq)o(.\(4.38\))f(and)h(Eq)o
(.\(4.39\))-70 4225 y
SDict begin H.S end
 -70 4225 a -70 4225 a
SDict begin 18.85004 H.A end
 -70 4225
a -70 4225 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.105) cvn /DEST pdfmark
end
 -70 4225 a -133 w Fg(105)309 b Fb(mtx)p
333 4225 25 4 v 29 w(qx)o([:,)42 b(j+1])g(=)h(np)o(.asmatrix)m(\(\()o
(uxl)f Fk(\003)i Fb(\()o Fa(abs)o Fb(\(uxr)n(\)\))p Fk(\003\003)o
Fb(weight)d(+)i(uxr)g Fk(\003)g Fb(\()p Fa(abs)n Fb(\(uxl)o(\)\))p
Fk(\003\003)o Fb(weight)m(\))g Fk(n)-70 4381 y
SDict begin H.S end
 -70 4381
a -70 4381 a
SDict begin 18.85004 H.A end
 -70 4381 a -70 4381 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.106) cvn /DEST pdfmark
end
 -70 4381 a -133 w
Fg(106)1305 b Fb(/)43 b(\(\()p Fa(abs)n Fb(\(uxl)o(\)\))p
Fk(\003\003)n Fb(weight)f(+)h(\()o Fa(abs)o Fb(\(uxr)n(\)\))p
Fk(\003\003)o Fb(weight)e(+)j(10)p Fk(\003\003)p Fb(\()p
Fk(\000)p Fb(60\)\)\))-70 4538 y
SDict begin H.S end
 -70 4538 a -70 4538
a
SDict begin 18.85004 H.A end
 -70 4538 a -70 4538 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.107) cvn /DEST pdfmark
end
 -70 4538 a -133 w Fg(107)-70
4694 y
SDict begin H.S end
 -70 4694 a -70 4694 a
SDict begin 18.85004 H.A end
 -70 4694 a -70 4694 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.108) cvn /DEST pdfmark
end
 -70
4694 a -133 w Fg(108)176 b Fa(for)42 b Fb(j)i Fa(in)e(xrange)n
Fb(\(start)p 986 4694 25 4 v 27 w(point)g(+)h(1,)g(start)p
1713 4694 V 28 w(point)e(+)i(stepping)m(\):)-70 4851
y
SDict begin H.S end
 -70 4851 a -70 4851 a
SDict begin 18.85004 H.A end
 -70 4851 a -70 4851 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.109) cvn /DEST pdfmark
end
 -70 4851
a -133 w Fg(109)309 b Fb(mtx)p 333 4851 25 4 v 29 w(q)o([:,)43
b(j)o(])g(=)g(mtx)p 929 4851 V 29 w(qn)o([:,)g(j)o(])-70
5007 y
SDict begin H.S end
 -70 5007 a -70 5007 a
SDict begin 18.85004 H.A end
 -70 5007 a -70 5007 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.110) cvn /DEST pdfmark
end
 -70
5007 a -133 w Fg(110)-70 5164 y
SDict begin H.S end
 -70 5164 a -70 5164 a
SDict begin 18.85004 H.A end

-70 5164 a -70 5164 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.111) cvn /DEST pdfmark
end
 -70 5164 a -133 w Fg(111)176 b
Fh(#)35 b(IMPOR)-7 b(T)g(ANT)o(:)35 b(mtx)p 1012 5164
30 4 v 35 w(q)g(and)f(mtx)p 1473 5164 V 36 w(qx)h(have)f(to)h(b)-5
b(e)34 b(tr)-5 b(anslate)g(d)35 b(b)-5 b(ackwar)g(d)34
b(1)g(dx)h(p)-5 b(er)35 b(1)f(dt)h(\(2)g(iter)-5 b(ations\))-70
5320 y
SDict begin H.S end
 -70 5320 a -70 5320 a
SDict begin 18.85004 H.A end
 -70 5320 a -70 5320 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.112) cvn /DEST pdfmark
end
 -70
5320 a -133 w Fg(112)176 b Fa(if)43 b Fb(i)g(\045)g(2)g(!=)g(0:)1832
5695 y Fp(15)p eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 -78 -269 a -70 156
a
SDict begin H.S end
 -70 156 a -70 156 a
SDict begin 18.85004 H.A end
 -70 156 a -70 156 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.113) cvn /DEST pdfmark
end
 -70 156 a -133
w Fg(113)309 b Fa(for)42 b Fb(j)h Fa(in)g(xrange)n Fb(\(1,)f(mtx)p
1161 156 25 4 v 29 w(length)m(\):)-70 312 y
SDict begin H.S end
 -70 312 a
-70 312 a
SDict begin 18.85004 H.A end
 -70 312 a -70 312 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.114) cvn /DEST pdfmark
end
 -70 312 a -133 w Fg(114)442
b Fb(mtx)p 466 312 25 4 v 28 w(q[:,)42 b(j)p Fk(\000)p
Fb(1])h(=)g(mtx)p 1183 312 V 29 w(q[:,)f(j])-70 469 y
SDict begin H.S end

-70 469 a -70 469 a
SDict begin 18.85004 H.A end
 -70 469 a -70 469 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.115) cvn /DEST pdfmark
end
 -70 469 a -133
w Fg(115)442 b Fb(mtx)p 466 469 25 4 v 28 w(qx[:,)42
b(j)p Fk(\000)p Fb(1])h(=)g(mtx)p 1227 469 V 29 w(qx)o([:,)f(j])-70
625 y
SDict begin H.S end
 -70 625 a -70 625 a
SDict begin 18.85004 H.A end
 -70 625 a -70 625 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.116) cvn /DEST pdfmark
end
 -70 625
a -133 w Fg(116)-70 782 y
SDict begin H.S end
 -70 782 a -70 782 a
SDict begin 18.85004 H.A end
 -70 782
a -70 782 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.117) cvn /DEST pdfmark
end
 -70 782 a -133 w Fg(117)309 b Fb(start)p
421 782 25 4 v 28 w(point)41 b Fk(\000)p Fb(=)j(1)-70
938 y
SDict begin H.S end
 -70 938 a -70 938 a
SDict begin 18.85004 H.A end
 -70 938 a -70 938 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.118) cvn /DEST pdfmark
end
 -70 938
a -133 w Fg(118)309 b Fb(stepping)40 b(+=)j(2)-70 1095
y
SDict begin H.S end
 -70 1095 a -70 1095 a
SDict begin 18.85004 H.A end
 -70 1095 a -70 1095 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.119) cvn /DEST pdfmark
end
 -70 1095
a -133 w Fg(119)-70 1251 y
SDict begin H.S end
 -70 1251 a -70 1251 a
SDict begin 18.85004 H.A end
 -70
1251 a -70 1251 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.120) cvn /DEST pdfmark
end
 -70 1251 a -133 w Fg(120)309 b Fh(#)35
b(output)g(r)-5 b(e)g(gion)-70 1408 y
SDict begin H.S end
 -70 1408 a -70
1408 a
SDict begin 18.85004 H.A end
 -70 1408 a -70 1408 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.121) cvn /DEST pdfmark
end
 -70 1408 a -133 w Fg(121)309
b Fa(for)42 b Fb(j)h Fa(in)g(xrange)n Fb(\(0,)f(mtx)p
1161 1408 25 4 v 29 w(length)m(\):)-70 1564 y
SDict begin H.S end
 -70 1564
a -70 1564 a
SDict begin 18.85004 H.A end
 -70 1564 a -70 1564 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.122) cvn /DEST pdfmark
end
 -70 1564 a -133 w
Fg(122)442 b Fb(status)p 598 1564 25 4 v 27 w(rho)o([j)o(])43
b(=)g(mtx)p 1149 1564 V 29 w(q[0,)f(j])-70 1721 y
SDict begin H.S end
 -70
1721 a -70 1721 a
SDict begin 18.85004 H.A end
 -70 1721 a -70 1721 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.123) cvn /DEST pdfmark
end
 -70 1721 a -133
w Fg(123)442 b Fb(status)p 598 1721 25 4 v 27 w(vel)o([j)o(])43
b(=)g(mtx)p 1149 1721 V 29 w(q[1,)f(j])h(/)g(mtx)p 1746
1721 V 29 w(q)o([0,)g(j)o(])-70 1877 y
SDict begin H.S end
 -70 1877 a -70
1877 a
SDict begin 18.85004 H.A end
 -70 1877 a -70 1877 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.124) cvn /DEST pdfmark
end
 -70 1877 a -133 w Fg(124)442
b Fb(status)p 598 1877 25 4 v 27 w(p[)o(j])43 b(=)g(\(ga)g
Fk(\000)h Fb(1.0\))e Fk(\003)h Fb(\(mtx)p 1713 1877 V
28 w(q[2,)f(j])h Fk(\000)h Fb(0.5)e Fk(\003)i Fb(mtx)p
2611 1877 V 28 w(q[0,)e(j])h Fk(\003)h Fb(status)p 3346
1877 V 27 w(vel)o([)o(j])p Fk(\003\003)p Fb(2\))-70 2034
y
SDict begin H.S end
 -70 2034 a -70 2034 a
SDict begin 18.85004 H.A end
 -70 2034 a -70 2034 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.125) cvn /DEST pdfmark
end
 -70 2034
a -133 w Fg(125)-70 2190 y
SDict begin H.S end
 -70 2190 a -70 2190 a
SDict begin 18.85004 H.A end
 -70
2190 a -70 2190 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.126) cvn /DEST pdfmark
end
 -70 2190 a -133 w Fg(126)309 b Fh(#)35
b(making)e(plots)i(of)f(gas)h(status)g(for)g(di\013er)-5
b(ent)34 b(time)h(intervals)-70 2347 y
SDict begin H.S end
 -70 2347 a -70
2347 a
SDict begin 18.85004 H.A end
 -70 2347 a -70 2347 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.127) cvn /DEST pdfmark
end
 -70 2347 a -133 w Fg(127)309
b Fb(plt)o(.)o(subplot)m(\(311\))-70 2503 y
SDict begin H.S end
 -70 2503
a -70 2503 a
SDict begin 18.85004 H.A end
 -70 2503 a -70 2503 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.128) cvn /DEST pdfmark
end
 -70 2503 a -133 w
Fg(128)g Fb(plot)p 377 2503 25 4 v 28 w(rho)43 b(=)g(plt)n(.scatter)m
(\(xx)o(,)g(status)p 1628 2503 V 28 w(rho)n(,)g(color)n(="r)o("\))-70
2660 y
SDict begin H.S end
 -70 2660 a -70 2660 a
SDict begin 18.85004 H.A end
 -70 2660 a -70 2660 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.129) cvn /DEST pdfmark
end
 -70
2660 a -133 w Fg(129)309 b Fb(plt)o(.)o(xlabel)n(\()o("x")o(\))-70
2816 y
SDict begin H.S end
 -70 2816 a -70 2816 a
SDict begin 18.85004 H.A end
 -70 2816 a -70 2816 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.130) cvn /DEST pdfmark
end
 -70
2816 a -133 w Fg(130)g Fb(plt)o(.)o(ylabel)n(\()o("density)m("\))-70
2973 y
SDict begin H.S end
 -70 2973 a -70 2973 a
SDict begin 18.85004 H.A end
 -70 2973 a -70 2973 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.131) cvn /DEST pdfmark
end
 -70
2973 a -133 w Fg(131)g Fb(plt)o(.)o(xlim)o(\()p Fk(\000)p
Fb(0.55,)41 b(0.55\))-70 3129 y
SDict begin H.S end
 -70 3129 a -70 3129 a
SDict begin 18.85004 H.A end

-70 3129 a -70 3129 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.132) cvn /DEST pdfmark
end
 -70 3129 a -133 w Fg(132)309 b
Fb(plt)o(.)o(ylim)o(\()p Fk(\000)p Fb(0.1,)42 b(1.1\))-70
3286 y
SDict begin H.S end
 -70 3286 a -70 3286 a
SDict begin 18.85004 H.A end
 -70 3286 a -70 3286 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.133) cvn /DEST pdfmark
end
 -70
3286 a -133 w Fg(133)309 b Fb(plt)o(.)o(subplot)m(\(312\))-70
3442 y
SDict begin H.S end
 -70 3442 a -70 3442 a
SDict begin 18.85004 H.A end
 -70 3442 a -70 3442 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.134) cvn /DEST pdfmark
end
 -70
3442 a -133 w Fg(134)g Fb(plot)p 377 3442 25 4 v 28 w(vel)43
b(=)g(plt)n(.scatter)m(\(xx)o(,)g(status)p 1628 3442
V 28 w(vel)n(,)g(color)n(="g)o("\))-70 3599 y
SDict begin H.S end
 -70 3599
a -70 3599 a
SDict begin 18.85004 H.A end
 -70 3599 a -70 3599 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.135) cvn /DEST pdfmark
end
 -70 3599 a -133 w
Fg(135)309 b Fb(plt)o(.)o(xlim)o(\()p Fk(\000)p Fb(0.55,)41
b(0.55\))-70 3755 y
SDict begin H.S end
 -70 3755 a -70 3755 a
SDict begin 18.85004 H.A end
 -70 3755 a
-70 3755 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.136) cvn /DEST pdfmark
end
 -70 3755 a -133 w Fg(136)309 b Fb(plt)o(.)o(ylim)o(\()p
Fk(\000)p Fb(0.1,)42 b(1.1\))-70 3912 y
SDict begin H.S end
 -70 3912 a -70
3912 a
SDict begin 18.85004 H.A end
 -70 3912 a -70 3912 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.137) cvn /DEST pdfmark
end
 -70 3912 a -133 w Fg(137)309
b Fb(plt)o(.)o(xlabel)n(\()o("x")o(\))-70 4068 y
SDict begin H.S end
 -70
4068 a -70 4068 a
SDict begin 18.85004 H.A end
 -70 4068 a -70 4068 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.138) cvn /DEST pdfmark
end
 -70 4068 a -133
w Fg(138)g Fb(plt)o(.)o(ylabel)n(\()o("velocity)m(")o(\))-70
4225 y
SDict begin H.S end
 -70 4225 a -70 4225 a
SDict begin 18.85004 H.A end
 -70 4225 a -70 4225 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.139) cvn /DEST pdfmark
end
 -70
4225 a -133 w Fg(139)g Fb(plt)o(.)o(subplot)m(\(313\))-70
4381 y
SDict begin H.S end
 -70 4381 a -70 4381 a
SDict begin 18.85004 H.A end
 -70 4381 a -70 4381 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.140) cvn /DEST pdfmark
end
 -70
4381 a -133 w Fg(140)g Fb(plot)p 377 4381 25 4 v 28 w(p)43
b(=)h(plt)n(.scatter)m(\(xx)o(,)f(status)p 1541 4381
V 27 w(p,)g(color)n(=")o(b")o(\))-70 4538 y
SDict begin H.S end
 -70 4538
a -70 4538 a
SDict begin 18.85004 H.A end
 -70 4538 a -70 4538 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.141) cvn /DEST pdfmark
end
 -70 4538 a -133 w
Fg(141)309 b Fb(plt)o(.)o(xlim)o(\()p Fk(\000)p Fb(0.55,)41
b(0.55\))-70 4694 y
SDict begin H.S end
 -70 4694 a -70 4694 a
SDict begin 18.85004 H.A end
 -70 4694 a
-70 4694 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.142) cvn /DEST pdfmark
end
 -70 4694 a -133 w Fg(142)309 b Fb(plt)o(.)o(ylim)o(\()p
Fk(\000)p Fb(0.1,)42 b(1.1\))-70 4851 y
SDict begin H.S end
 -70 4851 a -70
4851 a
SDict begin 18.85004 H.A end
 -70 4851 a -70 4851 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.143) cvn /DEST pdfmark
end
 -70 4851 a -133 w Fg(143)309
b Fb(plt)o(.)o(xlabel)n(\()o("x")o(\))-70 5007 y
SDict begin H.S end
 -70
5007 a -70 5007 a
SDict begin 18.85004 H.A end
 -70 5007 a -70 5007 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.144) cvn /DEST pdfmark
end
 -70 5007 a -133
w Fg(144)g Fb(plt)o(.)o(ylabel)n(\()o("pressure)m(")o(\))-70
5164 y
SDict begin H.S end
 -70 5164 a -70 5164 a
SDict begin 18.85004 H.A end
 -70 5164 a -70 5164 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.145) cvn /DEST pdfmark
end
 -70
5164 a -133 w Fg(145)g Fb(frame)p 421 5164 25 4 v 28
w(seq)o(.)o(append)n(\(\()o(plot)p 1148 5164 V 28 w(rho)o(,)43
b(plot)p 1570 5164 V 28 w(vel)o(,)g(plot)p 1992 5164
V 28 w(p\)\))-70 5320 y
SDict begin H.S end
 -70 5320 a -70 5320 a
SDict begin 18.85004 H.A end
 -70 5320
a -70 5320 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.146) cvn /DEST pdfmark
end
 -70 5320 a -133 w Fg(146)1832 5695 y Fp(16)p
eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -78 -269 a
SDict begin H.S end
 -78 -269
a -78 -269 a
SDict begin H.R end
 -78 -269 a -78 -269 a
SDict begin [/View [/XYZ H.V]/Dest (page.17) cvn /DEST pdfmark end
 -78 -269 a -70 156
a
SDict begin H.S end
 -70 156 a -70 156 a
SDict begin 18.85004 H.A end
 -70 156 a -70 156 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.147) cvn /DEST pdfmark
end
 -70 156 a -133
w Fg(147)176 b Fh(#)35 b(output)h(text)f(\014les)f(which)g(c)-5
b(ontain)34 b(gas)h(status)g(of)g(e)-5 b(ach)34 b(p)-5
b(oint)34 b(for)h(di\013er)-5 b(ent)34 b(time)h(intervals)-70
312 y
SDict begin H.S end
 -70 312 a -70 312 a
SDict begin 18.85004 H.A end
 -70 312 a -70 312 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.148) cvn /DEST pdfmark
end
 -70 312
a -133 w Fg(148)176 b Fa(file)42 b Fb(=)h Fa(open)o Fb(\()o("\04503)o
(d)o(")g(\045)g(\(i)g(+)g(1\))g(+)g(".dat)n(",)g('w)o('\))-70
469 y
SDict begin H.S end
 -70 469 a -70 469 a
SDict begin 18.85004 H.A end
 -70 469 a -70 469 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.149) cvn /DEST pdfmark
end
 -70 469
a -133 w Fg(149)176 b Fa(for)42 b Fb(j)i Fa(in)e(xrange)n
Fb(\(0,)g(mtx)p 1028 469 25 4 v 29 w(length)m(\):)-70
625 y
SDict begin H.S end
 -70 625 a -70 625 a
SDict begin 18.85004 H.A end
 -70 625 a -70 625 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.150) cvn /DEST pdfmark
end
 -70 625
a -133 w Fg(150)309 b Fa(file)n Fb(.write)n(\()o Fa(str)o
Fb(\(xx)o([j)o(]\))43 b(+)g(")g(")g(+)h Fa(str)n Fb(\(status)p
1947 625 25 4 v 27 w(rho)o([j)o(]\))f(+)g(")g(")h(+)f
Fa(str)n Fb(\(status)p 3110 625 V 27 w(vel)o([j)o(]\))g
Fk(n)-70 782 y
SDict begin H.S end
 -70 782 a -70 782 a
SDict begin 18.85004 H.A end
 -70 782 a -70 782
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.151) cvn /DEST pdfmark
end
 -70 782 a -133 w Fg(151)1737 b Fb(+)43 b(")g(")g(+)h
Fa(str)n Fb(\(status)p 2416 782 25 4 v 27 w(p[j)o(]\))f(+)g(")p
Fk(n)o Fb(n"\))-70 938 y
SDict begin H.S end
 -70 938 a -70 938 a
SDict begin 18.85004 H.A end
 -70 938
a -70 938 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.152) cvn /DEST pdfmark
end
 -70 938 a -133 w Fg(152)-70 1095 y
SDict begin H.S end
 -70 1095
a -70 1095 a
SDict begin 18.85004 H.A end
 -70 1095 a -70 1095 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.153) cvn /DEST pdfmark
end
 -70 1095 a -133 w
Fg(153)176 b Fa(file)n Fb(.close)n(\(\))-70 1251 y
SDict begin H.S end
 -70
1251 a -70 1251 a
SDict begin 18.85004 H.A end
 -70 1251 a -70 1251 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.154) cvn /DEST pdfmark
end
 -70 1251 a -133
w Fg(154)-70 1408 y
SDict begin H.S end
 -70 1408 a -70 1408 a
SDict begin 18.85004 H.A end
 -70 1408 a
-70 1408 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.155) cvn /DEST pdfmark
end
 -70 1408 a -133 w Fg(155)43 b Fb(ani)g(=)g(animation)l
(.ArtistAnimation)-7 b(\(fig)o(,)43 b(frame)p 1768 1408
25 4 v 28 w(seq)o(,)g(interval)l(=25,)f(repeat)p 2844
1408 V 28 w(delay)n(=300,)f(blit)o(=)o(True)o(\))-70
1564 y
SDict begin H.S end
 -70 1564 a -70 1564 a
SDict begin 18.85004 H.A end
 -70 1564 a -70 1564 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.156) cvn /DEST pdfmark
end
 -70
1564 a -133 w Fg(156)i Fb(ani)o(.save)n(\(')o(mySodTube)l(.mp4)o(')o(,)
h(fps)n(=10\);)-70 1721 y
SDict begin H.S end
 -70 1721 a -70 1721 a
SDict begin 18.85004 H.A end
 -70 1721
a -70 1721 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.157) cvn /DEST pdfmark
end
 -70 1721 a -133 w Fg(157)-70 1877 y
SDict begin H.S end
 -70
1877 a -70 1877 a
SDict begin 18.85004 H.A end
 -70 1877 a -70 1877 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.158) cvn /DEST pdfmark
end
 -70 1877 a -133
w Fg(158)f Fb(plt)o(.show)n(\(\))p -70 1952 3900 4 v
-70 2152 a
SDict begin H.S end
 -70 2152 a -70 2152 a
SDict begin 18.85004 H.A end
 -70 2152 a -70 2152
a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 -70 2152 a 210 x Fr(5)161 b(Progress)53 b(rep)t(ort)-70
2447 y
SDict begin H.S end
 -70 2447 a -70 2447 a
SDict begin 18.85004 H.A end
 -70 2447 a -70 2447 a
SDict begin [/View [/XYZ H.V]/Dest (Item.25) cvn /DEST pdfmark end
 -70
2447 a 50 2617 a Fp(1.)48 b(\()33 b(-)f(20151211\))e(reading)j(the)g
(CESE)h(pap)s(er)f([)1876 2617 y
SDict begin H.S end
 1876 2617 a Fp(1)1925
2553 y
SDict begin H.R end
 1925 2553 a 1925 2617 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 1925 2617 a Fp(],)f(Ac)m(hiev)m(emen)m
(t:)47 b(Section)34 b(2)e(and)h(3.)-70 2683 y
SDict begin H.S end
 -70 2683
a -70 2683 a
SDict begin 18.85004 H.A end
 -70 2683 a -70 2683 a
SDict begin [/View [/XYZ H.V]/Dest (Item.26) cvn /DEST pdfmark end
 -70 2683 a 50 2856
a Fp(2.)48 b(\(20151212)33 b(-)h(\))h(starting)f(to)h(fo)s(cus)g(on)f
(Euler)i(solv)m(er)g(and)e(mak)m(e)i(m)m(y)g(o)m(wn)f(1-D)f(solv)m(er)i
(whic)m(h)g(is)174 3013 y(referred)e(to)e(T)-8 b(ai-Hsiang's)33
b(co)s(de)g(and)g(app)s(endix)g(B)g(of)f(the)h(CESE)h(pap)s(er)f([)3022
3013 y
SDict begin H.S end
 3022 3013 a Fp(1)3071 2949 y
SDict begin H.R end
 3071 2949 a 3071
3013 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (cite.CESE_Shin_Chung_Chang_1995) cvn H.B /ANN pdfmark end
 3071 3013 a Fp(])-70 3079 y
SDict begin H.S end
 -70 3079 a -70 3079
a
SDict begin 18.85004 H.A end
 -70 3079 a -70 3079 a
SDict begin [/View [/XYZ H.V]/Dest (Item.27) cvn /DEST pdfmark end
 -70 3079 a 50 3252 a Fp(3.)48
b(\(20160110)25 b(-)g(\))h(Finished)i(the)f(\014rst)f(v)m(ersion)i(of)e
(CESE)i(solv)m(er)f(for)f(1-D)f(so)s(d)h(sho)s(c)m(k)i(tub)s(e)e
(problem.)174 3409 y(Starting)33 b(to)f(w)m(ork)h(on)g(unit)g(test)g
(and)g(impro)m(v)m(e)h(co)s(de)f(structure.)-70 3796
y
SDict begin H.S end
 -70 3796 a -70 3796 a
SDict begin 28.60007 H.A end
 -70 3796 a -70 3796 a
SDict begin [/View [/XYZ H.V]/Dest (section*.7) cvn /DEST pdfmark end
 -70 3796
a Fr(References)-70 3854 y
SDict begin H.S end
 -70 3854 a -70 3854 a
SDict begin 18.85004 H.A end
 -70
3854 a -70 3854 a
SDict begin [/View [/XYZ H.V]/Dest (cite.CESE_Shin_Chung_Chang_1995)
cvn /DEST pdfmark end
 -70 3854 a -21 4052 a Fp([1])49 b(Sin-Ch)m(ung)34
b(Chang,)g(The)g(Metho)s(d)f(of)g(Space-Time)i(Conserv)-5
b(ation)34 b(Elemen)m(t)h(and)e(Solution)g(El-)131 4208
y(emen)m(t|A)k(New)h(Approac)m(h)f(for)f(Solving)h(the)g(Na)m
(vier-Stok)m(es)h(and)f(Euler)g(Equations.)h(Journal)131
4365 y(of)32 b(Computational)h(Ph)m(ysics,)i(119,)d(295-324,)f(1995.)
1832 5695 y(17)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
